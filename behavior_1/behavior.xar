<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="59.4604">
                        <Box name="Add" id="6" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="633" y="101">
                            <bitmap>media/images/box/box-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand + self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Num1" type="0" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                            <Input name="Num2" type="0" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                            <Output name="output_Product" type="0" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                        </Box>
                        <Box name="Switch Case (1)" id="1" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="308" y="563">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(11)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		elif(p == self.typeConversion(4)):
			self.output_4(p)
		elif(p == self.typeConversion(5)):
			self.output_5(p)
		elif(p == self.typeConversion(6)):
			self.output_6(p)
		elif(p == self.typeConversion(7)):
			self.output_7(p)
		elif(p == self.typeConversion(8)):
			self.output_8(p)
		elif(p == self.typeConversion(9)):
			self.output_9(p)
		elif(p == self.typeConversion(10)):
			self.output_10(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                            </script>
                            <pluginContent>
                                <keywords>
                                    <keyword>11</keyword>
                                    <keyword>2</keyword>
                                    <keyword>3</keyword>
                                    <keyword>4</keyword>
                                    <keyword>5</keyword>
                                    <keyword>6</keyword>
                                    <keyword>7</keyword>
                                    <keyword>8</keyword>
                                    <keyword>9</keyword>
                                    <keyword>10</keyword>
                                    <keyword></keyword>
                                    <keyword></keyword>
                                    <keyword></keyword>
                                    <keyword></keyword>
                                </keywords>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                            <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                            <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                            <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                            <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                            <Output name="output_9" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="12" />
                            <Output name="output_10" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="13" />
                            <Output name="output_11" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="14" />
                            <Output name="output_12" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="15" />
                            <Output name="output_13" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="16" />
                        </Box>
                        <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="298" y="40">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("0")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[0]]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                        </Box>
                        <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="2145" y="122">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("0")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[0]]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                            <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                        </Box>
                        <Box name="Say Text" id="24" localization="8" tooltip="Say the text received on its input." x="1238" y="505">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Substract" id="22" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="2096" y="549">
                            <bitmap>media/images/box/box-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand - self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Num1" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                            <Input name="Num2" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                            <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                        </Box>
                        <Box name="If (1)" id="12" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="1682" y="1250">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onData" type="2" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                            <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                            <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                            <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&gt;" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                <Choice value="&lt;" />
                                <Choice value="&lt; or =" />
                                <Choice value="=" />
                                <Choice value="&gt; or =" />
                                <Choice value="&gt;" />
                                <Choice value="≠" />
                            </Parameter>
                            <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                        </Box>
                        <Box name="Say Won" id="25" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="2054" y="1239">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " ha! i knew id win! hahaha sorry buddy, but not sorry! i am the lord of blackjack! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[ha! i knew id win! hahaha sorry buddy, but not sorry! i am the lord of blackjack!]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say Lost" id="27" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="2055" y="1359">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " no way! this is not happening to my life!! what a drag!  ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[no way! this is not happening to my life!! what a drag! ]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Add (1)" id="14" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="2139" y="268">
                            <bitmap>media/images/box/box-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand + self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Num1" type="0" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                            <Input name="Num2" type="0" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                            <Output name="output_Product" type="0" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                        </Box>
                        <Box name="Speech Reco. (1)" id="26" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="1233" y="789">
                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="wordRecognized" type="0" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                            <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                            <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="12;13;14;15;16;17;18;19;20;21;won;lost" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                            <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                            <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                            <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Switch Case (2)" id="18" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="1558" y="809">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("won")):
			self.output_1(p)
		elif(p == self.typeConversion("lost")):
			self.output_2(p)
		elif(p == self.typeConversion(11)):
			self.output_3(p)
		elif(p == self.typeConversion(12)):
			self.output_4(p)
		elif(p == self.typeConversion(13)):
			self.output_5(p)
		elif(p == self.typeConversion(14)):
			self.output_6(p)
		elif(p == self.typeConversion(15)):
			self.output_7(p)
		elif(p == self.typeConversion(16)):
			self.output_8(p)
		elif(p == self.typeConversion(17)):
			self.output_9(p)
		elif(p == self.typeConversion(18)):
			self.output_10(p)
		elif(p == self.typeConversion(19)):
			self.output_11(p)
		elif(p == self.typeConversion(20)):
			self.output_12(p)
		elif(p == self.typeConversion(21)):
			self.output_13(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                            </script>
                            <pluginContent>
                                <keywords>
                                    <keyword>&quot;won&quot;</keyword>
                                    <keyword>&quot;lost&quot;</keyword>
                                    <keyword>11</keyword>
                                    <keyword>12</keyword>
                                    <keyword>13</keyword>
                                    <keyword>14</keyword>
                                    <keyword>15</keyword>
                                    <keyword>16</keyword>
                                    <keyword>17</keyword>
                                    <keyword>18</keyword>
                                    <keyword>19</keyword>
                                    <keyword>20</keyword>
                                    <keyword>21</keyword>
                                    <keyword></keyword>
                                </keywords>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                            <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                            <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                            <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                            <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                            <Output name="output_9" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="12" />
                            <Output name="output_10" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="13" />
                            <Output name="output_11" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="14" />
                            <Output name="output_12" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="15" />
                            <Output name="output_13" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="16" />
                        </Box>
                        <Box name="Wipe Forehead" id="3" localization="8" tooltip="This box makes the robot wipe his forehead." x="2060" y="1503">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="127">
                                <ActuatorList model="Nao">
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                        <Key frame="23" value="-13.4498" />
                                        <Key frame="41" value="-35.6864" />
                                        <Key frame="82" value="-6.50639" />
                                        <Key frame="99" value="-0.353971" />
                                        <Key frame="113" value="-1.58446" />
                                        <Key frame="127" value="-2.11181" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                        <Key frame="23" value="-1.49656" />
                                        <Key frame="41" value="24.5194" />
                                        <Key frame="82" value="17.6638" />
                                        <Key frame="99" value="6.41369" />
                                        <Key frame="113" value="-0.79343" />
                                        <Key frame="127" value="3.51326" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                        <Key frame="20" value="49.4806" />
                                        <Key frame="38" value="49.217" />
                                        <Key frame="78" value="50.8869" />
                                        <Key frame="95" value="53.26" />
                                        <Key frame="109" value="58.2698" />
                                        <Key frame="123" value="55.9846" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                        <Key frame="20" value="16.4333" />
                                        <Key frame="38" value="13.1814" />
                                        <Key frame="78" value="11.5993" />
                                        <Key frame="95" value="23.2889" />
                                        <Key frame="109" value="20.6522" />
                                        <Key frame="123" value="18.2791" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                        <Key frame="20" value="-54.8468" />
                                        <Key frame="38" value="-47.2003" />
                                        <Key frame="78" value="-57.7473" />
                                        <Key frame="95" value="-53.0011" />
                                        <Key frame="109" value="-71.2826" />
                                        <Key frame="123" value="-55.0226" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                        <Key frame="20" value="-49.6564" />
                                        <Key frame="38" value="-49.7443" />
                                        <Key frame="78" value="-47.1076" />
                                        <Key frame="95" value="-56.8635" />
                                        <Key frame="109" value="-55.3694" />
                                        <Key frame="123" value="-56.7757" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                        <Key frame="38" value="22.1463" />
                                        <Key frame="78" value="22.1463" />
                                        <Key frame="95" value="22.1463" />
                                        <Key frame="123" value="22.1463" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                        <Key frame="38" value="0.132026" />
                                        <Key frame="78" value="0.132026" />
                                        <Key frame="95" value="0.132026" />
                                        <Key frame="123" value="0.132026" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                        <Key frame="15" value="4.39699" />
                                        <Key frame="34" value="-34.0996" />
                                        <Key frame="74" value="-49.6564" />
                                        <Key frame="91" value="-35.1543" />
                                        <Key frame="105" value="33.4892" />
                                        <Key frame="119" value="50.5401" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                        <Key frame="15" value="-1.145" />
                                        <Key frame="34" value="-1.145" />
                                        <Key frame="74" value="-35.247" />
                                        <Key frame="91" value="-47.7276" />
                                        <Key frame="105" value="-12.8346" />
                                        <Key frame="119" value="-12.3072" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                        <Key frame="15" value="-7.38531" />
                                        <Key frame="34" value="-16.3503" />
                                        <Key frame="74" value="-8.96736" />
                                        <Key frame="91" value="43.2403" />
                                        <Key frame="105" value="67.1469" />
                                        <Key frame="119" value="38.8457" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                        <Key frame="15" value="73.392" />
                                        <Key frame="34" value="80.0718" />
                                        <Key frame="74" value="90.0914" />
                                        <Key frame="91" value="71.1068" />
                                        <Key frame="105" value="70.2279" />
                                        <Key frame="119" value="48.1671" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                        <Key frame="34" value="-3.34229" />
                                        <Key frame="74" value="-2.99072" />
                                        <Key frame="91" value="-3.86964" />
                                        <Key frame="119" value="-2.1997" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                        <Key frame="34" value="0.166571" />
                                        <Key frame="74" value="0.166208" />
                                        <Key frame="91" value="0.166571" />
                                        <Key frame="119" value="0.166208" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                </ActuatorList>
                            </Timeline>
                            <Resource name="Head" type="Lock" timeout="0" />
                            <Resource name="Arms" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Stand Up (1)" id="30" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="192" y="132">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Entry" id="5" localization="8" tooltip="Describes how the robot enters the scene and first interactions" x="123" y="18">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say" id="20" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="231" y="92">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " hey dealer man! I lost my lady today. deal some good cards for me, will ya? I want to win something, for a change...... ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <![CDATA[]]>
</arabic>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <greek>
                                                                            <![CDATA[]]>
</greek>
                                                                        <english>
                                                                            <![CDATA[hey dealer man! I lost my lady today. deal some good cards for me, will ya? I want to win something, for a change......]]>
</english>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <norwegian>
                                                                            <![CDATA[]]>
</norwegian>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <chinese>
                                                                            <![CDATA[]]>
</chinese>
                                                                        <language>6</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Choice" id="29" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="463" y="66">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                                                <Output name="output" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple).&#x0A;&#x0A;Advanced options (click the blue cross):  dedicated to pronunciation test of the choices.&#x0A;- Launch the test with the play button in front of each choice.&#x0A;- Calculate the confidence index of choices with the (1/2/3) button. Closer to 100%, higher should be the speech recognition." plugin="ui_choice_plugin" x="325" y="51">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v8.8
# @author Desktop Application team
# (c) 2011 Aldebaran Robotics

import os
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # PROXIES INITIALIZATION
        self.tts = ALProxy("ALTextToSpeech")
        self.ttsStop = ALProxy("ALTextToSpeech", True) #Create another proxy as wait is blocking if audioout is remote
        self.memory = ALProxy("ALMemory")
        try:
            self.asr = ALProxy("ALSpeechRecognition")
            self.ad = ALProxy("ALAudioDevice")
            self.player = ALProxy("ALAudioPlayer")
            self.dcm = ALProxy( "DCM" )
        except:
            self.logger.warning("cannot find ALSpeechRecognition, choice box will run in simulation mode")
            self.asr = None
            self.ad = None
            self.player = None
            self.dcm = None

        self.leds = ALProxy( "ALLeds" )
        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.aFrameNumbers = {"end" : 1,
                              "headDown" : 10,
                              "bodyTalk" : 20,
                              "reco" : 30,
                              "headCheck" : 40,
                              "helpTactileSensor" : 50,
                              "notUnderstood" : 70}
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.bBrainAnimPaused = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.
        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        self.bSeqStarted = False
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 6
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateEyesLight = True
        self.bActivateEarsLight = True
        self.bActivateBrainLight = True
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")
        self.BIND_PYTHON(self.getName(), "onWordRecognized")
        self.BIND_PYTHON(self.getName(), "onSpeechDetected")


# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        framemanager = ALProxy("ALFrameManager")
        filename = framemanager.getBehaviorPath(self.behaviorId) + self.tryGetParameter( "Sentences file", "/Aldebaran/choice_sentences.xml" )
        if not self.fileExists(filename):
            raise RuntimeError("File " + filename + " could not be found. Please update your Choice box with a newer one from Choregraphe")
        try:
            doc = self.getFileContents( filename )
            dom = xml.dom.minidom.parseString( doc )
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check the special characters and that the syntax is correct.\n" + str(e) )
        try:
            tag = "sentences"
            mainBlock = dom.getElementsByTagName( tag )[0]
            tag = "translation"
            aTranslations = mainBlock.getElementsByTagName( tag )
            self.aAllWords = {}
            self.aAllSentences = {}
            for sTranslation in aTranslations:
                sLanguage = sTranslation.getAttribute("language")
                tag = "speechReco"
                blockSpeechReco = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the speech recognition
                self.aAllWords[sLanguage] = {}
                aKinds = ["negative",
                          "positive",
                          "help",
                          "exit",
                          "repeat"]
                for sKind in aKinds:
                    tag = sKind
                    blockWordsForThisKind = blockSpeechReco.getElementsByTagName( sKind )[0]
                    self.aAllWords[sLanguage][sKind] = blockWordsForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the speech recognition
                tag = "tts"
                blockTTS = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the Text-To-Speech
                self.aAllSentences[sLanguage] = {}
                aKinds = ["confirmation",
                          "enumMarks",
                          "helpEnumChoices",
                          "helpEnumDefault",
                          "helpTactile",
                          "notUnderstood",
                          "noQuestion",
                          "notUnderstoodAnims"]
                for sKind in aKinds:
                    tag = sKind
                    blockSentencesForThisKind = blockTTS.getElementsByTagName( sKind )[0]
                    self.aAllSentences[sLanguage][sKind] = blockSentencesForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the Text-To-Speech
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check that the '" + tag + "' tag is defined and with the right format.\n" + str(e) )

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["sure", "no", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": ["ναί", "κανένα", ""], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "Norwegian": ["ja", "Nei", ""], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        if(self.asr != None):
            self.asr.setVisualExpression( False )
        language = self.tts.getLanguage()
        if(self.asr != None):
            self.asr.setLanguage( language )
        try:
            self.aAllWords[language]
            self.aAllSentences[language]
        except:
            raise Exception( "The current language is not supported by this Choice box. It is probably deprecated. Try to use the one supplied in Choregraphe library instead." )
        self.asNegativeWords = self.aAllWords[language]["negative"]
        self.asPositiveWords = self.aAllWords[language]["positive"]
        self.asHelpWords = self.aAllWords[language]["help"]
        self.asExitWords = self.aAllWords[language]["exit"]
        self.asRepeatWords = self.aAllWords[language]["repeat"]
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.beginTime = time.time()
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 6 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateEyesLight = self.tryGetParameter( "Activate eyes light", True )
        self.bActivateEarsLight = self.tryGetParameter( "Activate ears light", True )
        self.bActivateBrainLight = self.tryGetParameter( "Activate brain light", True )
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.aDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.aDefaultChoices.append( self.asHelpWords )
        if (self.bActivateDefaultChoiceRepeat):
            self.aDefaultChoices.append( self.asRepeatWords )
        if (self.bActivateDefaultChoiceExit):
            self.aDefaultChoices.append( self.asExitWords )
        if( question == None ):
            question = ""
        self.initQuestionAndChoices( question )
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, 0.1 )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        thread.start_new_thread( self.loopLedsBrainTwinkle, () )
        while( not self.bGoOut ):
            self.questionRecognitionReaction()
        if( self.bInTactileSensorMenu ):
            self.nCountNoReply = 0
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            self.loopLedsBrainTurn()
        else:
            self.bIsRunning = False

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = "English"
            if(self.asr != None):
                language =  self.asr.getLanguage()
            self.asNegativeWords = self.aAllWords[language]["negative"]
            self.asPositiveWords = self.aAllWords[language]["positive"]
            self.asHelpWords = self.aAllWords[language]["help"]
            self.asExitWords = self.aAllWords[language]["exit"]
            self.asRepeatWords = self.aAllWords[language]["repeat"]
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aChoiceIndexes.append( index )
                index += 1

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.ttsStop.stop(idtts)
            except:
                self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        self.ttsQuestionAndRecoInit()
        if( not self.bMustStop ):
            # stop movement animation
            if( self.nFrameNumber != self.aFrameNumbers["reco"] ):
                self.nFrameNumber = self.aFrameNumbers["reco"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            # start speech recognition
            self.logger.debug( "Speech recognition started." )
            self.memory.subscribeToEvent( "WordRecognized", self.getName(), "onWordRecognized" )
            self.bRecoIsWaitingForVoice = True
            self.memory.subscribeToEvent( "SpeechDetected", self.getName(), "onSpeechDetected" )
        # leds during the recognition
        self.loopLedsReco()
        # process the reco loop break
        self.processRecoInterruption()

    def ttsQuestionAndRecoInit(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        if( not self.bInConfirmation ):
            # launch TTS
            idTTS = -1
            if( self.sQuestion != ""):
                idTTS = self.tts.post.say( self.sQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(self.sQuestion) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            if(self.asr != None):
                self.asr.setLanguage( self.tts.getLanguage() )
            if( not self.bVocabularyLoaded ):
                aWordsRecognised = []
                for i in range( len( self.aChoices ) ):
                    if( self.aChoices[i] != [] ):
                        aWordsRecognised.extend( self.aChoices[i] )
                sWordsRecognised = "You can say: "
                if( len( aWordsRecognised ) > 1 ):
                    for i in range( len( aWordsRecognised ) - 1 ):
                        sWordsRecognised += "'" + aWordsRecognised[i] + "', "
                if( len( aWordsRecognised ) > 0 ):
                    sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
                sWordsRecognised += "."
                self.logger.debug( sWordsRecognised )
                if(self.asr != None):
                    self.asr.setVocabulary( aWordsRecognised, False )
                self.bVocabularyLoaded = True
        else:
            # launch TTS
            sentence = self.aAllSentences[self.tts.getLanguage()]["confirmation"][0]
            idTTS = -1
            sentenceToSay = sentence % self.sPreviousAnswer
            if( sentenceToSay != ""):
                idTTS = self.tts.post.say( sentenceToSay )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceToSay) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            aWordsRecognised = []
            aWordsRecognised.extend( self.asNegativeWords )
            aWordsRecognised.extend( self.asPositiveWords )
            sWordsRecognised = "You can say: "
            if( len( aWordsRecognised ) > 1 ):
                for i in range( len( aWordsRecognised ) - 1 ):
                    sWordsRecognised += "'" + aWordsRecognised[i] + "', "
            if( len( aWordsRecognised ) > 0 ):
                sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
            sWordsRecognised += "."
            self.logger.debug( sWordsRecognised )
            if(self.asr != None):
                self.asr.setVocabulary( aWordsRecognised, False )
            self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
                self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # leds noticing that the robot confirm its guessing
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                # reinitialize leds
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
        else:
            self.nCountNoReply = 0
            if( self.sRecoInterruption in [ "onStop" ] ):
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.aAllSentences[self.tts.getLanguage()]["noQuestion"][0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.tts.post.say( sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.tts.post.say( sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
                if( not self.bInTactileSensorMenu ):
                    # launch TTS movement animation
                    if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                        self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.tts.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onWordRecognized(self, pDataName, pValue, pMessage):
        "Handler for when a word is recognised by the speech recognition system."
        aState = pValue
        self.logger.debug( "The word '" + str(aState[0]) + "' has been recognised with a threshold of " + str(aState[1]) + "." )
        # interrupt loops:
            # - stop reco
            # - stop leds
            # - stop asking the question on and on
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        if( aState[0] != "" ):
            if( aState[1] >= self.rUnderstoodThreshold ):
                if( self.rUnderstoodThreshold <= self.arUnderstoodThreshold[1] - 0.02 ):
                    self.rUnderstoodThreshold += 0.02
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[1]
                if( self.bInConfirmation ):
                    if( aState[0] in self.asNegativeWords ):
                        thread.start_new_thread( self.ledsNegative, () )
                    else:
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                else:
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                self.reactionWordUnderstood( aState )
            else:
                if( self.rUnderstoodThreshold >= self.arUnderstoodThreshold[0] + 0.05 ):
                    self.rUnderstoodThreshold -= 0.05
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[0]
                aCurrentChoice = ""
                for choice in self.aChoices:
                    if( aCurrentChoice == "" ):
                        if( aState[0] in choice ):
                            aCurrentChoice = choice
                if( self.sPreviousAnswer in aCurrentChoice ): # if answer in the same choice as previously
                    # then ask confirmation
                    aState[1] = self.rConfirmationThreshold - 0.01
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    self.reactionWordUnderstood( aState )
                else:
                    # else not understood
                    if( self.bInConfirmation ):
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    else:
                        self.sPreviousAnswer = aState[0]
                        thread.start_new_thread( self.ledsNotUnderstood, () )
                    self.reactionNothingUnderstood()
        else:
            if( self.bInConfirmation ):
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
            else:
                thread.start_new_thread( self.ledsNotUnderstood, () )
            self.reactionNothingUnderstood()
        if( pMessage == "" ):
            self.sRecoInterruption = "wordRecognised"
        else:
            self.sRecoInterruption = pMessage

    def onSpeechDetected(self, pDataName, pValue, pMessage):
        "Handler for when something has been heard by the speech recognition system."
        aState = pValue
        if( aState == 1):
            if( self.bRecoIsWaitingForVoice ):
                # make eyes leds switch from an animation to an other
                self.bRecoIsHearingOrAnalysing = True
                self.bRecoIsWaitingForVoice = False
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word[0] in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word[0] in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word[0] in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word[0]
            if( word[1] >= self.rConfirmationThreshold ):
                if( self.rConfirmationThreshold <= self.arConfirmationThreshold[1] - 0.02 ):
                    self.rConfirmationThreshold += 0.02
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[1]
                if( self.sPreviousAnswer in self.asHelpWords ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
            else:
                if( self.rConfirmationThreshold >= self.arConfirmationThreshold[0] + 0.05 ):
                    self.rConfirmationThreshold -= 0.05
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[0]
                self.bInConfirmation = True

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.aAllSentences[self.tts.getLanguage()]["notUnderstood"][0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"]
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
                if( self.nFrameNumber != self.aFrameNumbers["notUnderstood"] + 10*index ):
                    self.nFrameNumber = self.aFrameNumbers["notUnderstood"] + 10*index
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumDefault = self.aAllSentences[self.tts.getLanguage()]["helpEnumDefault"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.aAllSentences[self.tts.getLanguage()]["helpTactile"]
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.tts.post.say( sentence + "\\Pau=300\\" )
            else:
                idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch TTS movement animation
            if( self.bInTactileSensorMenu ):
                if( self.nFrameNumber != self.aFrameNumbers["helpTactileSensor"] ):
                    self.nFrameNumber = self.aFrameNumbers["helpTactileSensor"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            else:
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.tts.post.say( sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                    # launch TTS movement animation
                    listPossibleFrames = range( len( self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"] ) )
                    for i in range(len(listPossibleFrames)):
                        listPossibleFrames[i] = listPossibleFrames[i] * 10 + self.aFrameNumbers["notUnderstood"]
                    if( ( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ) and not ( self.nFrameNumber in listPossibleFrames ) ):
                        try:
                            self.getTimeline().goTo(self.aFrameNumbers["bodyTalk"])
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.aFrameNumbers["bodyTalk"])
                            except:
                                pass
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.tts.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDS ---------------------------------------------------------------------------------------------------

    def setLeds(self, eyesLight, earsLight, brainLight):
        "Set all LEDS (eyes, ears and brain lights)."
        rDuration = 1
        if( self.bActivateEyesLight ):
            # set eyes leds
            self.leds.post.fadeRGB( "FaceLeds", eyesLight, rDuration )
        if( self.bActivateEarsLight ):
            # set ears leds
            self.leds.fadeRGB( "EarLeds", earsLight, rDuration )
        if( self.bActivateBrainLight ):
            # set brain leds light
            self.setLedsBrain( brainLight, 500 )

    def ledsUnderstood(self, bFlashEars, bFlashBrain):
        "Sequence of LEDS for eyes, ears and brain when the robot understood what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x00FF00, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x00FF00, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            if( self.bInTactileSensorMenu ):
                self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
            else:
                self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.1 )
        if( not self.bInTactileSensorMenu ):
            self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def ledsNotUnderstood(self):
        "Sequence of LEDS for eyes and ears when the robot did not understand what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.3 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.bBrainAnimPaused = False

    def ledsNegative(self):
        "Sequence of LEDS for eyes and ears when the robot understood 'no'."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.1 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def loopLedsReco(self):
        "LEDS (eyes and ears) process during the speech recognition."
        self.beginTime = time.time()
        if( self.bInConfirmation ):
            timerReco = self.beginTime + self.nTimeoutRecoConfirmation
        else:
            timerReco = self.beginTime + self.nTimeoutReco
        self.bHasAlreadyHearingEyes = False
        nEarLedsNextIndex = 0
        nEyesLed = -1
        while( self.bRecoIsWaitingForVoice or self.bRecoIsHearingOrAnalysing ):
            if( self.bMustStop ):
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass
                break
            if( self.bRecoIsWaitingForVoice ):
                if( timerReco < time.time() ):
                    try:
                        self.timeToReply(timerReco - self.beginTime)
                    except:
                        pass
                    self.sRecoInterruption = "timeout"
                    break
            nEarLedsNextIndex = self.ledsEarsTurnOneStep( nEarLedsNextIndex )
            nEyesLed += 1
            self.ledsEyesTurnOneStep( 0x0055FF, nEyesLed%8 )
            time.sleep( 0.2 )

    def ledsEarsTurnOneStep(self, nEarLedsNextIndex):
        "One step of ears LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEarsLight ):
            nNbrLedByEars = 10
            rTime = 0.7
            strTemplate = "Ears/Led/%s/%dDeg/Actuator/Value"
            nAngle = (360/nNbrLedByEars) * nEarLedsNextIndex
            # update index before sending movement in case of a fast/concurrent call of the function
            nEarLedsNextIndex -= 1 # more beautiful to turn in this way
            if( nEarLedsNextIndex < 0 ):
                nEarLedsNextIndex = nNbrLedByEars-1
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 0.0, rTime*1.2 )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 0.0, rTime*1.2 )
        return nEarLedsNextIndex

    def ledsEyesTurnOneStep(self, nColor, nLed):
        "One step of eyes LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEyesLight ):
            rTime = 0.7
            if( self.bRecoIsHearingOrAnalysing ):
                if( not self.bHasAlreadyHearingEyes ):
                    self.leds.fadeRGB( "FaceLeds", 0xF4FF22, 0.1 )
                    # start headcheck animation
                    if( self.nFrameNumber != self.aFrameNumbers["headCheck"] ):
                        self.nFrameNumber = self.aFrameNumbers["headCheck"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
                    self.bHasAlreadyHearingEyes = True
            elif( self.bRecoIsWaitingForVoice ):
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , nColor, rTime )
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , 0x000000, rTime*1.25 )

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x0055FF, rDuration )
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0. )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    # start the tactile sensor menu
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
                self.sRecoInterruption = "onTactileSensor"
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    # validate choice
                    thread.start_new_thread( self.ledsUnderstood, (False, True) )
                    if( self.aChoices[self.nIndexChoice][0] == self.asRepeatWords[0] ):
                        self.repeatWhenNoQuestion()
                        # launch TTS
                        idTTS = -1
                        if( self.sQuestion != ""):
                            idTTS = self.tts.post.say( self.sQuestion + "\\Pau=300\\" )
                            self.aIdsTTS.append( idTTS )
                            self.logger.debug( "Robot says: " + str(self.sQuestion) )
                        # wait for the end of the TTS
                        if( idTTS != -1 ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    else:
                        self.reactionWordUnderstood( [ self.aChoices[self.nIndexChoice][0], 1.0 ] )
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        if( self.aChoices[ self.nIndexChoice ][0] != "" ):
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
            idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch flash leds
            thread.start_new_thread( self.ledsChangeOnTactile, () )
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.tts.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        self.logger.debug( "Change detected on the front tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        self.logger.debug( "Change detected on the middle tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        self.logger.debug( "Change detected on the rear tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass

        self.bGoOut = True
        self.bInTactileSensorMenu = False
        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                        self.logger.debug( "Output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' stimulated with: " + str(outputName) + "." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )
        self.onUnload()
        # come back to an initial position and stop movement animation
        if( self.nFrameNumber != self.aFrameNumbers["end"] ):
            self.nFrameNumber = self.aFrameNumbers["end"]
            try:
                self.getTimeline().goTo(self.nFrameNumber)
            except: # if NAOqi < 1.14
                try:
                    self.gotoAndStop(self.nFrameNumber)
                except:
                    pass

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.bRecoIsWaitingForVoice = False
            self.bRecoIsHearingOrAnalysing = False
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.bExternChoices = False
        self.bInTactileSensorMenu = False
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <keyword>نعم</keyword>
                                                                            <keyword>لا</keyword>
                                                                            <keyword></keyword>
                                                                        </arabic>
                                                                        <brazilian>
                                                                            <keyword>sim</keyword>
                                                                            <keyword>não</keyword>
                                                                            <keyword></keyword>
                                                                        </brazilian>
                                                                        <chinese>
                                                                            <keyword>是</keyword>
                                                                            <keyword>不是</keyword>
                                                                            <keyword></keyword>
                                                                        </chinese>
                                                                        <czech>
                                                                            <keyword>ano</keyword>
                                                                            <keyword>ne</keyword>
                                                                            <keyword></keyword>
                                                                        </czech>
                                                                        <danish>
                                                                            <keyword>ja</keyword>
                                                                            <keyword>nej</keyword>
                                                                            <keyword></keyword>
                                                                        </danish>
                                                                        <dutch>
                                                                            <keyword>ja</keyword>
                                                                            <keyword>nee</keyword>
                                                                            <keyword></keyword>
                                                                        </dutch>
                                                                        <english>
                                                                            <keyword>sure</keyword>
                                                                            <keyword>no</keyword>
                                                                            <keyword></keyword>
                                                                        </english>
                                                                        <finnish>
                                                                            <keyword>kyllä</keyword>
                                                                            <keyword>ei</keyword>
                                                                            <keyword></keyword>
                                                                        </finnish>
                                                                        <french>
                                                                            <keyword>oui</keyword>
                                                                            <keyword>non</keyword>
                                                                            <keyword></keyword>
                                                                        </french>
                                                                        <german>
                                                                            <keyword>ja</keyword>
                                                                            <keyword>nein</keyword>
                                                                            <keyword></keyword>
                                                                        </german>
                                                                        <greek>
                                                                            <keyword>ναί</keyword>
                                                                            <keyword>κανένα</keyword>
                                                                            <keyword></keyword>
                                                                        </greek>
                                                                        <italian>
                                                                            <keyword>sì</keyword>
                                                                            <keyword>no</keyword>
                                                                            <keyword></keyword>
                                                                        </italian>
                                                                        <japanese>
                                                                            <keyword>はい</keyword>
                                                                            <keyword>いいえ</keyword>
                                                                            <keyword></keyword>
                                                                        </japanese>
                                                                        <korean>
                                                                            <keyword>예</keyword>
                                                                            <keyword>아니</keyword>
                                                                            <keyword></keyword>
                                                                        </korean>
                                                                        <norwegian>
                                                                            <keyword>ja</keyword>
                                                                            <keyword>Nei</keyword>
                                                                            <keyword></keyword>
                                                                        </norwegian>
                                                                        <polish>
                                                                            <keyword>tak</keyword>
                                                                            <keyword>nie</keyword>
                                                                            <keyword></keyword>
                                                                        </polish>
                                                                        <portuguese>
                                                                            <keyword>sim</keyword>
                                                                            <keyword>não</keyword>
                                                                            <keyword></keyword>
                                                                        </portuguese>
                                                                        <russian>
                                                                            <keyword>да</keyword>
                                                                            <keyword>нет</keyword>
                                                                            <keyword></keyword>
                                                                        </russian>
                                                                        <spanish>
                                                                            <keyword>si</keyword>
                                                                            <keyword>no</keyword>
                                                                            <keyword></keyword>
                                                                        </spanish>
                                                                        <swedish>
                                                                            <keyword>ja</keyword>
                                                                            <keyword>ingen</keyword>
                                                                            <keyword></keyword>
                                                                        </swedish>
                                                                        <turkish>
                                                                            <keyword>evet</keyword>
                                                                            <keyword>hayır</keyword>
                                                                            <keyword></keyword>
                                                                        </turkish>
                                                                        <language>english</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                                                    <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                                                    <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                                    <Parameter name="Activate head" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Head motion activation during the recognition and while the robot is&#x0A;talking." id="8" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Arms motion activation while the robot is talking." id="9" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Legs motion activation while the robot is talking." id="10" />
                                                                    <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="11" />
                                                                    <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="12" />
                                                                    <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="13" />
                                                                    <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="14" />
                                                                    <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="15" />
                                                                    <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="16" />
                                                                    <Parameter name="Activate ears light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate ears light animation (turn, flash, etc...)." id="17" />
                                                                    <Parameter name="Activate eyes light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate eyes light animation (turn, flash, etc...)." id="18" />
                                                                    <Parameter name="Activate brain light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate brain light animation (turn, flash, etc...)." id="19" />
                                                                    <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="20" />
                                                                    <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="21" />
                                                                    <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="22" />
                                                                    <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="23" />
                                                                    <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="24" />
                                                                    <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="25" />
                                                                    <Parameter name="Sentences file" inherits_from_parent="0" content_type="4" value="/Aldebaran/choice_sentences.xml" default_value="/Aldebaran/choice_sentences.xml" tooltip="File containing all necessary sentences in each supported language." id="26" />
                                                                    <Timeline enable="1" fps="1" start_frame="1" end_frame="-1" size="-1">
                                                                        <BehaviorLayer name="arms_">
                                                                            <BehaviorKeyframe name="end" index="1" bitmap="media/images/box/movement/move_arm.png">
                                                                                <Diagram>
                                                                                    <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="134" y="31">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="27">
                                                                                        <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="-31.8144" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="-63.9876" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="0.186207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="89.5593" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="6.23791" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="-9.67049" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="33.0497" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="71.1899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="0.167662" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="89.1246" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="-3.95753" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="-16.3503" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="429" y="25">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="armsEnd" index="10" bitmap="media/images/box/movement/move_arm.png">
                                                                                <Diagram>
                                                                                    <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="134" y="31">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="27">
                                                                                        <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="-31.8144" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="-63.9876" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="0.186207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="89.5593" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="6.23791" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="27" value="-9.67049" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="33.0497" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="71.1899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="0.167662" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="89.1246" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="-3.95753" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="-16.3503" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="armsBodyTalk" index="20" bitmap="media/images/box/movement/move_arm.png">
                                                                                <Diagram>
                                                                                    <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="173" y="31">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="RandomIntMod" id="2" localization="8" tooltip="Generate a random number between 0 and a max number." x="478" y="28">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(0, len(self.aShuffled)), i)
            func = getattr( self, "output_" + str(self.aShuffled[self.nIndex]) )
            func()
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 0, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            func = getattr( self, "output_" + str(nVal) )
            func()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                                        <Output name="output_0" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output_3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output_4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output_5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="output_6" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="output_7" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                        <Output name="output_8" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="output_9" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="output_10" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                        <Output name="output_11" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                                        <Parameter name="max" inherits_from_parent="0" content_type="1" value="12" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="15" />
                                                                                        <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="16" />
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk1" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1005" y="27">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="28">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-71.6294" />
                                                                                                    <Key frame="28" value="-80.2427" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-108.197" />
                                                                                                    <Key frame="28" value="-53.7921" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="0.181844" />
                                                                                                    <Key frame="28" value="0.890909" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="66.9711" />
                                                                                                    <Key frame="28" value="42.0977" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="8.78677" />
                                                                                                    <Key frame="28" value="1.75543" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="2.98591" />
                                                                                                    <Key frame="28" value="-11" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="67.679" />
                                                                                                    <Key frame="27" value="86.8394" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="106.61" />
                                                                                                    <Key frame="27" value="62.6644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.161844" />
                                                                                                    <Key frame="27" value="0.818182" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="68.6458" />
                                                                                                    <Key frame="27" value="48.4307" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-7.38531" />
                                                                                                    <Key frame="27" value="-4.92434" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-14.8561" />
                                                                                                    <Key frame="27" value="9" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk3" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1007" y="220">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="28">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-65.4769" />
                                                                                                    <Key frame="28" value="-57.2151" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-36.038" />
                                                                                                    <Key frame="28" value="-46.9366" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="28" value="0.345455" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="58.5335" />
                                                                                                    <Key frame="28" value="77.9576" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="9.57779" />
                                                                                                    <Key frame="28" value="2.72224" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="28" value="-14" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="89.5017" />
                                                                                                    <Key frame="25" value="83.2359" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="24.6952" />
                                                                                                    <Key frame="25" value="85.4284" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="0.345455" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="47.9913" />
                                                                                                    <Key frame="25" value="44.2998" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="13" value="-18.2839" />
                                                                                                    <Key frame="25" value="-3.43018" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="51" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk2" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1007" y="123">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="-78.7486" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="-82.5327" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="0.654545" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="40.1641" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="5.09532" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="9" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="74.6225" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="100.985" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="0.645455" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="73.7436" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-6.68218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="43" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="StandUp" id="6" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="1009" y="318">
                                                                                        <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="48">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="-31.5507" />
                                                                                                    <Key frame="48" value="-32.2539" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="-64.5149" />
                                                                                                    <Key frame="48" value="-56.6926" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="0.183662" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="89.1198" />
                                                                                                    <Key frame="48" value="82.2643" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="6.67737" />
                                                                                                    <Key frame="48" value="1.22808" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="23" value="5.79845" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="33.577" />
                                                                                                    <Key frame="45" value="45.1787" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="70.9262" />
                                                                                                    <Key frame="45" value="59.3245" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="0.162208" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="88.6852" />
                                                                                                    <Key frame="45" value="86.8394" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="-3.07861" />
                                                                                                    <Key frame="45" value="-0.705538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="-16.526" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk4" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1011" y="417">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-76.1997" />
                                                                                                    <Key frame="31" value="-67.3227" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="6.67737" />
                                                                                                    <Key frame="31" value="-90.7067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="0.709091" />
                                                                                                    <Key frame="31" value="0.334571" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="3.07381" />
                                                                                                    <Key frame="31" value="2.54646" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="9.57779" />
                                                                                                    <Key frame="31" value="7.20472" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-25" />
                                                                                                    <Key frame="31" value="-10.6373" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="72.0736" />
                                                                                                    <Key frame="27" value="70.6674" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="73.0356" />
                                                                                                    <Key frame="27" value="51.9416" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.254545" />
                                                                                                    <Key frame="27" value="0.33748" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="92.904" />
                                                                                                    <Key frame="27" value="86.5758" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-9.31893" />
                                                                                                    <Key frame="27" value="-6.24272" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="62" />
                                                                                                    <Key frame="27" value="52.6447" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk5" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1011" y="516">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="36">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-88.6803" />
                                                                                                    <Key frame="36" value="-89.1198" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-54.4953" />
                                                                                                    <Key frame="36" value="-33.6649" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="36" value="0.454545" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="52.2053" />
                                                                                                    <Key frame="36" value="46.1408" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="16.2576" />
                                                                                                    <Key frame="36" value="6.15002" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="36" value="-45" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="88.9488" />
                                                                                                    <Key frame="33" value="88.773" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="53.1721" />
                                                                                                    <Key frame="33" value="78.9244" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="33" value="0.418182" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="28.2156" />
                                                                                                    <Key frame="33" value="40.1689" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="-1.0571" />
                                                                                                    <Key frame="33" value="-0.881321" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="33" value="-17" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk5" id="9" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1012" y="614">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="34">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-75.8482" />
                                                                                                    <Key frame="34" value="-76.0239" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-54.0558" />
                                                                                                    <Key frame="34" value="-66.9759" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="0.507273" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="74.9692" />
                                                                                                    <Key frame="34" value="69.2563" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="3.42537" />
                                                                                                    <Key frame="34" value="5.62267" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="-37" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="54.1437" />
                                                                                                    <Key frame="31" value="57.5715" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="42.0098" />
                                                                                                    <Key frame="31" value="67.5863" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="0.592727" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="72.8646" />
                                                                                                    <Key frame="31" value="72.9525" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-3.95753" />
                                                                                                    <Key frame="31" value="-3.43018" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="46.3" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk6" id="10" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1012" y="713">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="34">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-52.7326" />
                                                                                                    <Key frame="34" value="-60.4671" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-26.3699" />
                                                                                                    <Key frame="34" value="-108.988" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="0.727273" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="62.8402" />
                                                                                                    <Key frame="34" value="59.1487" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="1.14019" />
                                                                                                    <Key frame="34" value="6.94104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="34" value="-30" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="44.0362" />
                                                                                                    <Key frame="31" value="75.3256" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="118.564" />
                                                                                                    <Key frame="31" value="65.8285" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="0.509091" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="87.6305" />
                                                                                                    <Key frame="31" value="70.8431" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-1.40867" />
                                                                                                    <Key frame="31" value="-0.498473" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="25" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk7" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1014" y="813">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="46">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="-31.9902" />
                                                                                                    <Key frame="46" value="-28.5624" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="-57.4836" />
                                                                                                    <Key frame="46" value="-65.5696" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="46" value="0.163636" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="81.4732" />
                                                                                                    <Key frame="46" value="86.6588" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="3.24959" />
                                                                                                    <Key frame="46" value="9.75358" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="46" value="-11" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="39.9053" />
                                                                                                    <Key frame="43" value="28.1278" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="69.7836" />
                                                                                                    <Key frame="43" value="87.1862" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="43" value="0.2" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="87.5426" />
                                                                                                    <Key frame="43" value="88.1578" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-1.23289" />
                                                                                                    <Key frame="43" value="-2.1997" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="43" value="-5.4" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk8" id="12" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1015" y="912">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-43.0645" />
                                                                                                    <Key frame="40" value="-58.0061" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-106.615" />
                                                                                                    <Key frame="40" value="-38.499" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="40" value="0.745455" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="79.0123" />
                                                                                                    <Key frame="40" value="68.641" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="1.22808" />
                                                                                                    <Key frame="40" value="5.88634" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="40" value="-39" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="36.9169" />
                                                                                                    <Key frame="37" value="64.0755" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="110.302" />
                                                                                                    <Key frame="37" value="56.6878" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="37" value="0.818182" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="79.8081" />
                                                                                                    <Key frame="37" value="75.853" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="-3.16651" />
                                                                                                    <Key frame="37" value="-0.617646" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="37" value="12" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk9" id="13" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1016" y="1011">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="-43.504" />
                                                                                                    <Key frame="40" value="-24.871" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="-37.3564" />
                                                                                                    <Key frame="40" value="-79.8081" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="40" value="0.381818" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="71.8051" />
                                                                                                    <Key frame="40" value="89.5593" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="20" value="1.49176" />
                                                                                                    <Key frame="40" value="12.7419" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="40" value="-36" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="72.3373" />
                                                                                                    <Key frame="37" value="45.7061" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="61.346" />
                                                                                                    <Key frame="37" value="95.448" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="37" value="0.363636" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="88.8609" />
                                                                                                    <Key frame="37" value="100.375" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-1.93602" />
                                                                                                    <Key frame="37" value="-6.50639" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="37" value="10" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalk11" id="14" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1020" y="1115">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="43">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-72.0688" />
                                                                                                    <Key frame="24" value="-57.8303" />
                                                                                                    <Key frame="33" value="-65.7406" />
                                                                                                    <Key frame="43" value="-54.4905" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-11.9557" />
                                                                                                    <Key frame="24" value="-41.1357" />
                                                                                                    <Key frame="33" value="-47.9913" />
                                                                                                    <Key frame="43" value="-78.3139" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="0.176364" />
                                                                                                    <Key frame="43" value="0.507273" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="39.9883" />
                                                                                                    <Key frame="24" value="52.0295" />
                                                                                                    <Key frame="33" value="53.0842" />
                                                                                                    <Key frame="43" value="57.7425" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="9.05044" />
                                                                                                    <Key frame="24" value="9.66569" />
                                                                                                    <Key frame="33" value="1.31597" />
                                                                                                    <Key frame="43" value="4.48007" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="-2" />
                                                                                                    <Key frame="33" value="-71" />
                                                                                                    <Key frame="43" value="-53" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="32.6981" />
                                                                                                    <Key frame="41" value="28.4793" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="77.1665" />
                                                                                                    <Key frame="41" value="93.3386" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="86.2242" />
                                                                                                    <Key frame="41" value="91.3219" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="-0.617646" />
                                                                                                    <Key frame="41" value="-8.79158" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="8" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="9" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="2" indexofoutput="10" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="11" />
                                                                                    <Link inputowner="12" indexofinput="2" outputowner="2" indexofoutput="12" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="2" indexofoutput="13" />
                                                                                    <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="14" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="--EMPTY--" index="30">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="armsTactileSensorExplanation" index="50">
                                                                                <Diagram>
                                                                                    <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="76" y="24">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_helpTactilExplain_arms" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="226" y="22">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="250" size="250">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-25.7499" />
                                                                                                    <Key frame="40" value="-22.8494" />
                                                                                                    <Key frame="67" value="-22.5858" />
                                                                                                    <Key frame="92" value="-29.4413" />
                                                                                                    <Key frame="111" value="-71.5415" />
                                                                                                    <Key frame="125" value="-57.303" />
                                                                                                    <Key frame="142" value="-85.9557" />
                                                                                                    <Key frame="160" value="-56.512" />
                                                                                                    <Key frame="188" value="-48.5138" />
                                                                                                    <Key frame="216" value="-64.598" />
                                                                                                    <Key frame="233" value="-44.3829" />
                                                                                                    <Key frame="247" value="-22.7616" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-61.7903" />
                                                                                                    <Key frame="40" value="-62.2297" />
                                                                                                    <Key frame="67" value="-61.7903" />
                                                                                                    <Key frame="92" value="-75.4135" />
                                                                                                    <Key frame="111" value="-54.4953" />
                                                                                                    <Key frame="125" value="-59.3293" />
                                                                                                    <Key frame="142" value="-89.2125" />
                                                                                                    <Key frame="160" value="-53.9679" />
                                                                                                    <Key frame="188" value="-58.0109" />
                                                                                                    <Key frame="216" value="-49.046" />
                                                                                                    <Key frame="233" value="-77.5229" />
                                                                                                    <Key frame="247" value="-73.3041" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="40" value="0.108026" />
                                                                                                    <Key frame="92" value="0.109117" />
                                                                                                    <Key frame="111" value="0.109117" />
                                                                                                    <Key frame="125" value="0.436364" />
                                                                                                    <Key frame="188" value="0.114208" />
                                                                                                    <Key frame="216" value="0.110572" />
                                                                                                    <Key frame="233" value="0.390909" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="82.3521" />
                                                                                                    <Key frame="40" value="84.5494" />
                                                                                                    <Key frame="67" value="83.1432" />
                                                                                                    <Key frame="92" value="86.9225" />
                                                                                                    <Key frame="111" value="67.5863" />
                                                                                                    <Key frame="125" value="38.4063" />
                                                                                                    <Key frame="142" value="64.3343" />
                                                                                                    <Key frame="160" value="76.1118" />
                                                                                                    <Key frame="188" value="84.1979" />
                                                                                                    <Key frame="216" value="54.4905" />
                                                                                                    <Key frame="233" value="57.4788" />
                                                                                                    <Key frame="247" value="84.901" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="1.40386" />
                                                                                                    <Key frame="40" value="5.97423" />
                                                                                                    <Key frame="67" value="2.19489" />
                                                                                                    <Key frame="92" value="4.65586" />
                                                                                                    <Key frame="111" value="1.49176" />
                                                                                                    <Key frame="125" value="1.0523" />
                                                                                                    <Key frame="142" value="1.0523" />
                                                                                                    <Key frame="160" value="2.107" />
                                                                                                    <Key frame="188" value="1.14019" />
                                                                                                    <Key frame="216" value="1.0523" />
                                                                                                    <Key frame="233" value="1.0523" />
                                                                                                    <Key frame="247" value="1.14019" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="40" value="-7.20953" />
                                                                                                    <Key frame="92" value="-11.692" />
                                                                                                    <Key frame="111" value="-65" />
                                                                                                    <Key frame="125" value="-54" />
                                                                                                    <Key frame="188" value="-5.89115" />
                                                                                                    <Key frame="216" value="-7.82477" />
                                                                                                    <Key frame="233" value="-46" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="56.9562" />
                                                                                                    <Key frame="36" value="89.5017" />
                                                                                                    <Key frame="43" value="89.5017" />
                                                                                                    <Key frame="53" value="62.845" />
                                                                                                    <Key frame="63" value="75.853" />
                                                                                                    <Key frame="72" value="75.9409" />
                                                                                                    <Key frame="81" value="56" />
                                                                                                    <Key frame="88" value="69.6126" />
                                                                                                    <Key frame="107" value="88.9488" />
                                                                                                    <Key frame="121" value="61.0872" />
                                                                                                    <Key frame="138" value="89.0367" />
                                                                                                    <Key frame="150" value="82.7085" />
                                                                                                    <Key frame="166" value="54.0558" />
                                                                                                    <Key frame="184" value="77.8745" />
                                                                                                    <Key frame="196" value="78.6655" />
                                                                                                    <Key frame="212" value="75.4135" />
                                                                                                    <Key frame="229" value="73" />
                                                                                                    <Key frame="243" value="37.6201" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="99.6668" />
                                                                                                    <Key frame="36" value="29.7929" />
                                                                                                    <Key frame="43" value="17.0486" />
                                                                                                    <Key frame="53" value="21.3553" />
                                                                                                    <Key frame="63" value="3.51326" />
                                                                                                    <Key frame="72" value="-2.99072" />
                                                                                                    <Key frame="88" value="70.3989" />
                                                                                                    <Key frame="107" value="46.9318" />
                                                                                                    <Key frame="121" value="65.6527" />
                                                                                                    <Key frame="138" value="47.6349" />
                                                                                                    <Key frame="150" value="42.4493" />
                                                                                                    <Key frame="166" value="82.0885" />
                                                                                                    <Key frame="184" value="43.6798" />
                                                                                                    <Key frame="196" value="32.3418" />
                                                                                                    <Key frame="212" value="61.9613" />
                                                                                                    <Key frame="229" value="76.1118" />
                                                                                                    <Key frame="243" value="62.4886" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="36" value="0.527273" />
                                                                                                    <Key frame="43" value="0.507662" />
                                                                                                    <Key frame="63" value="0.545455" />
                                                                                                    <Key frame="88" value="0.522207" />
                                                                                                    <Key frame="121" value="0.272727" />
                                                                                                    <Key frame="150" value="0.272727" />
                                                                                                    <Key frame="184" value="0.690909" />
                                                                                                    <Key frame="212" value="0.509091" />
                                                                                                    <Key frame="229" value="0.511662" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="37.6201" />
                                                                                                    <Key frame="36" value="-35.0664" />
                                                                                                    <Key frame="43" value="-43.0645" />
                                                                                                    <Key frame="53" value="-58.4456" />
                                                                                                    <Key frame="63" value="-79.7154" />
                                                                                                    <Key frame="72" value="-81.3853" />
                                                                                                    <Key frame="88" value="-15.4665" />
                                                                                                    <Key frame="107" value="45.794" />
                                                                                                    <Key frame="121" value="53.4406" />
                                                                                                    <Key frame="138" value="50.3644" />
                                                                                                    <Key frame="150" value="64.7786" />
                                                                                                    <Key frame="166" value="0.441863" />
                                                                                                    <Key frame="184" value="-32.0781" />
                                                                                                    <Key frame="196" value="-40.5157" />
                                                                                                    <Key frame="212" value="-24.871" />
                                                                                                    <Key frame="229" value="58.4504" />
                                                                                                    <Key frame="243" value="87.3668" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-2.63916" />
                                                                                                    <Key frame="36" value="-40.1689" />
                                                                                                    <Key frame="43" value="-43.5088" />
                                                                                                    <Key frame="53" value="-35.5107" />
                                                                                                    <Key frame="63" value="-28.6551" />
                                                                                                    <Key frame="72" value="-28.6551" />
                                                                                                    <Key frame="88" value="-5.80326" />
                                                                                                    <Key frame="107" value="-0.705538" />
                                                                                                    <Key frame="121" value="-0.529755" />
                                                                                                    <Key frame="138" value="-0.498473" />
                                                                                                    <Key frame="150" value="-1.76024" />
                                                                                                    <Key frame="166" value="-19.2507" />
                                                                                                    <Key frame="184" value="-21.2722" />
                                                                                                    <Key frame="196" value="-26.4578" />
                                                                                                    <Key frame="212" value="-25.1394" />
                                                                                                    <Key frame="229" value="-12.1315" />
                                                                                                    <Key frame="243" value="-2.11181" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="36" value="52" />
                                                                                                    <Key frame="43" value="50.6232" />
                                                                                                    <Key frame="63" value="71" />
                                                                                                    <Key frame="88" value="70.1352" />
                                                                                                    <Key frame="121" value="71.8051" />
                                                                                                    <Key frame="150" value="59" />
                                                                                                    <Key frame="184" value="54" />
                                                                                                    <Key frame="212" value="61" />
                                                                                                    <Key frame="229" value="61.5218" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="367" y="19">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="10" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="armsNotUnderstood0" index="70">
                                                                                <Diagram>
                                                                                    <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="129" y="39">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris2_arms" id="2" localization="8" tooltip="Y a trop de bruit ici!" x="299" y="53">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="58" size="58">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-48.0744" />
                                                                                                    <Key frame="33" value="-71" />
                                                                                                    <Key frame="41" value="-78" />
                                                                                                    <Key frame="54" value="-37.791" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-27.2488" />
                                                                                                    <Key frame="33" value="-109.515" />
                                                                                                    <Key frame="41" value="-77" />
                                                                                                    <Key frame="54" value="-86" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="0.305455" />
                                                                                                    <Key frame="33" value="0.690909" />
                                                                                                    <Key frame="54" value="0.013481" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="67.1469" />
                                                                                                    <Key frame="33" value="54.3147" />
                                                                                                    <Key frame="54" value="98.2605" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="1.14019" />
                                                                                                    <Key frame="33" value="17" />
                                                                                                    <Key frame="54" value="5.53477" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="19" value="-2.11181" />
                                                                                                    <Key frame="33" value="-57.1" />
                                                                                                    <Key frame="54" value="-4.3091" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="88.4215" />
                                                                                                    <Key frame="29" value="69.8763" />
                                                                                                    <Key frame="37" value="76" />
                                                                                                    <Key frame="50" value="42.1904" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="37.3516" />
                                                                                                    <Key frame="29" value="117.685" />
                                                                                                    <Key frame="37" value="81" />
                                                                                                    <Key frame="50" value="61" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="0.325455" />
                                                                                                    <Key frame="29" value="0.663636" />
                                                                                                    <Key frame="50" value="0.0211173" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="50.4523" />
                                                                                                    <Key frame="29" value="47.1124" />
                                                                                                    <Key frame="50" value="89.9156" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="-0.498473" />
                                                                                                    <Key frame="29" value="-17" />
                                                                                                    <Key frame="50" value="-9.40682" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="15" value="1.57965" />
                                                                                                    <Key frame="29" value="26" />
                                                                                                    <Key frame="50" value="2.63435" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="444" y="51">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="armsNotUnderstood1" index="80">
                                                                                <Diagram>
                                                                                    <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="153" y="58">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris11_arms" id="2" localization="8" tooltip="Essaye de me parler plus clairement." x="316" y="55">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="67" size="67">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="-38.2305" />
                                                                                                    <Key frame="32" value="-84.4615" />
                                                                                                    <Key frame="46" value="-81.2096" />
                                                                                                    <Key frame="64" value="-28.5624" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="-109.076" />
                                                                                                    <Key frame="32" value="-46.0577" />
                                                                                                    <Key frame="46" value="-101.957" />
                                                                                                    <Key frame="64" value="-68.1185" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="0.125481" />
                                                                                                    <Key frame="32" value="0.125481" />
                                                                                                    <Key frame="46" value="0.125481" />
                                                                                                    <Key frame="64" value="0.125481" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="85.1647" />
                                                                                                    <Key frame="32" value="66.3558" />
                                                                                                    <Key frame="46" value="62.6644" />
                                                                                                    <Key frame="64" value="81.9127" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="13.2692" />
                                                                                                    <Key frame="32" value="7.99574" />
                                                                                                    <Key frame="46" value="5.62267" />
                                                                                                    <Key frame="64" value="0.498473" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="-2.72705" />
                                                                                                    <Key frame="32" value="-1.67235" />
                                                                                                    <Key frame="46" value="-2.90283" />
                                                                                                    <Key frame="64" value="-0.79343" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="81.0386" />
                                                                                                    <Key frame="28" value="57.3078" />
                                                                                                    <Key frame="42" value="80.5991" />
                                                                                                    <Key frame="60" value="29.8856" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="43.7677" />
                                                                                                    <Key frame="28" value="51.1506" />
                                                                                                    <Key frame="42" value="115.312" />
                                                                                                    <Key frame="60" value="70.3989" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.0556627" />
                                                                                                    <Key frame="28" value="0.0556627" />
                                                                                                    <Key frame="42" value="0.0556627" />
                                                                                                    <Key frame="60" value="0.0560264" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="77.1713" />
                                                                                                    <Key frame="28" value="29.3582" />
                                                                                                    <Key frame="42" value="44.6514" />
                                                                                                    <Key frame="60" value="85.0816" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-10.7252" />
                                                                                                    <Key frame="28" value="-0.498473" />
                                                                                                    <Key frame="42" value="-5.53958" />
                                                                                                    <Key frame="60" value="-2.11181" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-11.4283" />
                                                                                                    <Key frame="28" value="-9.49471" />
                                                                                                    <Key frame="42" value="-7.91266" />
                                                                                                    <Key frame="60" value="-7.64898" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="470" y="59">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="armsNotUnderstood2" index="90">
                                                                                <Diagram>
                                                                                    <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="157" y="56">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris15_arms" id="2" localization="8" tooltip="Je t&apos;entends pas bien." x="290" y="54">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="52" size="52">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="-31.3749" />
                                                                                                    <Key frame="33" value="-31.1992" />
                                                                                                    <Key frame="48" value="-30.6718" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="-80.0718" />
                                                                                                    <Key frame="33" value="-78.5776" />
                                                                                                    <Key frame="48" value="-67.3275" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="0.125844" />
                                                                                                    <Key frame="33" value="0.125844" />
                                                                                                    <Key frame="48" value="0.125844" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="90.9655" />
                                                                                                    <Key frame="33" value="85.8678" />
                                                                                                    <Key frame="48" value="87.0983" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="4.91953" />
                                                                                                    <Key frame="33" value="5.09532" />
                                                                                                    <Key frame="48" value="2.98591" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="18" value="0.788621" />
                                                                                                    <Key frame="33" value="0.876513" />
                                                                                                    <Key frame="48" value="1.49176" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="64.6028" />
                                                                                                    <Key frame="29" value="25.1394" />
                                                                                                    <Key frame="44" value="27.5125" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="17.9275" />
                                                                                                    <Key frame="29" value="61.2581" />
                                                                                                    <Key frame="44" value="54.9299" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.272727" />
                                                                                                    <Key frame="29" value="0.745455" />
                                                                                                    <Key frame="44" value="0.26" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="57.2199" />
                                                                                                    <Key frame="29" value="71.4584" />
                                                                                                    <Key frame="44" value="81.6538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-1.67235" />
                                                                                                    <Key frame="29" value="-17.2292" />
                                                                                                    <Key frame="44" value="-2.55126" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-5.18802" />
                                                                                                    <Key frame="29" value="-33" />
                                                                                                    <Key frame="44" value="-5.10012" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="447" y="60">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <BehaviorLayer name="legs_">
                                                                            <BehaviorKeyframe name="end" index="1" bitmap="media/images/box/movement/move_leg.png">
                                                                                <Diagram>
                                                                                    <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="129" y="50">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="45">
                                                                                        <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="4.83164" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-8.96255" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="19.6902" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="12.1315" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-19.6853" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-5.10012" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="2.46337" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="5.53958" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="21.9705" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-4.39218" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="424" y="44">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="legsEnd" index="10" bitmap="media/images/box/movement/move_leg.png">
                                                                                <Diagram>
                                                                                    <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="129" y="50">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="45">
                                                                                        <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="4.83164" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-8.96255" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="19.6902" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="12.1315" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-19.6853" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-5.10012" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="2.46337" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="5.53958" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="21.9705" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="25" value="-4.39218" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="legsBodyTalk" index="20" bitmap="media/images/box/movement/move_leg.png">
                                                                                <Diagram>
                                                                                    <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="127" y="51">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p=self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="RandomIntMod" id="2" localization="8" tooltip="Generate a random number between 0 and a max number." x="424" y="74">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(0, len(self.aShuffled)), i)
            func = getattr( self, "output_" + str(self.aShuffled[self.nIndex]) )
            func()
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 0, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            func = getattr( self, "output_" + str(nVal) )
            func()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                                        <Output name="output_0" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output_3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output_4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output_5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Parameter name="max" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="9" />
                                                                                        <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="10" />
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalkLegs2" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="782" y="170">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="4.66067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-2.72705" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="15.3786" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="1.14019" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-16.3455" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-4.48007" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.2711" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="13.0935" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="14.6803" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-16.9655" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-5.18802" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalkLegs1" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="782" y="74">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.2711" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-13.0935" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="14.6803" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="16.9655" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-16.3455" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-5.18802" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="4.66067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="2.72705" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="15.3786" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-1.14019" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-4.48007" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalkLegs4" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="784" y="365">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="7.55628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-8.78677" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="4.39699" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="9.84628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-21.5311" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="1.14019" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.18802" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.45169" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="3.1617" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-5.44688" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.10012" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalkLegs3" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="784" y="268">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.35899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-9.31412" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="11.8678" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="10.6373" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-16.6091" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-4.13332" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="4.66067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="7.03374" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="13.5329" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-7.3805" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-4.48007" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalkLegs5" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="785" y="463">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-5.18802" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-5.97423" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="13.0983" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="9.23104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-20.9158" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="12.4782" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-1.66754" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="13.9724" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-7.90785" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="8.35212" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_bodytalkLegs6" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="785" y="560">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="0.70073" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-4.2164" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="2.11181" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="6.59428" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-22.8494" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="13.2692" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="5.62747" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="4.3091" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="13.6208" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-4.65586" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="75" value="-2.28278" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="8" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="--EMPTY--" index="30">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="legsTactileSensorExplanation" index="50">
                                                                                <Diagram>
                                                                                    <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="90" y="20">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_helpTactilExplain_legs" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="245" y="15">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="250" size="250">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="7.81996" />
                                                                                                    <Key frame="90" value="9.40201" />
                                                                                                    <Key frame="123" value="4.48007" />
                                                                                                    <Key frame="152" value="5.00742" />
                                                                                                    <Key frame="186" value="9.31412" />
                                                                                                    <Key frame="214" value="3.51326" />
                                                                                                    <Key frame="231" value="5.2711" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="-1.31597" />
                                                                                                    <Key frame="90" value="-0.876513" />
                                                                                                    <Key frame="123" value="-3.86483" />
                                                                                                    <Key frame="152" value="-6.06212" />
                                                                                                    <Key frame="186" value="-3.86483" />
                                                                                                    <Key frame="214" value="-6.50158" />
                                                                                                    <Key frame="231" value="-7.64418" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="15.4713" />
                                                                                                    <Key frame="90" value="13.5377" />
                                                                                                    <Key frame="123" value="18.3718" />
                                                                                                    <Key frame="152" value="17.1413" />
                                                                                                    <Key frame="186" value="9.05525" />
                                                                                                    <Key frame="214" value="18.8991" />
                                                                                                    <Key frame="231" value="18.1081" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="1.93602" />
                                                                                                    <Key frame="90" value="1.67235" />
                                                                                                    <Key frame="123" value="4.83645" />
                                                                                                    <Key frame="152" value="7.82477" />
                                                                                                    <Key frame="186" value="3.51807" />
                                                                                                    <Key frame="214" value="8.61579" />
                                                                                                    <Key frame="231" value="10.4615" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="-18.5428" />
                                                                                                    <Key frame="90" value="-21.0037" />
                                                                                                    <Key frame="123" value="-21.1795" />
                                                                                                    <Key frame="152" value="-21.1795" />
                                                                                                    <Key frame="186" value="-23.201" />
                                                                                                    <Key frame="214" value="-21.7069" />
                                                                                                    <Key frame="231" value="-19.3338" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="-5.01223" />
                                                                                                    <Key frame="90" value="-5.18802" />
                                                                                                    <Key frame="123" value="-5.18802" />
                                                                                                    <Key frame="152" value="-5.18802" />
                                                                                                    <Key frame="186" value="-5.18802" />
                                                                                                    <Key frame="214" value="-5.18802" />
                                                                                                    <Key frame="231" value="-5.18802" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="7.64898" />
                                                                                                    <Key frame="90" value="8.79158" />
                                                                                                    <Key frame="123" value="6.50639" />
                                                                                                    <Key frame="152" value="6.06693" />
                                                                                                    <Key frame="186" value="10.8131" />
                                                                                                    <Key frame="214" value="4.74856" />
                                                                                                    <Key frame="231" value="5.53958" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="6.68218" />
                                                                                                    <Key frame="90" value="6.15482" />
                                                                                                    <Key frame="123" value="5.97904" />
                                                                                                    <Key frame="152" value="3.69386" />
                                                                                                    <Key frame="186" value="4.04542" />
                                                                                                    <Key frame="214" value="4.57277" />
                                                                                                    <Key frame="231" value="1.32078" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="14.7634" />
                                                                                                    <Key frame="90" value="13.7966" />
                                                                                                    <Key frame="123" value="15.2908" />
                                                                                                    <Key frame="152" value="15.5544" />
                                                                                                    <Key frame="186" value="6.94104" />
                                                                                                    <Key frame="214" value="17.6638" />
                                                                                                    <Key frame="231" value="18.0154" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="-9.66569" />
                                                                                                    <Key frame="90" value="-8.96255" />
                                                                                                    <Key frame="123" value="-8.61098" />
                                                                                                    <Key frame="152" value="-5.18321" />
                                                                                                    <Key frame="186" value="-5.00742" />
                                                                                                    <Key frame="214" value="-6.41369" />
                                                                                                    <Key frame="231" value="-2.63435" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="45" value="-4.39218" />
                                                                                                    <Key frame="90" value="-4.48007" />
                                                                                                    <Key frame="123" value="-4.48007" />
                                                                                                    <Key frame="152" value="-4.48007" />
                                                                                                    <Key frame="186" value="-4.48007" />
                                                                                                    <Key frame="214" value="-4.48007" />
                                                                                                    <Key frame="231" value="-4.39218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="legsNotUnderstood0" index="70">
                                                                                <Diagram>
                                                                                    <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="107" y="38">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris2_legs" id="2" localization="8" tooltip="Y a trop de bruit ici!" x="268" y="39">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="58" size="58">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="3.24959" />
                                                                                                    <Key frame="31" value="1.84332" />
                                                                                                    <Key frame="52" value="2.37067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-9.31412" />
                                                                                                    <Key frame="31" value="-4.48007" />
                                                                                                    <Key frame="52" value="-4.56797" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="14.3288" />
                                                                                                    <Key frame="31" value="15.2077" />
                                                                                                    <Key frame="52" value="15.2077" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="10.901" />
                                                                                                    <Key frame="31" value="4.22121" />
                                                                                                    <Key frame="52" value="4.3091" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-13.7966" />
                                                                                                    <Key frame="31" value="-14.4118" />
                                                                                                    <Key frame="52" value="-14.2361" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-4.57277" />
                                                                                                    <Key frame="31" value="-4.92434" />
                                                                                                    <Key frame="52" value="-4.83645" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="3.2544" />
                                                                                                    <Key frame="31" value="2.11181" />
                                                                                                    <Key frame="52" value="2.28759" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="2.1997" />
                                                                                                    <Key frame="31" value="7.29742" />
                                                                                                    <Key frame="52" value="7.20953" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="15.3786" />
                                                                                                    <Key frame="31" value="15.2029" />
                                                                                                    <Key frame="52" value="15.3786" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-0.876513" />
                                                                                                    <Key frame="31" value="-7.64418" />
                                                                                                    <Key frame="52" value="-7.90785" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-5.00742" />
                                                                                                    <Key frame="31" value="-5.00742" />
                                                                                                    <Key frame="52" value="-5.00742" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="legsNotUnderstood1" index="80">
                                                                                <Diagram>
                                                                                    <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="107" y="37">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris11_legs" id="2" localization="8" tooltip="Essaye de me parler plus clairement." x="276" y="37">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="67" size="67">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="3.33748" />
                                                                                                    <Key frame="44" value="2.81013" />
                                                                                                    <Key frame="62" value="5.09532" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-6.85315" />
                                                                                                    <Key frame="44" value="-5.53477" />
                                                                                                    <Key frame="62" value="-8.17153" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="17.4929" />
                                                                                                    <Key frame="44" value="21.7996" />
                                                                                                    <Key frame="62" value="19.0749" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="7.91266" />
                                                                                                    <Key frame="44" value="6.4185" />
                                                                                                    <Key frame="62" value="10.5494" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-21.5311" />
                                                                                                    <Key frame="44" value="-21.1795" />
                                                                                                    <Key frame="62" value="-21.619" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-4.83645" />
                                                                                                    <Key frame="44" value="-4.83645" />
                                                                                                    <Key frame="62" value="-4.83645" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="3.16651" />
                                                                                                    <Key frame="44" value="2.46337" />
                                                                                                    <Key frame="62" value="3.07861" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="6.68218" />
                                                                                                    <Key frame="44" value="10.901" />
                                                                                                    <Key frame="62" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="17.5759" />
                                                                                                    <Key frame="44" value="21.3553" />
                                                                                                    <Key frame="62" value="20.8279" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-7.46839" />
                                                                                                    <Key frame="44" value="-14.0603" />
                                                                                                    <Key frame="62" value="-9.05044" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="16" value="-5.00742" />
                                                                                                    <Key frame="44" value="-4.74375" />
                                                                                                    <Key frame="62" value="-4.48007" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="legsNotUnderstood2" index="90">
                                                                                <Diagram>
                                                                                    <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="107" y="37">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris15_legs" id="2" localization="8" tooltip="Je t&apos;entends pas bien." x="277" y="43">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="52" size="52">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="0.437054" />
                                                                                                    <Key frame="46" value="1.66754" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="-7.64418" />
                                                                                                    <Key frame="46" value="-6.85315" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="21.9753" />
                                                                                                    <Key frame="46" value="17.7565" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="9.31893" />
                                                                                                    <Key frame="46" value="7.20953" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="-17.0486" />
                                                                                                    <Key frame="46" value="-17.4002" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="-5.18802" />
                                                                                                    <Key frame="46" value="-5.10012" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="1.49656" />
                                                                                                    <Key frame="46" value="2.81494" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="7.4732" />
                                                                                                    <Key frame="46" value="8.00055" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="20.3006" />
                                                                                                    <Key frame="46" value="15.906" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="-9.40201" />
                                                                                                    <Key frame="46" value="-9.40201" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="24" value="-4.56797" />
                                                                                                    <Key frame="46" value="-4.48007" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <BehaviorLayer name="head_">
                                                                            <BehaviorKeyframe name="end" index="1" bitmap="media/images/box/movement/move_head.png">
                                                                                <Diagram>
                                                                                    <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="113" y="27">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="271" y="18">
                                                                                        <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="-11.1647" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="-0.441863" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="406" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="headDown" index="10" bitmap="media/images/box/movement/move_head.png">
                                                                                <Diagram>
                                                                                    <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="113" y="27">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="271" y="18">
                                                                                        <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="22.4979" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="31" value="-1.58446" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="--EMPTY--" index="20">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="--EMPTY--_copy" index="30">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="headCheck" index="40" bitmap="media/images/box/movement/move_head.png">
                                                                                <Diagram>
                                                                                    <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="88" y="32">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="headCheckRandom" id="2" localization="8" tooltip="headchecks à intervales variables" x="242" y="33">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.onStopped();
        pass

    def onInput_RandomInt_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="RandomInt_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="RandomInt" id="1" localization="8" tooltip="Generate a random number between 0 and a max number." x="142" y="26">
                                                                                                            <bitmap>media/images/box/box-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(0, len(self.aShuffled)), i)
            self.output_RandomValue(self.aShuffled[self.nIndex])
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 0, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            self.output_RandomValue(nVal)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                                                            <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value outputted" id="3" />
                                                                                                            <Parameter name="max" inherits_from_parent="0" content_type="1" value="4" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="4" />
                                                                                                            <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Wait" id="2" localization="8" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" x="261" y="273">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Dispatcher" id="3" localization="8" tooltip="Dispatch an event carrying an information, depending on the information. Will be tested against all the values of the table, and the matching output will be stimulated !" plugin="dispatcher_plugin" x="312" y="26">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		elif(p == self.typeConversion(3)):
			self.output_4(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <keywords>
                                                                                                                    <keyword>0</keyword>
                                                                                                                    <keyword>1</keyword>
                                                                                                                    <keyword>2</keyword>
                                                                                                                    <keyword>3</keyword>
                                                                                                                    <keyword></keyword>
                                                                                                                </keywords>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If nothing has been matched in dispatcher." id="3" />
                                                                                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="5" />
                                                                                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="6" />
                                                                                                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="7" />
                                                                                                            <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="8" />
                                                                                                        </Box>
                                                                                                        <Box name="Anim_headCheck4" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="308">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                                                <ActuatorList model="">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="6" value="5.88634" />
                                                                                                                        <Key frame="14" value="-7" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="6" value="-2.1997" />
                                                                                                                        <Key frame="14" value="-2.72705" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Anim_headCheck2" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="119">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="15">
                                                                                                                <ActuatorList model="">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="8" value="5.88634" />
                                                                                                                        <Key frame="15" value="-5.01223" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="8" value="-2.1997" />
                                                                                                                        <Key frame="15" value="-2.81494" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Anim_headCheck3" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="213">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="27">
                                                                                                                <ActuatorList model="">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="9" value="5.88634" />
                                                                                                                        <Key frame="19" value="-11" />
                                                                                                                        <Key frame="27" value="-7" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="9" value="-2.1997" />
                                                                                                                        <Key frame="19" value="-2.28759" />
                                                                                                                        <Key frame="27" value="-2.72705" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Anim_headCheck1" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="25">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="22">
                                                                                                                <ActuatorList model="">
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="12" value="7" />
                                                                                                                        <Key frame="22" value="-7" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                                        <Key frame="12" value="-2.63916" />
                                                                                                                        <Key frame="22" value="-2.81494" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="RandomInt" id="8" localization="8" tooltip="Generate a random number between 0 and a max number." x="751" y="154">
                                                                                                            <bitmap>media/images/box/box-script.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(1, len(self.aShuffled)), i)
            self.output_RandomValue(self.aShuffled[self.nIndex])
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 1, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            self.output_RandomValue(nVal)]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                                                            <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value outputted" id="3" />
                                                                                                            <Parameter name="max" inherits_from_parent="0" content_type="1" value="4" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="4" />
                                                                                                            <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="5" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="7" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="headTactileSensorExplanation" index="50">
                                                                                <Diagram>
                                                                                    <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="88" y="13">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_helpTactilExplain_head" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="234" y="20">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="250" size="250">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="22.8494" />
                                                                                                    <Key frame="38" value="28.914" />
                                                                                                    <Key frame="45" value="28.2987" />
                                                                                                    <Key frame="55" value="29.5016" />
                                                                                                    <Key frame="65" value="29.5016" />
                                                                                                    <Key frame="79" value="29.5016" />
                                                                                                    <Key frame="95" value="-8.70368" />
                                                                                                    <Key frame="114" value="-23.4695" />
                                                                                                    <Key frame="128" value="-21.0964" />
                                                                                                    <Key frame="145" value="-11.2525" />
                                                                                                    <Key frame="157" value="-22.7664" />
                                                                                                    <Key frame="171" value="-7" />
                                                                                                    <Key frame="186" value="29.5016" />
                                                                                                    <Key frame="203" value="29.5016" />
                                                                                                    <Key frame="219" value="-17.3171" />
                                                                                                    <Key frame="236" value="-2.1997" />
                                                                                                    <Key frame="250" value="-17.9323" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="-19.4265" />
                                                                                                    <Key frame="38" value="-27.6883" />
                                                                                                    <Key frame="45" value="-30.5887" />
                                                                                                    <Key frame="55" value="-13.4498" />
                                                                                                    <Key frame="65" value="-6.15482" />
                                                                                                    <Key frame="79" value="-1.23289" />
                                                                                                    <Key frame="95" value="-2.28759" />
                                                                                                    <Key frame="114" value="-4.48488" />
                                                                                                    <Key frame="128" value="-2.99072" />
                                                                                                    <Key frame="145" value="-6.06693" />
                                                                                                    <Key frame="157" value="-5.62747" />
                                                                                                    <Key frame="171" value="-4.3091" />
                                                                                                    <Key frame="186" value="-9.93417" />
                                                                                                    <Key frame="203" value="-13.9772" />
                                                                                                    <Key frame="219" value="-6.77007" />
                                                                                                    <Key frame="236" value="-6.77007" />
                                                                                                    <Key frame="250" value="-2.55126" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="headNotUnderstood0" index="70">
                                                                                <Diagram>
                                                                                    <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="106" y="29">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris2_head" id="2" localization="8" tooltip="Y a trop de bruit ici!" x="267" y="35">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="58" size="58">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="3.6" />
                                                                                                    <Key frame="39" value="0" />
                                                                                                    <Key frame="58" value="-19.8659" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="22" value="19" />
                                                                                                    <Key frame="39" value="-34" />
                                                                                                    <Key frame="58" value="5.09532" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="headNotUnderstood1" index="80">
                                                                                <Diagram>
                                                                                    <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="106" y="29">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris11_head" id="2" localization="8" tooltip="Essaye de me parler plus clairement." x="249" y="22">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="67" size="67">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="4.30429" />
                                                                                                    <Key frame="35" value="-14.6803" />
                                                                                                    <Key frame="49" value="-18.196" />
                                                                                                    <Key frame="67" value="-18.196" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="21" value="-4.39699" />
                                                                                                    <Key frame="35" value="-3.78175" />
                                                                                                    <Key frame="49" value="-0.881321" />
                                                                                                    <Key frame="67" value="-1.32078" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="headNotUnderstood2" index="90">
                                                                                <Diagram>
                                                                                    <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="107" y="29">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Anim_pasCompris15_head" id="2" localization="8" tooltip="Je t&apos;entends pas bien." x="256" y="26">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="52" size="52">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="12.5661" />
                                                                                                    <Key frame="40" value="3" />
                                                                                                    <Key frame="52" value="-17.2292" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="17" value="-22.3269" />
                                                                                                    <Key frame="28" value="10" />
                                                                                                    <Key frame="40" value="-26" />
                                                                                                    <Key frame="52" value="-6.85796" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <BehaviorLayer name="timeline_security">
                                                                            <BehaviorKeyframe name="timelineSecurityStop" index="1" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="68" y="11">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Box name="activeMotion" id="2" localization="8" tooltip="activeMotion" x="69" y="122">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p1 = self.getParameter( "Activate arms" )
        p2 = self.getParameter( "Activate legs" )
        p3 = self.getParameter( "Activate head" )
        if( not p1 and not p2 and not p3 ):
            self.noMotion()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="noMotion" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                                        <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="5" />
                                                                                        <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="194" y="122">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto" index="2" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="8">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy" index="10" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy" index="11" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="10" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy_copy" index="20" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy_copy" index="21" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy" index="30" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy" index="31" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="30" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy" index="40" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy" index="41" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="40" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy" index="50" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy" index="51" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="69" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="50" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy_copy" index="70" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy_copy" index="71" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="70" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy_copy_copy" index="80" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy_copy_copy" index="81" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="80" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy_copy_copy_copy" index="90" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy_copy_copy_copy" index="91" bitmap="media/images/box/box-timeLine.png">
                                                                                <Diagram>
                                                                                    <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                                        <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="90" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Máš rád čokoládu? ",
			"Danish" : " Kan du lide chokolade? ",
			"German" : " Mögen Sie Schokolade? ",
			"Greek" : "  ",
			"English" : " So...Any one of you good people want to challenge me? All you need to say is sure! ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"French" : " Aimes-tu le chocolat ? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Dutch" : " Hou je van chocolade? ",
			"Norwegian" : "  ",
			"Polish" : " Lubisz czekoladę? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Russian" : " Вы любите шоколад? ",
			"Swedish" : " Gillar du choklad? ",
			"Turkish" : " Çikolata sever misin? ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <![CDATA[]]>
</arabic>
                                                                        <czech>
                                                                            <![CDATA[Máš rád čokoládu?]]>
</czech>
                                                                        <danish>
                                                                            <![CDATA[Kan du lide chokolade?]]>
</danish>
                                                                        <german>
                                                                            <![CDATA[Mögen Sie Schokolade?]]>
</german>
                                                                        <greek>
                                                                            <![CDATA[]]>
</greek>
                                                                        <english>
                                                                            <![CDATA[So...Any one of you good people want to challenge me? All you need to say is sure!]]>
</english>
                                                                        <spanish>
                                                                            <![CDATA[¿Te gusta el chocolate?]]>
</spanish>
                                                                        <finnish>
                                                                            <![CDATA[Pidätkö suklaasta?]]>
</finnish>
                                                                        <french>
                                                                            <![CDATA[Aimes-tu le chocolat ?]]>
</french>
                                                                        <italian>
                                                                            <![CDATA[Ti piace il cioccolato?]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[チョコレートが好きですか]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[당신은 초콜렛을 좋아합니까?]]>
</korean>
                                                                        <dutch>
                                                                            <![CDATA[Hou je van chocolade?]]>
</dutch>
                                                                        <norwegian>
                                                                            <![CDATA[]]>
</norwegian>
                                                                        <polish>
                                                                            <![CDATA[Lubisz czekoladę?]]>
</polish>
                                                                        <brazilian>
                                                                            <![CDATA[Você gosta de chocolate?]]>
</brazilian>
                                                                        <portuguese>
                                                                            <![CDATA[Gostas de chocolate?]]>
</portuguese>
                                                                        <russian>
                                                                            <![CDATA[Вы любите шоколад?]]>
</russian>
                                                                        <swedish>
                                                                            <![CDATA[Gillar du choklad?]]>
</swedish>
                                                                        <turkish>
                                                                            <![CDATA[Çikolata sever misin?]]>
</turkish>
                                                                        <chinese>
                                                                            <![CDATA[]]>
</chinese>
                                                                        <language>6</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="7" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                                <Resource name="Speech recognition" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Say (1)" id="7" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="686" y="70">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " okay!! but remember im really going to put up a fight tonight...\ndealer man! get me some cards! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <![CDATA[]]>
</arabic>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <greek>
                                                                            <![CDATA[]]>
</greek>
                                                                        <english>
                                                                            <![CDATA[okay!! but remember im really going to put up a fight tonight...
dealer man! get me some cards!]]>
</english>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <norwegian>
                                                                            <![CDATA[]]>
</norwegian>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <chinese>
                                                                            <![CDATA[]]>
</chinese>
                                                                        <language>6</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Say (2)" id="3" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="683" y="205">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " no?? guess I\'m hearing that word too much these days... ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <![CDATA[]]>
</arabic>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <greek>
                                                                            <![CDATA[]]>
</greek>
                                                                        <english>
                                                                            <![CDATA[no?? guess I'm hearing that word too much these days...]]>
</english>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <norwegian>
                                                                            <![CDATA[]]>
</norwegian>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <chinese>
                                                                            <![CDATA[]]>
</chinese>
                                                                        <language>6</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="587" y="397">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                <Output name="currentValue" type="0" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                            </Box>
                                            <Box name="Say (3)" id="4" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="921" y="380">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Bunch of cowards! I dont want to see any of you!! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <![CDATA[]]>
</arabic>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <greek>
                                                                            <![CDATA[]]>
</greek>
                                                                        <english>
                                                                            <![CDATA[Bunch of cowards! I dont want to see any of you!!]]>
</english>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <norwegian>
                                                                            <![CDATA[]]>
</norwegian>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <chinese>
                                                                            <![CDATA[]]>
</chinese>
                                                                        <language>6</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="walk to  gambling table" id="5" localization="8" tooltip="" x="100" y="90">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Stand Up" id="11" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="194" y="144">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="StandUpBehavior">
                                                                            <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                                            <Choice value="Crouch" />
                                                                                            <Choice value="LyingBack" />
                                                                                            <Choice value="LyingBelly" />
                                                                                            <Choice value="Sit" />
                                                                                            <Choice value="SitRelax" />
                                                                                            <Choice value="StandInit" />
                                                                                            <Choice value="Stand" />
                                                                                            <Choice value="StandZero" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                                        <Resource name="All motors" type="Lock" timeout="0" />
                                                                                        <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Drink" id="3" localization="8" tooltip="" x="486" y="152">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Timeline" id="29" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="311" y="92">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="34">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram />
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-8.61579" />
                                                                                                    <Key frame="34" value="-8.61579" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="0.876518" />
                                                                                                    <Key frame="34" value="0.876518" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.35899" />
                                                                                                    <Key frame="34" value="5.35899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-6.94104" />
                                                                                                    <Key frame="34" value="-7.55628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-28.7382" />
                                                                                                    <Key frame="34" value="-14.4997" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-68.6458" />
                                                                                                    <Key frame="34" value="-74.4467" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.3088" />
                                                                                                    <Key frame="34" value="0.3088" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.64898" />
                                                                                                    <Key frame="34" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.53958" />
                                                                                                    <Key frame="34" value="5.53958" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.92936" />
                                                                                                    <Key frame="34" value="-9.92936" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.18802" />
                                                                                                    <Key frame="34" value="-5.18802" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="21.7948" />
                                                                                                    <Key frame="34" value="11.3356" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-3.43018" />
                                                                                                    <Key frame="34" value="-17.6686" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-24.4363" />
                                                                                                    <Key frame="34" value="-16.9655" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.01224" />
                                                                                                    <Key frame="34" value="5.01224" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.12163" />
                                                                                                    <Key frame="34" value="7.12163" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="22.7664" />
                                                                                                    <Key frame="34" value="22.7664" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="69.0805" />
                                                                                                    <Key frame="34" value="69.0805" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.3088" />
                                                                                                    <Key frame="34" value="0.3088" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.73207" />
                                                                                                    <Key frame="34" value="7.11683" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.35899" />
                                                                                                    <Key frame="34" value="-5.35899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.92936" />
                                                                                                    <Key frame="34" value="-9.92936" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.00743" />
                                                                                                    <Key frame="34" value="-5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="86.9273" />
                                                                                                    <Key frame="34" value="86.9273" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-10.11" />
                                                                                                    <Key frame="34" value="-10.11" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="4.30429" />
                                                                                                    <Key frame="34" value="4.30429" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Hands" id="1" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="430" y="79">
                                                                                        <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                                                            <Choice value="Both" />
                                                                                            <Choice value="Left" />
                                                                                            <Choice value="Right" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Open the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                                                            <Choice value="Open the hand" />
                                                                                            <Choice value="Close the hand" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Box name="Hands (1)" id="2" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="731" y="73">
                                                                                        <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                                                            <Choice value="Both" />
                                                                                            <Choice value="Left" />
                                                                                            <Choice value="Right" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                                                            <Choice value="Open the hand" />
                                                                                            <Choice value="Close the hand" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Box name="Tactile Head" id="3" localization="8" tooltip="Detect touch on head tactile sensor." x="563" y="91">
                                                                                        <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                                                        <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                                                                        <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                                                                        <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                                                                        <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                                                        <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                                                                        <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                        <Resource name="Head-sequence" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Say" id="4" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="192" y="78">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " what a bad day! i got fired from my job and my lady decides to leave me too! someone get me a strong beer... ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <arabic>
                                                                                                                    <![CDATA[]]>
</arabic>
                                                                                                                <czech>
                                                                                                                    <![CDATA[Ahoj]]>
</czech>
                                                                                                                <danish>
                                                                                                                    <![CDATA[Hej]]>
</danish>
                                                                                                                <german>
                                                                                                                    <![CDATA[Hallo]]>
</german>
                                                                                                                <greek>
                                                                                                                    <![CDATA[]]>
</greek>
                                                                                                                <english>
                                                                                                                    <![CDATA[what a bad day! i got fired from my job and my lady decides to leave me too! someone get me a strong beer...]]>
</english>
                                                                                                                <spanish>
                                                                                                                    <![CDATA[Hola]]>
</spanish>
                                                                                                                <finnish>
                                                                                                                    <![CDATA[Hei]]>
</finnish>
                                                                                                                <french>
                                                                                                                    <![CDATA[Bonjour]]>
</french>
                                                                                                                <italian>
                                                                                                                    <![CDATA[Ciao]]>
</italian>
                                                                                                                <japanese>
                                                                                                                    <![CDATA[こんにちは]]>
</japanese>
                                                                                                                <korean>
                                                                                                                    <![CDATA[안녕하세요]]>
</korean>
                                                                                                                <dutch>
                                                                                                                    <![CDATA[Hallo]]>
</dutch>
                                                                                                                <norwegian>
                                                                                                                    <![CDATA[]]>
</norwegian>
                                                                                                                <polish>
                                                                                                                    <![CDATA[Cześć]]>
</polish>
                                                                                                                <brazilian>
                                                                                                                    <![CDATA[Olá]]>
</brazilian>
                                                                                                                <portuguese>
                                                                                                                    <![CDATA[Olá]]>
</portuguese>
                                                                                                                <russian>
                                                                                                                    <![CDATA[Привет]]>
</russian>
                                                                                                                <swedish>
                                                                                                                    <![CDATA[Hallå]]>
</swedish>
                                                                                                                <turkish>
                                                                                                                    <![CDATA[Merhaba]]>
</turkish>
                                                                                                                <chinese>
                                                                                                                    <![CDATA[]]>
</chinese>
                                                                                                                <language>6</language>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                        <Resource name="Speech" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="drink (1)" id="6" localization="8" tooltip="" x="847" y="64">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="165">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-8.79157" />
                                                                                                    <Key frame="45" value="-8.79157" />
                                                                                                    <Key frame="63" value="-8.61579" />
                                                                                                    <Key frame="82" value="-8.61579" />
                                                                                                    <Key frame="102" value="-8.79157" />
                                                                                                    <Key frame="122" value="-8.79157" />
                                                                                                    <Key frame="142" value="-8.61579" />
                                                                                                    <Key frame="165" value="-8.61579" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="0.612832" />
                                                                                                    <Key frame="45" value="0.612832" />
                                                                                                    <Key frame="63" value="0.876518" />
                                                                                                    <Key frame="82" value="0.876518" />
                                                                                                    <Key frame="102" value="0.612832" />
                                                                                                    <Key frame="122" value="0.612832" />
                                                                                                    <Key frame="142" value="0.876518" />
                                                                                                    <Key frame="165" value="0.876518" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="5.35899" />
                                                                                                    <Key frame="45" value="5.35899" />
                                                                                                    <Key frame="63" value="5.35899" />
                                                                                                    <Key frame="82" value="5.35899" />
                                                                                                    <Key frame="102" value="5.35899" />
                                                                                                    <Key frame="122" value="5.35899" />
                                                                                                    <Key frame="142" value="5.35899" />
                                                                                                    <Key frame="165" value="5.35899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-7.55628" />
                                                                                                    <Key frame="45" value="-7.55628" />
                                                                                                    <Key frame="63" value="-7.55628" />
                                                                                                    <Key frame="82" value="-6.94104" />
                                                                                                    <Key frame="102" value="-7.55628" />
                                                                                                    <Key frame="122" value="-7.55628" />
                                                                                                    <Key frame="142" value="-7.55628" />
                                                                                                    <Key frame="165" value="-6.94104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-88.2409" />
                                                                                                    <Key frame="45" value="-86.4831" />
                                                                                                    <Key frame="63" value="-14.4997" />
                                                                                                    <Key frame="82" value="-28.7382" />
                                                                                                    <Key frame="102" value="-88.2409" />
                                                                                                    <Key frame="122" value="-86.4831" />
                                                                                                    <Key frame="142" value="-14.4997" />
                                                                                                    <Key frame="165" value="-28.7382" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-50.8917" />
                                                                                                    <Key frame="45" value="-54.3195" />
                                                                                                    <Key frame="63" value="-74.4467" />
                                                                                                    <Key frame="82" value="-68.6458" />
                                                                                                    <Key frame="102" value="-50.8917" />
                                                                                                    <Key frame="122" value="-54.3195" />
                                                                                                    <Key frame="142" value="-74.4467" />
                                                                                                    <Key frame="165" value="-68.6458" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="24" value="0.598" />
                                                                                                    <Key frame="45" value="0.598" />
                                                                                                    <Key frame="63" value="0.3088" />
                                                                                                    <Key frame="82" value="0.3088" />
                                                                                                    <Key frame="102" value="0.598" />
                                                                                                    <Key frame="122" value="0.598" />
                                                                                                    <Key frame="142" value="0.3088" />
                                                                                                    <Key frame="165" value="0.3088" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="7.64898" />
                                                                                                    <Key frame="45" value="7.64898" />
                                                                                                    <Key frame="63" value="7.64898" />
                                                                                                    <Key frame="82" value="7.64898" />
                                                                                                    <Key frame="102" value="7.64898" />
                                                                                                    <Key frame="122" value="7.64898" />
                                                                                                    <Key frame="142" value="7.64898" />
                                                                                                    <Key frame="165" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="5.53958" />
                                                                                                    <Key frame="45" value="5.53958" />
                                                                                                    <Key frame="63" value="5.53958" />
                                                                                                    <Key frame="82" value="5.53958" />
                                                                                                    <Key frame="102" value="5.53958" />
                                                                                                    <Key frame="122" value="5.53958" />
                                                                                                    <Key frame="142" value="5.53958" />
                                                                                                    <Key frame="165" value="5.53958" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-9.92936" />
                                                                                                    <Key frame="45" value="-9.92936" />
                                                                                                    <Key frame="63" value="-9.92936" />
                                                                                                    <Key frame="82" value="-9.92936" />
                                                                                                    <Key frame="102" value="-9.92936" />
                                                                                                    <Key frame="122" value="-9.92936" />
                                                                                                    <Key frame="142" value="-9.92936" />
                                                                                                    <Key frame="165" value="-9.92936" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-5.18802" />
                                                                                                    <Key frame="45" value="-5.18802" />
                                                                                                    <Key frame="63" value="-5.18802" />
                                                                                                    <Key frame="82" value="-5.18802" />
                                                                                                    <Key frame="102" value="-5.18802" />
                                                                                                    <Key frame="122" value="-5.18802" />
                                                                                                    <Key frame="142" value="-5.18802" />
                                                                                                    <Key frame="165" value="-5.18802" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="41.3067" />
                                                                                                    <Key frame="45" value="23.3768" />
                                                                                                    <Key frame="63" value="11.3356" />
                                                                                                    <Key frame="82" value="21.7948" />
                                                                                                    <Key frame="102" value="41.3067" />
                                                                                                    <Key frame="122" value="23.3768" />
                                                                                                    <Key frame="142" value="11.3356" />
                                                                                                    <Key frame="165" value="21.7948" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="1.75543" />
                                                                                                    <Key frame="45" value="0.261268" />
                                                                                                    <Key frame="63" value="-17.6686" />
                                                                                                    <Key frame="82" value="-3.43018" />
                                                                                                    <Key frame="102" value="1.75543" />
                                                                                                    <Key frame="122" value="0.261268" />
                                                                                                    <Key frame="142" value="-17.6686" />
                                                                                                    <Key frame="165" value="-3.43018" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-19.6023" />
                                                                                                    <Key frame="45" value="-0.0902951" />
                                                                                                    <Key frame="63" value="-16.9655" />
                                                                                                    <Key frame="82" value="-24.4363" />
                                                                                                    <Key frame="102" value="-19.6023" />
                                                                                                    <Key frame="122" value="-0.0902951" />
                                                                                                    <Key frame="142" value="-16.9655" />
                                                                                                    <Key frame="165" value="-24.4363" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="5.01224" />
                                                                                                    <Key frame="45" value="5.01224" />
                                                                                                    <Key frame="63" value="5.01224" />
                                                                                                    <Key frame="82" value="5.01224" />
                                                                                                    <Key frame="102" value="5.01224" />
                                                                                                    <Key frame="122" value="5.01224" />
                                                                                                    <Key frame="142" value="5.01224" />
                                                                                                    <Key frame="165" value="5.01224" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="7.12163" />
                                                                                                    <Key frame="45" value="7.12163" />
                                                                                                    <Key frame="63" value="7.12163" />
                                                                                                    <Key frame="82" value="7.12163" />
                                                                                                    <Key frame="102" value="7.12163" />
                                                                                                    <Key frame="122" value="7.12163" />
                                                                                                    <Key frame="142" value="7.12163" />
                                                                                                    <Key frame="165" value="7.12163" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="22.5027" />
                                                                                                    <Key frame="45" value="22.5027" />
                                                                                                    <Key frame="63" value="22.7664" />
                                                                                                    <Key frame="82" value="22.7664" />
                                                                                                    <Key frame="102" value="22.5027" />
                                                                                                    <Key frame="122" value="22.5027" />
                                                                                                    <Key frame="142" value="22.7664" />
                                                                                                    <Key frame="165" value="22.7664" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="68.3774" />
                                                                                                    <Key frame="45" value="68.3774" />
                                                                                                    <Key frame="63" value="69.0805" />
                                                                                                    <Key frame="82" value="69.0805" />
                                                                                                    <Key frame="102" value="68.3774" />
                                                                                                    <Key frame="122" value="68.3774" />
                                                                                                    <Key frame="142" value="69.0805" />
                                                                                                    <Key frame="165" value="69.0805" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="24" value="0.3084" />
                                                                                                    <Key frame="45" value="0.3084" />
                                                                                                    <Key frame="63" value="0.3088" />
                                                                                                    <Key frame="82" value="0.3088" />
                                                                                                    <Key frame="102" value="0.3084" />
                                                                                                    <Key frame="122" value="0.3084" />
                                                                                                    <Key frame="142" value="0.3088" />
                                                                                                    <Key frame="165" value="0.3088" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="7.11683" />
                                                                                                    <Key frame="45" value="7.11683" />
                                                                                                    <Key frame="63" value="7.11683" />
                                                                                                    <Key frame="82" value="7.73207" />
                                                                                                    <Key frame="102" value="7.11683" />
                                                                                                    <Key frame="122" value="7.11683" />
                                                                                                    <Key frame="142" value="7.11683" />
                                                                                                    <Key frame="165" value="7.73207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-5.35899" />
                                                                                                    <Key frame="45" value="-5.35899" />
                                                                                                    <Key frame="63" value="-5.35899" />
                                                                                                    <Key frame="82" value="-5.35899" />
                                                                                                    <Key frame="102" value="-5.35899" />
                                                                                                    <Key frame="122" value="-5.35899" />
                                                                                                    <Key frame="142" value="-5.35899" />
                                                                                                    <Key frame="165" value="-5.35899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-9.92936" />
                                                                                                    <Key frame="45" value="-9.92936" />
                                                                                                    <Key frame="63" value="-9.92936" />
                                                                                                    <Key frame="82" value="-9.92936" />
                                                                                                    <Key frame="102" value="-9.92936" />
                                                                                                    <Key frame="122" value="-9.92936" />
                                                                                                    <Key frame="142" value="-9.92936" />
                                                                                                    <Key frame="165" value="-9.92936" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-5.00743" />
                                                                                                    <Key frame="45" value="-5.00743" />
                                                                                                    <Key frame="63" value="-5.00743" />
                                                                                                    <Key frame="82" value="-5.00743" />
                                                                                                    <Key frame="102" value="-5.00743" />
                                                                                                    <Key frame="122" value="-5.00743" />
                                                                                                    <Key frame="142" value="-5.00743" />
                                                                                                    <Key frame="165" value="-5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="85.8726" />
                                                                                                    <Key frame="45" value="85.8726" />
                                                                                                    <Key frame="63" value="86.9273" />
                                                                                                    <Key frame="82" value="86.9273" />
                                                                                                    <Key frame="102" value="85.8726" />
                                                                                                    <Key frame="122" value="85.8726" />
                                                                                                    <Key frame="142" value="86.9273" />
                                                                                                    <Key frame="165" value="86.9273" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="-11.1647" />
                                                                                                    <Key frame="45" value="-11.1647" />
                                                                                                    <Key frame="63" value="-10.11" />
                                                                                                    <Key frame="82" value="-10.11" />
                                                                                                    <Key frame="102" value="-11.1647" />
                                                                                                    <Key frame="122" value="-11.1647" />
                                                                                                    <Key frame="142" value="-10.11" />
                                                                                                    <Key frame="165" value="-10.11" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="24" value="4.30429" />
                                                                                                    <Key frame="45" value="4.30429" />
                                                                                                    <Key frame="63" value="4.30429" />
                                                                                                    <Key frame="82" value="4.30429" />
                                                                                                    <Key frame="102" value="4.30429" />
                                                                                                    <Key frame="122" value="4.30429" />
                                                                                                    <Key frame="142" value="4.30429" />
                                                                                                    <Key frame="165" value="4.30429" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Say (1)" id="5" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="975" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                                        <Timeline enable="0">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram>
                                                                                                        <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " is that a strong beer?? wakhhh... everything is fake ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <arabic>
                                                                                                                    <![CDATA[]]>
</arabic>
                                                                                                                <czech>
                                                                                                                    <![CDATA[Ahoj]]>
</czech>
                                                                                                                <danish>
                                                                                                                    <![CDATA[Hej]]>
</danish>
                                                                                                                <german>
                                                                                                                    <![CDATA[Hallo]]>
</german>
                                                                                                                <greek>
                                                                                                                    <![CDATA[]]>
</greek>
                                                                                                                <english>
                                                                                                                    <![CDATA[is that a strong beer?? wakhhh... everything is fake]]>
</english>
                                                                                                                <spanish>
                                                                                                                    <![CDATA[Hola]]>
</spanish>
                                                                                                                <finnish>
                                                                                                                    <![CDATA[Hei]]>
</finnish>
                                                                                                                <french>
                                                                                                                    <![CDATA[Bonjour]]>
</french>
                                                                                                                <italian>
                                                                                                                    <![CDATA[Ciao]]>
</italian>
                                                                                                                <japanese>
                                                                                                                    <![CDATA[こんにちは]]>
</japanese>
                                                                                                                <korean>
                                                                                                                    <![CDATA[안녕하세요]]>
</korean>
                                                                                                                <dutch>
                                                                                                                    <![CDATA[Hallo]]>
</dutch>
                                                                                                                <norwegian>
                                                                                                                    <![CDATA[]]>
</norwegian>
                                                                                                                <polish>
                                                                                                                    <![CDATA[Cześć]]>
</polish>
                                                                                                                <brazilian>
                                                                                                                    <![CDATA[Olá]]>
</brazilian>
                                                                                                                <portuguese>
                                                                                                                    <![CDATA[Olá]]>
</portuguese>
                                                                                                                <russian>
                                                                                                                    <![CDATA[Привет]]>
</russian>
                                                                                                                <swedish>
                                                                                                                    <![CDATA[Hallå]]>
</swedish>
                                                                                                                <turkish>
                                                                                                                    <![CDATA[Merhaba]]>
</turkish>
                                                                                                                <chinese>
                                                                                                                    <![CDATA[]]>
</chinese>
                                                                                                                <language>6</language>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                        </Timeline>
                                                                                        <Resource name="Speech" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Hands (2)" id="7" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="1091" y="65">
                                                                                        <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                                                            <Choice value="Both" />
                                                                                            <Choice value="Left" />
                                                                                            <Choice value="Right" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Open the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                                                            <Choice value="Open the hand" />
                                                                                            <Choice value="Close the hand" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Box name="Go to position Stand" id="8" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="1223" y="61">
                                                                                        <bitmap>media/images/positions/Stand.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                                        <Resource name="All motors" type="Lock" timeout="0" />
                                                                                        <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="Go to position Stand (1)" id="9" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="54" y="67">
                                                                                        <bitmap>media/images/positions/Stand.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureProxy = None
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureProxy != None):
            self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.postureProxy != None):
            result = self.postureProxy.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                                        <Resource name="All motors" type="Lock" timeout="0" />
                                                                                        <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="9" />
                                                                                    <Link inputowner="3" indexofinput="3" outputowner="3" indexofoutput="7" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                                    <Link inputowner="29" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="29" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="setVars" id="2" localization="8" tooltip="" x="841" y="71">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Text Edit" id="7" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="175" y="28">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("10")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[10]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Insert Data (6)" id="8" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="484" y="21">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="346" y="23">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="29" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="29" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="29" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="20" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="7" indexofinput="2" outputowner="29" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="20" indexofoutput="4" />
                                            <Link inputowner="29" indexofinput="2" outputowner="14" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="HOLD (1)" id="34" localization="8" tooltip="" x="338" y="200">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Timeline" id="29" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="277" y="97">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="39">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList model="nao">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-8.61579" />
                                                            <Key frame="39" value="-8.61579" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="0.876518" />
                                                            <Key frame="39" value="0.876518" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="5.35899" />
                                                            <Key frame="39" value="5.35899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-6.94104" />
                                                            <Key frame="39" value="-7.55628" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-28.7382" />
                                                            <Key frame="39" value="-14.4997" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-68.6458" />
                                                            <Key frame="39" value="-74.4467" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="18" value="0.3088" />
                                                            <Key frame="39" value="0.3088" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="7.64898" />
                                                            <Key frame="39" value="7.64898" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="5.53958" />
                                                            <Key frame="39" value="5.53958" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-9.92936" />
                                                            <Key frame="39" value="-9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-5.18802" />
                                                            <Key frame="39" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="21.7948" />
                                                            <Key frame="39" value="11.3356" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-3.43018" />
                                                            <Key frame="39" value="-17.6686" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-24.4363" />
                                                            <Key frame="39" value="-16.9655" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="5.01224" />
                                                            <Key frame="39" value="5.01224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="7.12163" />
                                                            <Key frame="39" value="7.12163" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="22.7664" />
                                                            <Key frame="39" value="22.7664" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="69.0805" />
                                                            <Key frame="39" value="69.0805" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="18" value="0.3088" />
                                                            <Key frame="39" value="0.3088" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="7.73207" />
                                                            <Key frame="39" value="7.11683" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-5.35899" />
                                                            <Key frame="39" value="-5.35899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-9.92936" />
                                                            <Key frame="39" value="-9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-5.00743" />
                                                            <Key frame="39" value="-5.00743" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="86.9273" />
                                                            <Key frame="39" value="86.9273" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="-10.11" />
                                                            <Key frame="39" value="-10.11" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="18" value="4.30429" />
                                                            <Key frame="39" value="4.30429" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Hands" id="1" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="423" y="104">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Open the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Hands (1)" id="2" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="782" y="105">
                                                <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                                    <Choice value="Open the hand" />
                                                    <Choice value="Close the hand" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Tactile Head" id="3" localization="8" tooltip="Detect touch on head tactile sensor." x="571" y="99">
                                                <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                                <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                                <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                                <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Head-sequence" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Stand Up" id="4" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="137" y="97">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="StandUpBehavior">
                                                        <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                            <Diagram>
                                                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                        <Choice value="Crouch" />
                                                                        <Choice value="LyingBack" />
                                                                        <Choice value="LyingBelly" />
                                                                        <Choice value="Sit" />
                                                                        <Choice value="SitRelax" />
                                                                        <Choice value="StandInit" />
                                                                        <Choice value="Stand" />
                                                                        <Choice value="StandZero" />
                                                                    </Parameter>
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                    <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="29" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="9" />
                                            <Link inputowner="3" indexofinput="3" outputowner="3" indexofoutput="7" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="29" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="4" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Say (2)" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="2250" y="1083">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " you seem interesting, come, let\'s have another round. I\'ll buy you a drink! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[you seem interesting, come, let's have another round. I'll buy you a drink!]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="varchange_won" id="17" localization="8" tooltip="" x="2194" y="1227">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Data (3)" id="11" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="230" y="52">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit (3)" id="12" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="297" y="188">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("15")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[15]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Substract (2)" id="13" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="522" y="51">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand - self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Num1" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                                                <Input name="Num2" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                                                <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                                            </Box>
                                            <Box name="Insert Data (3)" id="15" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="673" y="51">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="3" outputowner="12" indexofoutput="3" />
                                            <Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="varchange_lost" id="35" localization="8" tooltip="" x="2240" y="1344">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Data (3)" id="7" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="180" y="79">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit (3)" id="14" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="247" y="215">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("10")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[10]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Insert Data (3)" id="16" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="623" y="78">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Add (2)" id="17" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="459" y="84">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand + self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Num1" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                                                <Input name="Num2" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                                                <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="3" outputowner="14" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="varchange_large" id="37" localization="8" tooltip="" x="740" y="538">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Data (3)" id="12" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="151" y="24">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit (3)" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="132" y="137">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("5")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[5]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Substract (2)" id="13" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="438" y="23">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand - self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Num1" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                                                <Input name="Num2" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                                                <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                                            </Box>
                                            <Box name="Insert Data (3)" id="16" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="601" y="15">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="3" outputowner="15" indexofoutput="3" />
                                            <Link inputowner="16" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="varchange_med" id="38" localization="8" tooltip="" x="735" y="663">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Data (3)" id="12" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="216" y="50">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit (3)" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="197" y="163">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("2")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[2]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Substract (2)" id="13" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="503" y="49">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand - self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Num1" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                                                <Input name="Num2" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                                                <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                                            </Box>
                                            <Box name="Insert Data (3)" id="16" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="666" y="41">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="3" outputowner="15" indexofoutput="3" />
                                            <Link inputowner="16" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="varchange_small" id="39" localization="8" tooltip="" x="728" y="786">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Data (3)" id="14" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="247" y="66">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit (3)" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="228" y="179">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("3")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[3]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Insert Data (3)" id="17" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="697" y="57">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Add (2)" id="18" localization="8" tooltip="Add the first input value and the second one and send the result on the output." x="525" y="67">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Num1(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Num2(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand + self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Num1" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                                                <Input name="Num2" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                                                <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                                            </Box>
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="2" outputowner="18" indexofoutput="4" />
                                            <Link inputowner="18" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="18" indexofinput="3" outputowner="15" indexofoutput="3" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Choice (light) (1)" id="19" localization="8" tooltip="Launch speech recognition, and wait for one of a defined number of expected answers (written in the table of the box). the robot will prompt the speaker if he cannot understand and give suggestions as to available answers and other ways of selecting your choice. e.g. The tactile sensor on his head.&#x0A;&#x0A;Note that you must open this box to enter the question text and the available answers.&#x0A;&#x0A;This is a lighter version of Choice box from standard library which has no animation embedded.&#x0A;&#x0A;V1.1.0&#x0A;" x="1812" y="33">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Choice" id="1" localization="8" tooltip="Launch the speech recognition waiting for a defined number of predicted answers (written in the table on the box). Available help&#x0A;from the robot which gives some possible answers and attracts attention on the other modalities to answer (head tactile sensor).&#x0A;&#x0A;You can edit a choice by left double-clicking on the line. You can add a choice by right clicking on a line and selecting &apos;Insert a&#x0A;row&apos;. You can delete a choice by right clicking on a line and selecting &apos;Remove a row&apos;. You can also write several alternative&#x0A;answers for the same choice by writing them on the line separated by the character &apos;/&apos;.&#x0A;Ex: apple pie / pie / apple&#x0A;Then if any of these answers (&apos;apple pie&apos;, &apos;pie&apos; or &apos;apple&apos;) are said, the corresponding output will be activated. Indeed, each output&#x0A;which name begins with &apos;output_&apos; correspond to the choice in the list placed just in front of the output.&#x0A;&#x0A;Moreover, you have advanced options appearing when you click on the blue cross. Then you can make the robot calculate the threshold&#x0A;average of choices with the 1/2/3 button. Actually, it will calculate recognition threshold of each alternative answer and put them from&#x0A;highest to smallest threshold. The threshold displayed in front of each choice then is the highest&apos;s." plugin="ui_choice_plugin" x="469" y="52">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v8.8
# @author Desktop Application team
# (c) 2011 Aldebaran Robotics

import os
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # PROXIES INITIALIZATION
        self.tts = ALProxy("ALTextToSpeech")
        self.ttsStop = ALProxy("ALTextToSpeech", True) #Create another proxy as wait is blocking if audioout is remote
        self.memory = ALProxy("ALMemory")
        try:
            self.asr = ALProxy("ALSpeechRecognition")
            self.ad = ALProxy("ALAudioDevice")
            self.player = ALProxy("ALAudioPlayer")
            self.dcm = ALProxy( "DCM" )
        except:
            self.logger.warning("cannot find ALSpeechRecognition, choice box will run in simulation mode")
            self.asr = None
            self.ad = None
            self.player = None
            self.dcm = None

        self.leds = ALProxy( "ALLeds" )
        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.aFrameNumbers = {"end" : 1,
                              "headDown" : 10,
                              "bodyTalk" : 20,
                              "reco" : 30,
                              "headCheck" : 40,
                              "helpTactileSensor" : 50,
                              "notUnderstood" : 70}
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.bBrainAnimPaused = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.
        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        self.bSeqStarted = False
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 6
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateEyesLight = True
        self.bActivateEarsLight = True
        self.bActivateBrainLight = True
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")
        self.BIND_PYTHON(self.getName(), "onWordRecognized")
        self.BIND_PYTHON(self.getName(), "onSpeechDetected")


# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        framemanager = ALProxy("ALFrameManager")
        filename = framemanager.getBehaviorPath(self.behaviorId) + self.tryGetParameter( "Sentences file", "/Aldebaran/choice_sentences.xml" )
        if not self.fileExists(filename):
            raise RuntimeError("File " + filename + " could not be found. Please update your Choice box with a newer one from Choregraphe")
        try:
            doc = self.getFileContents( filename )
            dom = xml.dom.minidom.parseString( doc )
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check the special characters and that the syntax is correct.\n" + str(e) )
        try:
            tag = "sentences"
            mainBlock = dom.getElementsByTagName( tag )[0]
            tag = "translation"
            aTranslations = mainBlock.getElementsByTagName( tag )
            self.aAllWords = {}
            self.aAllSentences = {}
            for sTranslation in aTranslations:
                sLanguage = sTranslation.getAttribute("language")
                tag = "speechReco"
                blockSpeechReco = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the speech recognition
                self.aAllWords[sLanguage] = {}
                aKinds = ["negative",
                          "positive",
                          "help",
                          "exit",
                          "repeat"]
                for sKind in aKinds:
                    tag = sKind
                    blockWordsForThisKind = blockSpeechReco.getElementsByTagName( sKind )[0]
                    self.aAllWords[sLanguage][sKind] = blockWordsForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the speech recognition
                tag = "tts"
                blockTTS = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the Text-To-Speech
                self.aAllSentences[sLanguage] = {}
                aKinds = ["confirmation",
                          "enumMarks",
                          "helpEnumChoices",
                          "helpEnumDefault",
                          "helpTactile",
                          "notUnderstood",
                          "noQuestion",
                          "notUnderstoodAnims"]
                for sKind in aKinds:
                    tag = sKind
                    blockSentencesForThisKind = blockTTS.getElementsByTagName( sKind )[0]
                    self.aAllSentences[sLanguage][sKind] = blockSentencesForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the Text-To-Speech
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check that the '" + tag + "' tag is defined and with the right format.\n" + str(e) )

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["done", "ready", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": ["ναί", "κανένα", ""], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "Norwegian": ["ja", "Nei", ""], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        if(self.asr != None):
            self.asr.setVisualExpression( False )
        language = self.tts.getLanguage()
        if(self.asr != None):
            self.asr.setLanguage( language )
        try:
            self.aAllWords[language]
            self.aAllSentences[language]
        except:
            raise Exception( "The current language is not supported by this Choice box. It is probably deprecated. Try to use the one supplied in Choregraphe library instead." )
        self.asNegativeWords = self.aAllWords[language]["negative"]
        self.asPositiveWords = self.aAllWords[language]["positive"]
        self.asHelpWords = self.aAllWords[language]["help"]
        self.asExitWords = self.aAllWords[language]["exit"]
        self.asRepeatWords = self.aAllWords[language]["repeat"]
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.beginTime = time.time()
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 6 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateEyesLight = self.tryGetParameter( "Activate eyes light", True )
        self.bActivateEarsLight = self.tryGetParameter( "Activate ears light", True )
        self.bActivateBrainLight = self.tryGetParameter( "Activate brain light", True )
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.aDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.aDefaultChoices.append( self.asHelpWords )
        if (self.bActivateDefaultChoiceRepeat):
            self.aDefaultChoices.append( self.asRepeatWords )
        if (self.bActivateDefaultChoiceExit):
            self.aDefaultChoices.append( self.asExitWords )
        if( question == None ):
            question = ""
        self.initQuestionAndChoices( question )
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, 0.1 )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        thread.start_new_thread( self.loopLedsBrainTwinkle, () )
        while( not self.bGoOut ):
            self.questionRecognitionReaction()
        if( self.bInTactileSensorMenu ):
            self.nCountNoReply = 0
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            self.loopLedsBrainTurn()
        else:
            self.bIsRunning = False

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = "English"
            if(self.asr != None):
                language =  self.asr.getLanguage()
            self.asNegativeWords = self.aAllWords[language]["negative"]
            self.asPositiveWords = self.aAllWords[language]["positive"]
            self.asHelpWords = self.aAllWords[language]["help"]
            self.asExitWords = self.aAllWords[language]["exit"]
            self.asRepeatWords = self.aAllWords[language]["repeat"]
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aChoiceIndexes.append( index )
                index += 1

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.ttsStop.stop(idtts)
            except:
                self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        self.ttsQuestionAndRecoInit()
        if( not self.bMustStop ):
            # stop movement animation
            if( self.nFrameNumber != self.aFrameNumbers["reco"] ):
                self.nFrameNumber = self.aFrameNumbers["reco"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            # start speech recognition
            self.logger.debug( "Speech recognition started." )
            self.memory.subscribeToEvent( "WordRecognized", self.getName(), "onWordRecognized" )
            self.bRecoIsWaitingForVoice = True
            self.memory.subscribeToEvent( "SpeechDetected", self.getName(), "onSpeechDetected" )
        # leds during the recognition
        self.loopLedsReco()
        # process the reco loop break
        self.processRecoInterruption()

    def ttsQuestionAndRecoInit(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        if( not self.bInConfirmation ):
            # launch TTS
            idTTS = -1
            if( self.sQuestion != ""):
                idTTS = self.tts.post.say( self.sQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(self.sQuestion) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            if(self.asr != None):
                self.asr.setLanguage( self.tts.getLanguage() )
            if( not self.bVocabularyLoaded ):
                aWordsRecognised = []
                for i in range( len( self.aChoices ) ):
                    if( self.aChoices[i] != [] ):
                        aWordsRecognised.extend( self.aChoices[i] )
                sWordsRecognised = "You can say: "
                if( len( aWordsRecognised ) > 1 ):
                    for i in range( len( aWordsRecognised ) - 1 ):
                        sWordsRecognised += "'" + aWordsRecognised[i] + "', "
                if( len( aWordsRecognised ) > 0 ):
                    sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
                sWordsRecognised += "."
                self.logger.debug( sWordsRecognised )
                if(self.asr != None):
                    self.asr.setVocabulary( aWordsRecognised, False )
                self.bVocabularyLoaded = True
        else:
            # launch TTS
            sentence = self.aAllSentences[self.tts.getLanguage()]["confirmation"][0]
            idTTS = -1
            sentenceToSay = sentence % self.sPreviousAnswer
            if( sentenceToSay != ""):
                idTTS = self.tts.post.say( sentenceToSay )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceToSay) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            aWordsRecognised = []
            aWordsRecognised.extend( self.asNegativeWords )
            aWordsRecognised.extend( self.asPositiveWords )
            sWordsRecognised = "You can say: "
            if( len( aWordsRecognised ) > 1 ):
                for i in range( len( aWordsRecognised ) - 1 ):
                    sWordsRecognised += "'" + aWordsRecognised[i] + "', "
            if( len( aWordsRecognised ) > 0 ):
                sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
            sWordsRecognised += "."
            self.logger.debug( sWordsRecognised )
            if(self.asr != None):
                self.asr.setVocabulary( aWordsRecognised, False )
            self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
                self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # leds noticing that the robot confirm its guessing
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                # reinitialize leds
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
        else:
            self.nCountNoReply = 0
            if( self.sRecoInterruption in [ "onStop" ] ):
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.aAllSentences[self.tts.getLanguage()]["noQuestion"][0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.tts.post.say( sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.tts.post.say( sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
                if( not self.bInTactileSensorMenu ):
                    # launch TTS movement animation
                    if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                        self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.tts.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onWordRecognized(self, pDataName, pValue, pMessage):
        "Handler for when a word is recognised by the speech recognition system."
        aState = pValue
        self.logger.debug( "The word '" + str(aState[0]) + "' has been recognised with a threshold of " + str(aState[1]) + "." )
        # interrupt loops:
            # - stop reco
            # - stop leds
            # - stop asking the question on and on
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        if( aState[0] != "" ):
            if( aState[1] >= self.rUnderstoodThreshold ):
                if( self.rUnderstoodThreshold <= self.arUnderstoodThreshold[1] - 0.02 ):
                    self.rUnderstoodThreshold += 0.02
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[1]
                if( self.bInConfirmation ):
                    if( aState[0] in self.asNegativeWords ):
                        thread.start_new_thread( self.ledsNegative, () )
                    else:
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                else:
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                self.reactionWordUnderstood( aState )
            else:
                if( self.rUnderstoodThreshold >= self.arUnderstoodThreshold[0] + 0.05 ):
                    self.rUnderstoodThreshold -= 0.05
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[0]
                aCurrentChoice = ""
                for choice in self.aChoices:
                    if( aCurrentChoice == "" ):
                        if( aState[0] in choice ):
                            aCurrentChoice = choice
                if( self.sPreviousAnswer in aCurrentChoice ): # if answer in the same choice as previously
                    # then ask confirmation
                    aState[1] = self.rConfirmationThreshold - 0.01
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    self.reactionWordUnderstood( aState )
                else:
                    # else not understood
                    if( self.bInConfirmation ):
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    else:
                        self.sPreviousAnswer = aState[0]
                        thread.start_new_thread( self.ledsNotUnderstood, () )
                    self.reactionNothingUnderstood()
        else:
            if( self.bInConfirmation ):
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
            else:
                thread.start_new_thread( self.ledsNotUnderstood, () )
            self.reactionNothingUnderstood()
        if( pMessage == "" ):
            self.sRecoInterruption = "wordRecognised"
        else:
            self.sRecoInterruption = pMessage

    def onSpeechDetected(self, pDataName, pValue, pMessage):
        "Handler for when something has been heard by the speech recognition system."
        aState = pValue
        if( aState == 1):
            if( self.bRecoIsWaitingForVoice ):
                # make eyes leds switch from an animation to an other
                self.bRecoIsHearingOrAnalysing = True
                self.bRecoIsWaitingForVoice = False
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word[0] in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word[0] in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word[0] in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word[0]
            if( word[1] >= self.rConfirmationThreshold ):
                if( self.rConfirmationThreshold <= self.arConfirmationThreshold[1] - 0.02 ):
                    self.rConfirmationThreshold += 0.02
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[1]
                if( self.sPreviousAnswer in self.asHelpWords ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
            else:
                if( self.rConfirmationThreshold >= self.arConfirmationThreshold[0] + 0.05 ):
                    self.rConfirmationThreshold -= 0.05
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[0]
                self.bInConfirmation = True

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.aAllSentences[self.tts.getLanguage()]["notUnderstood"][0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"]
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
                if( self.nFrameNumber != self.aFrameNumbers["notUnderstood"] + 10*index ):
                    self.nFrameNumber = self.aFrameNumbers["notUnderstood"] + 10*index
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumDefault = self.aAllSentences[self.tts.getLanguage()]["helpEnumDefault"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.aAllSentences[self.tts.getLanguage()]["helpTactile"]
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.tts.post.say( sentence + "\\Pau=300\\" )
            else:
                idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch TTS movement animation
            if( self.bInTactileSensorMenu ):
                if( self.nFrameNumber != self.aFrameNumbers["helpTactileSensor"] ):
                    self.nFrameNumber = self.aFrameNumbers["helpTactileSensor"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            else:
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.tts.post.say( sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                    # launch TTS movement animation
                    listPossibleFrames = range( len( self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"] ) )
                    for i in range(len(listPossibleFrames)):
                        listPossibleFrames[i] = listPossibleFrames[i] * 10 + self.aFrameNumbers["notUnderstood"]
                    if( ( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ) and not ( self.nFrameNumber in listPossibleFrames ) ):
                        try:
                            self.getTimeline().goTo(self.aFrameNumbers["bodyTalk"])
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.aFrameNumbers["bodyTalk"])
                            except:
                                pass
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.tts.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDS ---------------------------------------------------------------------------------------------------

    def setLeds(self, eyesLight, earsLight, brainLight):
        "Set all LEDS (eyes, ears and brain lights)."
        rDuration = 1
        if( self.bActivateEyesLight ):
            # set eyes leds
            self.leds.post.fadeRGB( "FaceLeds", eyesLight, rDuration )
        if( self.bActivateEarsLight ):
            # set ears leds
            self.leds.fadeRGB( "EarLeds", earsLight, rDuration )
        if( self.bActivateBrainLight ):
            # set brain leds light
            self.setLedsBrain( brainLight, 500 )

    def ledsUnderstood(self, bFlashEars, bFlashBrain):
        "Sequence of LEDS for eyes, ears and brain when the robot understood what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x00FF00, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x00FF00, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            if( self.bInTactileSensorMenu ):
                self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
            else:
                self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.1 )
        if( not self.bInTactileSensorMenu ):
            self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def ledsNotUnderstood(self):
        "Sequence of LEDS for eyes and ears when the robot did not understand what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.3 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.bBrainAnimPaused = False

    def ledsNegative(self):
        "Sequence of LEDS for eyes and ears when the robot understood 'no'."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.1 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def loopLedsReco(self):
        "LEDS (eyes and ears) process during the speech recognition."
        self.beginTime = time.time()
        if( self.bInConfirmation ):
            timerReco = self.beginTime + self.nTimeoutRecoConfirmation
        else:
            timerReco = self.beginTime + self.nTimeoutReco
        self.bHasAlreadyHearingEyes = False
        nEarLedsNextIndex = 0
        nEyesLed = -1
        while( self.bRecoIsWaitingForVoice or self.bRecoIsHearingOrAnalysing ):
            if( self.bMustStop ):
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass
                break
            if( self.bRecoIsWaitingForVoice ):
                if( timerReco < time.time() ):
                    try:
                        self.timeToReply(timerReco - self.beginTime)
                    except:
                        pass
                    self.sRecoInterruption = "timeout"
                    break
            nEarLedsNextIndex = self.ledsEarsTurnOneStep( nEarLedsNextIndex )
            nEyesLed += 1
            self.ledsEyesTurnOneStep( 0x0055FF, nEyesLed%8 )
            time.sleep( 0.2 )

    def ledsEarsTurnOneStep(self, nEarLedsNextIndex):
        "One step of ears LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEarsLight ):
            nNbrLedByEars = 10
            rTime = 0.7
            strTemplate = "Ears/Led/%s/%dDeg/Actuator/Value"
            nAngle = (360/nNbrLedByEars) * nEarLedsNextIndex
            # update index before sending movement in case of a fast/concurrent call of the function
            nEarLedsNextIndex -= 1 # more beautiful to turn in this way
            if( nEarLedsNextIndex < 0 ):
                nEarLedsNextIndex = nNbrLedByEars-1
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 0.0, rTime*1.2 )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 0.0, rTime*1.2 )
        return nEarLedsNextIndex

    def ledsEyesTurnOneStep(self, nColor, nLed):
        "One step of eyes LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEyesLight ):
            rTime = 0.7
            if( self.bRecoIsHearingOrAnalysing ):
                if( not self.bHasAlreadyHearingEyes ):
                    self.leds.fadeRGB( "FaceLeds", 0xF4FF22, 0.1 )
                    # start headcheck animation
                    if( self.nFrameNumber != self.aFrameNumbers["headCheck"] ):
                        self.nFrameNumber = self.aFrameNumbers["headCheck"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
                    self.bHasAlreadyHearingEyes = True
            elif( self.bRecoIsWaitingForVoice ):
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , nColor, rTime )
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , 0x000000, rTime*1.25 )

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x0055FF, rDuration )
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0. )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    # start the tactile sensor menu
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
                self.sRecoInterruption = "onTactileSensor"
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    # validate choice
                    thread.start_new_thread( self.ledsUnderstood, (False, True) )
                    if( self.aChoices[self.nIndexChoice][0] == self.asRepeatWords[0] ):
                        self.repeatWhenNoQuestion()
                        # launch TTS
                        idTTS = -1
                        if( self.sQuestion != ""):
                            idTTS = self.tts.post.say( self.sQuestion + "\\Pau=300\\" )
                            self.aIdsTTS.append( idTTS )
                            self.logger.debug( "Robot says: " + str(self.sQuestion) )
                        # wait for the end of the TTS
                        if( idTTS != -1 ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    else:
                        self.reactionWordUnderstood( [ self.aChoices[self.nIndexChoice][0], 1.0 ] )
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        if( self.aChoices[ self.nIndexChoice ][0] != "" ):
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
            idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch flash leds
            thread.start_new_thread( self.ledsChangeOnTactile, () )
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.tts.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        self.logger.debug( "Change detected on the front tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        self.logger.debug( "Change detected on the middle tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        self.logger.debug( "Change detected on the rear tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass

        self.bGoOut = True
        self.bInTactileSensorMenu = False
        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                        self.logger.debug( "Output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' stimulated with: " + str(outputName) + "." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )
        self.onUnload()
        # come back to an initial position and stop movement animation
        if( self.nFrameNumber != self.aFrameNumbers["end"] ):
            self.nFrameNumber = self.aFrameNumbers["end"]
            try:
                self.getTimeline().goTo(self.nFrameNumber)
            except: # if NAOqi < 1.14
                try:
                    self.gotoAndStop(self.nFrameNumber)
                except:
                    pass

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.bRecoIsWaitingForVoice = False
            self.bRecoIsHearingOrAnalysing = False
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.bExternChoices = False
        self.bInTactileSensorMenu = False
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <keyword>نعم</keyword>
                                                        <keyword>لا</keyword>
                                                        <keyword></keyword>
                                                    </arabic>
                                                    <brazilian>
                                                        <keyword>sim</keyword>
                                                        <keyword>não</keyword>
                                                        <keyword></keyword>
                                                    </brazilian>
                                                    <chinese>
                                                        <keyword>是</keyword>
                                                        <keyword>不是</keyword>
                                                        <keyword></keyword>
                                                    </chinese>
                                                    <czech>
                                                        <keyword>ano</keyword>
                                                        <keyword>ne</keyword>
                                                        <keyword></keyword>
                                                    </czech>
                                                    <danish>
                                                        <keyword>ja</keyword>
                                                        <keyword>nej</keyword>
                                                        <keyword></keyword>
                                                    </danish>
                                                    <dutch>
                                                        <keyword>ja</keyword>
                                                        <keyword>nee</keyword>
                                                        <keyword></keyword>
                                                    </dutch>
                                                    <english>
                                                        <keyword>done</keyword>
                                                        <keyword>ready</keyword>
                                                        <keyword></keyword>
                                                    </english>
                                                    <finnish>
                                                        <keyword>kyllä</keyword>
                                                        <keyword>ei</keyword>
                                                        <keyword></keyword>
                                                    </finnish>
                                                    <french>
                                                        <keyword>oui</keyword>
                                                        <keyword>non</keyword>
                                                        <keyword></keyword>
                                                    </french>
                                                    <german>
                                                        <keyword>ja</keyword>
                                                        <keyword>nein</keyword>
                                                        <keyword></keyword>
                                                    </german>
                                                    <greek>
                                                        <keyword>ναί</keyword>
                                                        <keyword>κανένα</keyword>
                                                        <keyword></keyword>
                                                    </greek>
                                                    <italian>
                                                        <keyword>sì</keyword>
                                                        <keyword>no</keyword>
                                                        <keyword></keyword>
                                                    </italian>
                                                    <japanese>
                                                        <keyword>はい</keyword>
                                                        <keyword>いいえ</keyword>
                                                        <keyword></keyword>
                                                    </japanese>
                                                    <korean>
                                                        <keyword>예</keyword>
                                                        <keyword>아니</keyword>
                                                        <keyword></keyword>
                                                    </korean>
                                                    <norwegian>
                                                        <keyword>ja</keyword>
                                                        <keyword>Nei</keyword>
                                                        <keyword></keyword>
                                                    </norwegian>
                                                    <polish>
                                                        <keyword>tak</keyword>
                                                        <keyword>nie</keyword>
                                                        <keyword></keyword>
                                                    </polish>
                                                    <portuguese>
                                                        <keyword>sim</keyword>
                                                        <keyword>não</keyword>
                                                        <keyword></keyword>
                                                    </portuguese>
                                                    <russian>
                                                        <keyword>да</keyword>
                                                        <keyword>нет</keyword>
                                                        <keyword></keyword>
                                                    </russian>
                                                    <spanish>
                                                        <keyword>si</keyword>
                                                        <keyword>no</keyword>
                                                        <keyword></keyword>
                                                    </spanish>
                                                    <swedish>
                                                        <keyword>ja</keyword>
                                                        <keyword>ingen</keyword>
                                                        <keyword></keyword>
                                                    </swedish>
                                                    <turkish>
                                                        <keyword>evet</keyword>
                                                        <keyword>hayır</keyword>
                                                        <keyword></keyword>
                                                    </turkish>
                                                    <language>english</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                                <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip="To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                                <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="8" />
                                                <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="9" />
                                                <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="10" />
                                                <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="11" />
                                                <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="12" />
                                                <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="13" />
                                                <Parameter name="Activate ears light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate ears light animation (turn, flash, etc...)." id="14" />
                                                <Parameter name="Activate eyes light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate eyes light animation (turn, flash, etc...)." id="15" />
                                                <Parameter name="Activate brain light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate brain light animation (turn, flash, etc...)." id="16" />
                                                <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="17" />
                                                <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="18" />
                                                <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="19" />
                                                <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="20" />
                                                <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="21" />
                                                <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="22" />
                                                <Parameter name="Sentences file" inherits_from_parent="0" content_type="4" value="/Aldebaran/choice_sentences_light.xml" default_value="/Aldebaran/choice_sentences_light.xml" tooltip="File containing all necessary sentences in each supported language." id="23" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Máš rád čokoládu? ",
			"Danish" : " Kan du lide chokolade? ",
			"German" : " Mögen Sie Schokolade? ",
			"Greek" : "  ",
			"English" : " well.... i am definitely done for this round! that lousy drink is making me sleepy.... \n\nlet me know when you guys are done ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"French" : " Aimes-tu le chocolat ? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Dutch" : " Hou je van chocolade? ",
			"Norwegian" : "  ",
			"Polish" : " Lubisz czekoladę? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Russian" : " Вы любите шоколад? ",
			"Swedish" : " Gillar du choklad? ",
			"Turkish" : " Çikolata sever misin? ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Máš rád čokoládu?]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Kan du lide chokolade?]]>
</danish>
                                                    <german>
                                                        <![CDATA[Mögen Sie Schokolade?]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[well.... i am definitely done for this round! that lousy drink is making me sleepy.... 

let me know when you guys are done]]>
</english>
                                                    <spanish>
                                                        <![CDATA[¿Te gusta el chocolate?]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Pidätkö suklaasta?]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Aimes-tu le chocolat ?]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ti piace il cioccolato?]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[チョコレートが好きですか]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[당신은 초콜렛을 좋아합니까?]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hou je van chocolade?]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Lubisz czekoladę?]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Você gosta de chocolate?]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Gostas de chocolate?]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Вы любите шоколад?]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Gillar du choklad?]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Çikolata sever misin?]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Vision Reco. (1)" id="4" localization="8" tooltip="Recognize pictures, objects and locations which are known by the robot.&#x0A;&#x0A;Note: the robot needs to learn the picture, object or location to be able to recognize&#x0A;it. The learning process can be done through the Video Monitor (in Choregraphe&#x0A;menu, click on View, then Video Monitor)." x="451" y="301">
                            <bitmap>media/images/box/interaction/reco.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                            <Output name="onPictureLabel" type="0" type_size="1" nature="1" inner="0" tooltip="Every time pictures/objects/locations are recognized, send the first picture recognized." id="5" />
                            <Output name="onNoPicture" type="1" type_size="1" nature="2" inner="0" tooltip="No picture, object or location has been recognized." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Vision Reco." id="1" localization="8" tooltip="Recognize pictures, objects and locations which are already known by the robot.&#x0A;&#x0A;Note: the robot needs to learn the picture, object or location to be able to recognize&#x0A;it. The learning process can be done through the Video Monitor (in Choregraphe&#x0A;menu, click on View, then Video Monitor)." x="95" y="161">
                                                <bitmap>media/images/box/interaction/reco.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="PictureDetected" type="0" type_size="1" nature="4" stm_value_name="PictureDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="onPictureLabel" type="0" type_size="1" nature="2" inner="0" tooltip="Every time pictures/objects/locations are recognized, send the result as&#x0A;[Picture_1, ..., Picture_N], with Picture_n = [label1,...,label_M]." id="6" />
                                                <Output name="onNoPicture" type="1" type_size="1" nature="2" inner="0" tooltip="No picture, object or location has been recognized." id="7" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Process Reco." id="3" localization="8" tooltip="Process picture detection extractor data (PictureDetected) to extract the labels of&#x0A;recognized pictures, objects and locations, and notify when there is nothing&#x0A;of these recognized.&#x0A;&#x0A;An output (either one or the other) is stimulated each time the recognized&#x0A;pictures, objects and locations change." x="188" y="60">
                                                                    <bitmap>media/images/box/interaction/reco.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nPicturesDetected = -1

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(len(p) > 1):
            self.nPicturesDetected = len(p[1])
            labels = []
            for s in p[1]:
                labels.append(s[0])
            self.onPictureLabel( labels )
        else:
            if(self.nPicturesDetected != 0):
                self.nPicturesDetected = 0
                self.onNoPicture()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;PictureDetected extractor data." id="2" />
                                                                    <Output name="onPictureLabel" type="0" type_size="1" nature="1" inner="0" tooltip="List of recognized pictures, objects and locations labels. It is sent regularly as&#x0A;long as they are recognized.&#x0A;&#x0A;For example, you could obtain this kind of result:&#x0A;[[&apos;cover&apos;, &apos;my book&apos;], [&apos;fridge corner&apos;, &apos;kitchen&apos;, &apos;my flat&apos;]]" id="3" />
                                                                    <Output name="onNoPicture" type="1" type_size="1" nature="1" inner="0" tooltip="No picture, object or location is recognized." id="4" />
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="ConvertIntoStrings" id="3" localization="8" tooltip='Convert the array of recognized objects into several strings sent one after another.&#x0A;&#x0A;For example, if the array is:&#x0A;[[&quot;page 3&quot;, &quot;Harry Potter&quot;], [&quot;bed&quot;, &quot;bedroom&quot;, &quot;home&quot;]]&#x0A;Then the output will be stimulated first with:&#x0A;&quot;Harry Potter page 3&quot;&#x0A;And then with:&#x0A;&quot;home bedroom bed&quot;' x="285" y="49">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        for element in p:
            element.reverse()
            newElement = ""
            for i in range(len(element)-1):
                newElement += str(element[i]) + " "
            if( len(element) > 0 ):
                newElement += str(element[len(element)-1])
            self.onStopped( newElement )
            self.logger.info( newElement )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Choice" id="29" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="2463" y="1057">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                            <Output name="output" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple).&#x0A;&#x0A;Advanced options (click the blue cross):  dedicated to pronunciation test of the choices.&#x0A;- Launch the test with the play button in front of each choice.&#x0A;- Calculate the confidence index of choices with the (1/2/3) button. Closer to 100%, higher should be the speech recognition." plugin="ui_choice_plugin" x="312" y="51">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v8.8
# @author Desktop Application team
# (c) 2011 Aldebaran Robotics

import os
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # PROXIES INITIALIZATION
        self.tts = ALProxy("ALTextToSpeech")
        self.ttsStop = ALProxy("ALTextToSpeech", True) #Create another proxy as wait is blocking if audioout is remote
        self.memory = ALProxy("ALMemory")
        try:
            self.asr = ALProxy("ALSpeechRecognition")
            self.ad = ALProxy("ALAudioDevice")
            self.player = ALProxy("ALAudioPlayer")
            self.dcm = ALProxy( "DCM" )
        except:
            self.logger.warning("cannot find ALSpeechRecognition, choice box will run in simulation mode")
            self.asr = None
            self.ad = None
            self.player = None
            self.dcm = None

        self.leds = ALProxy( "ALLeds" )
        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.aFrameNumbers = {"end" : 1,
                              "headDown" : 10,
                              "bodyTalk" : 20,
                              "reco" : 30,
                              "headCheck" : 40,
                              "helpTactileSensor" : 50,
                              "notUnderstood" : 70}
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.bBrainAnimPaused = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.
        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        self.bSeqStarted = False
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 6
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateEyesLight = True
        self.bActivateEarsLight = True
        self.bActivateBrainLight = True
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")
        self.BIND_PYTHON(self.getName(), "onWordRecognized")
        self.BIND_PYTHON(self.getName(), "onSpeechDetected")


# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        framemanager = ALProxy("ALFrameManager")
        filename = framemanager.getBehaviorPath(self.behaviorId) + self.tryGetParameter( "Sentences file", "/Aldebaran/choice_sentences.xml" )
        if not self.fileExists(filename):
            raise RuntimeError("File " + filename + " could not be found. Please update your Choice box with a newer one from Choregraphe")
        try:
            doc = self.getFileContents( filename )
            dom = xml.dom.minidom.parseString( doc )
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check the special characters and that the syntax is correct.\n" + str(e) )
        try:
            tag = "sentences"
            mainBlock = dom.getElementsByTagName( tag )[0]
            tag = "translation"
            aTranslations = mainBlock.getElementsByTagName( tag )
            self.aAllWords = {}
            self.aAllSentences = {}
            for sTranslation in aTranslations:
                sLanguage = sTranslation.getAttribute("language")
                tag = "speechReco"
                blockSpeechReco = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the speech recognition
                self.aAllWords[sLanguage] = {}
                aKinds = ["negative",
                          "positive",
                          "help",
                          "exit",
                          "repeat"]
                for sKind in aKinds:
                    tag = sKind
                    blockWordsForThisKind = blockSpeechReco.getElementsByTagName( sKind )[0]
                    self.aAllWords[sLanguage][sKind] = blockWordsForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the speech recognition
                tag = "tts"
                blockTTS = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the Text-To-Speech
                self.aAllSentences[sLanguage] = {}
                aKinds = ["confirmation",
                          "enumMarks",
                          "helpEnumChoices",
                          "helpEnumDefault",
                          "helpTactile",
                          "notUnderstood",
                          "noQuestion",
                          "notUnderstoodAnims"]
                for sKind in aKinds:
                    tag = sKind
                    blockSentencesForThisKind = blockTTS.getElementsByTagName( sKind )[0]
                    self.aAllSentences[sLanguage][sKind] = blockSentencesForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the Text-To-Speech
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check that the '" + tag + "' tag is defined and with the right format.\n" + str(e) )

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["yes", "no", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": ["ναί", "κανένα", ""], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "Norwegian": ["ja", "Nei", ""], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        if(self.asr != None):
            self.asr.setVisualExpression( False )
        language = self.tts.getLanguage()
        if(self.asr != None):
            self.asr.setLanguage( language )
        try:
            self.aAllWords[language]
            self.aAllSentences[language]
        except:
            raise Exception( "The current language is not supported by this Choice box. It is probably deprecated. Try to use the one supplied in Choregraphe library instead." )
        self.asNegativeWords = self.aAllWords[language]["negative"]
        self.asPositiveWords = self.aAllWords[language]["positive"]
        self.asHelpWords = self.aAllWords[language]["help"]
        self.asExitWords = self.aAllWords[language]["exit"]
        self.asRepeatWords = self.aAllWords[language]["repeat"]
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.beginTime = time.time()
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 6 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateEyesLight = self.tryGetParameter( "Activate eyes light", True )
        self.bActivateEarsLight = self.tryGetParameter( "Activate ears light", True )
        self.bActivateBrainLight = self.tryGetParameter( "Activate brain light", True )
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.aDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.aDefaultChoices.append( self.asHelpWords )
        if (self.bActivateDefaultChoiceRepeat):
            self.aDefaultChoices.append( self.asRepeatWords )
        if (self.bActivateDefaultChoiceExit):
            self.aDefaultChoices.append( self.asExitWords )
        if( question == None ):
            question = ""
        self.initQuestionAndChoices( question )
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, 0.1 )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        thread.start_new_thread( self.loopLedsBrainTwinkle, () )
        while( not self.bGoOut ):
            self.questionRecognitionReaction()
        if( self.bInTactileSensorMenu ):
            self.nCountNoReply = 0
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            self.loopLedsBrainTurn()
        else:
            self.bIsRunning = False

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = "English"
            if(self.asr != None):
                language =  self.asr.getLanguage()
            self.asNegativeWords = self.aAllWords[language]["negative"]
            self.asPositiveWords = self.aAllWords[language]["positive"]
            self.asHelpWords = self.aAllWords[language]["help"]
            self.asExitWords = self.aAllWords[language]["exit"]
            self.asRepeatWords = self.aAllWords[language]["repeat"]
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aChoiceIndexes.append( index )
                index += 1

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.ttsStop.stop(idtts)
            except:
                self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        self.ttsQuestionAndRecoInit()
        if( not self.bMustStop ):
            # stop movement animation
            if( self.nFrameNumber != self.aFrameNumbers["reco"] ):
                self.nFrameNumber = self.aFrameNumbers["reco"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            # start speech recognition
            self.logger.debug( "Speech recognition started." )
            self.memory.subscribeToEvent( "WordRecognized", self.getName(), "onWordRecognized" )
            self.bRecoIsWaitingForVoice = True
            self.memory.subscribeToEvent( "SpeechDetected", self.getName(), "onSpeechDetected" )
        # leds during the recognition
        self.loopLedsReco()
        # process the reco loop break
        self.processRecoInterruption()

    def ttsQuestionAndRecoInit(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        if( not self.bInConfirmation ):
            # launch TTS
            idTTS = -1
            if( self.sQuestion != ""):
                idTTS = self.tts.post.say( self.sQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(self.sQuestion) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            if(self.asr != None):
                self.asr.setLanguage( self.tts.getLanguage() )
            if( not self.bVocabularyLoaded ):
                aWordsRecognised = []
                for i in range( len( self.aChoices ) ):
                    if( self.aChoices[i] != [] ):
                        aWordsRecognised.extend( self.aChoices[i] )
                sWordsRecognised = "You can say: "
                if( len( aWordsRecognised ) > 1 ):
                    for i in range( len( aWordsRecognised ) - 1 ):
                        sWordsRecognised += "'" + aWordsRecognised[i] + "', "
                if( len( aWordsRecognised ) > 0 ):
                    sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
                sWordsRecognised += "."
                self.logger.debug( sWordsRecognised )
                if(self.asr != None):
                    self.asr.setVocabulary( aWordsRecognised, False )
                self.bVocabularyLoaded = True
        else:
            # launch TTS
            sentence = self.aAllSentences[self.tts.getLanguage()]["confirmation"][0]
            idTTS = -1
            sentenceToSay = sentence % self.sPreviousAnswer
            if( sentenceToSay != ""):
                idTTS = self.tts.post.say( sentenceToSay )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceToSay) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            aWordsRecognised = []
            aWordsRecognised.extend( self.asNegativeWords )
            aWordsRecognised.extend( self.asPositiveWords )
            sWordsRecognised = "You can say: "
            if( len( aWordsRecognised ) > 1 ):
                for i in range( len( aWordsRecognised ) - 1 ):
                    sWordsRecognised += "'" + aWordsRecognised[i] + "', "
            if( len( aWordsRecognised ) > 0 ):
                sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
            sWordsRecognised += "."
            self.logger.debug( sWordsRecognised )
            if(self.asr != None):
                self.asr.setVocabulary( aWordsRecognised, False )
            self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
                self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # leds noticing that the robot confirm its guessing
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                # reinitialize leds
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
        else:
            self.nCountNoReply = 0
            if( self.sRecoInterruption in [ "onStop" ] ):
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.aAllSentences[self.tts.getLanguage()]["noQuestion"][0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.tts.post.say( sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.tts.post.say( sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
                if( not self.bInTactileSensorMenu ):
                    # launch TTS movement animation
                    if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                        self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.tts.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onWordRecognized(self, pDataName, pValue, pMessage):
        "Handler for when a word is recognised by the speech recognition system."
        aState = pValue
        self.logger.debug( "The word '" + str(aState[0]) + "' has been recognised with a threshold of " + str(aState[1]) + "." )
        # interrupt loops:
            # - stop reco
            # - stop leds
            # - stop asking the question on and on
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        if( aState[0] != "" ):
            if( aState[1] >= self.rUnderstoodThreshold ):
                if( self.rUnderstoodThreshold <= self.arUnderstoodThreshold[1] - 0.02 ):
                    self.rUnderstoodThreshold += 0.02
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[1]
                if( self.bInConfirmation ):
                    if( aState[0] in self.asNegativeWords ):
                        thread.start_new_thread( self.ledsNegative, () )
                    else:
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                else:
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                self.reactionWordUnderstood( aState )
            else:
                if( self.rUnderstoodThreshold >= self.arUnderstoodThreshold[0] + 0.05 ):
                    self.rUnderstoodThreshold -= 0.05
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[0]
                aCurrentChoice = ""
                for choice in self.aChoices:
                    if( aCurrentChoice == "" ):
                        if( aState[0] in choice ):
                            aCurrentChoice = choice
                if( self.sPreviousAnswer in aCurrentChoice ): # if answer in the same choice as previously
                    # then ask confirmation
                    aState[1] = self.rConfirmationThreshold - 0.01
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    self.reactionWordUnderstood( aState )
                else:
                    # else not understood
                    if( self.bInConfirmation ):
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    else:
                        self.sPreviousAnswer = aState[0]
                        thread.start_new_thread( self.ledsNotUnderstood, () )
                    self.reactionNothingUnderstood()
        else:
            if( self.bInConfirmation ):
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
            else:
                thread.start_new_thread( self.ledsNotUnderstood, () )
            self.reactionNothingUnderstood()
        if( pMessage == "" ):
            self.sRecoInterruption = "wordRecognised"
        else:
            self.sRecoInterruption = pMessage

    def onSpeechDetected(self, pDataName, pValue, pMessage):
        "Handler for when something has been heard by the speech recognition system."
        aState = pValue
        if( aState == 1):
            if( self.bRecoIsWaitingForVoice ):
                # make eyes leds switch from an animation to an other
                self.bRecoIsHearingOrAnalysing = True
                self.bRecoIsWaitingForVoice = False
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word[0] in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word[0] in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word[0] in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word[0]
            if( word[1] >= self.rConfirmationThreshold ):
                if( self.rConfirmationThreshold <= self.arConfirmationThreshold[1] - 0.02 ):
                    self.rConfirmationThreshold += 0.02
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[1]
                if( self.sPreviousAnswer in self.asHelpWords ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
            else:
                if( self.rConfirmationThreshold >= self.arConfirmationThreshold[0] + 0.05 ):
                    self.rConfirmationThreshold -= 0.05
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[0]
                self.bInConfirmation = True

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.aAllSentences[self.tts.getLanguage()]["notUnderstood"][0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"]
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
                if( self.nFrameNumber != self.aFrameNumbers["notUnderstood"] + 10*index ):
                    self.nFrameNumber = self.aFrameNumbers["notUnderstood"] + 10*index
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumDefault = self.aAllSentences[self.tts.getLanguage()]["helpEnumDefault"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.aAllSentences[self.tts.getLanguage()]["helpTactile"]
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.tts.post.say( sentence + "\\Pau=300\\" )
            else:
                idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch TTS movement animation
            if( self.bInTactileSensorMenu ):
                if( self.nFrameNumber != self.aFrameNumbers["helpTactileSensor"] ):
                    self.nFrameNumber = self.aFrameNumbers["helpTactileSensor"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            else:
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.tts.post.say( sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                    # launch TTS movement animation
                    listPossibleFrames = range( len( self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"] ) )
                    for i in range(len(listPossibleFrames)):
                        listPossibleFrames[i] = listPossibleFrames[i] * 10 + self.aFrameNumbers["notUnderstood"]
                    if( ( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ) and not ( self.nFrameNumber in listPossibleFrames ) ):
                        try:
                            self.getTimeline().goTo(self.aFrameNumbers["bodyTalk"])
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.aFrameNumbers["bodyTalk"])
                            except:
                                pass
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.tts.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDS ---------------------------------------------------------------------------------------------------

    def setLeds(self, eyesLight, earsLight, brainLight):
        "Set all LEDS (eyes, ears and brain lights)."
        rDuration = 1
        if( self.bActivateEyesLight ):
            # set eyes leds
            self.leds.post.fadeRGB( "FaceLeds", eyesLight, rDuration )
        if( self.bActivateEarsLight ):
            # set ears leds
            self.leds.fadeRGB( "EarLeds", earsLight, rDuration )
        if( self.bActivateBrainLight ):
            # set brain leds light
            self.setLedsBrain( brainLight, 500 )

    def ledsUnderstood(self, bFlashEars, bFlashBrain):
        "Sequence of LEDS for eyes, ears and brain when the robot understood what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x00FF00, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x00FF00, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            if( self.bInTactileSensorMenu ):
                self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
            else:
                self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.1 )
        if( not self.bInTactileSensorMenu ):
            self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def ledsNotUnderstood(self):
        "Sequence of LEDS for eyes and ears when the robot did not understand what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.3 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.bBrainAnimPaused = False

    def ledsNegative(self):
        "Sequence of LEDS for eyes and ears when the robot understood 'no'."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.1 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def loopLedsReco(self):
        "LEDS (eyes and ears) process during the speech recognition."
        self.beginTime = time.time()
        if( self.bInConfirmation ):
            timerReco = self.beginTime + self.nTimeoutRecoConfirmation
        else:
            timerReco = self.beginTime + self.nTimeoutReco
        self.bHasAlreadyHearingEyes = False
        nEarLedsNextIndex = 0
        nEyesLed = -1
        while( self.bRecoIsWaitingForVoice or self.bRecoIsHearingOrAnalysing ):
            if( self.bMustStop ):
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass
                break
            if( self.bRecoIsWaitingForVoice ):
                if( timerReco < time.time() ):
                    try:
                        self.timeToReply(timerReco - self.beginTime)
                    except:
                        pass
                    self.sRecoInterruption = "timeout"
                    break
            nEarLedsNextIndex = self.ledsEarsTurnOneStep( nEarLedsNextIndex )
            nEyesLed += 1
            self.ledsEyesTurnOneStep( 0x0055FF, nEyesLed%8 )
            time.sleep( 0.2 )

    def ledsEarsTurnOneStep(self, nEarLedsNextIndex):
        "One step of ears LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEarsLight ):
            nNbrLedByEars = 10
            rTime = 0.7
            strTemplate = "Ears/Led/%s/%dDeg/Actuator/Value"
            nAngle = (360/nNbrLedByEars) * nEarLedsNextIndex
            # update index before sending movement in case of a fast/concurrent call of the function
            nEarLedsNextIndex -= 1 # more beautiful to turn in this way
            if( nEarLedsNextIndex < 0 ):
                nEarLedsNextIndex = nNbrLedByEars-1
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 0.0, rTime*1.2 )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 0.0, rTime*1.2 )
        return nEarLedsNextIndex

    def ledsEyesTurnOneStep(self, nColor, nLed):
        "One step of eyes LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEyesLight ):
            rTime = 0.7
            if( self.bRecoIsHearingOrAnalysing ):
                if( not self.bHasAlreadyHearingEyes ):
                    self.leds.fadeRGB( "FaceLeds", 0xF4FF22, 0.1 )
                    # start headcheck animation
                    if( self.nFrameNumber != self.aFrameNumbers["headCheck"] ):
                        self.nFrameNumber = self.aFrameNumbers["headCheck"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
                    self.bHasAlreadyHearingEyes = True
            elif( self.bRecoIsWaitingForVoice ):
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , nColor, rTime )
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , 0x000000, rTime*1.25 )

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x0055FF, rDuration )
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0. )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    # start the tactile sensor menu
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
                self.sRecoInterruption = "onTactileSensor"
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    # validate choice
                    thread.start_new_thread( self.ledsUnderstood, (False, True) )
                    if( self.aChoices[self.nIndexChoice][0] == self.asRepeatWords[0] ):
                        self.repeatWhenNoQuestion()
                        # launch TTS
                        idTTS = -1
                        if( self.sQuestion != ""):
                            idTTS = self.tts.post.say( self.sQuestion + "\\Pau=300\\" )
                            self.aIdsTTS.append( idTTS )
                            self.logger.debug( "Robot says: " + str(self.sQuestion) )
                        # wait for the end of the TTS
                        if( idTTS != -1 ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    else:
                        self.reactionWordUnderstood( [ self.aChoices[self.nIndexChoice][0], 1.0 ] )
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        if( self.aChoices[ self.nIndexChoice ][0] != "" ):
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
            idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch flash leds
            thread.start_new_thread( self.ledsChangeOnTactile, () )
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.tts.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        self.logger.debug( "Change detected on the front tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        self.logger.debug( "Change detected on the middle tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        self.logger.debug( "Change detected on the rear tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass

        self.bGoOut = True
        self.bInTactileSensorMenu = False
        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                        self.logger.debug( "Output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' stimulated with: " + str(outputName) + "." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )
        self.onUnload()
        # come back to an initial position and stop movement animation
        if( self.nFrameNumber != self.aFrameNumbers["end"] ):
            self.nFrameNumber = self.aFrameNumbers["end"]
            try:
                self.getTimeline().goTo(self.nFrameNumber)
            except: # if NAOqi < 1.14
                try:
                    self.gotoAndStop(self.nFrameNumber)
                except:
                    pass

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.bRecoIsWaitingForVoice = False
            self.bRecoIsHearingOrAnalysing = False
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.bExternChoices = False
        self.bInTactileSensorMenu = False
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <keyword>نعم</keyword>
                                                        <keyword>لا</keyword>
                                                        <keyword></keyword>
                                                    </arabic>
                                                    <brazilian>
                                                        <keyword>sim</keyword>
                                                        <keyword>não</keyword>
                                                        <keyword></keyword>
                                                    </brazilian>
                                                    <chinese>
                                                        <keyword>是</keyword>
                                                        <keyword>不是</keyword>
                                                        <keyword></keyword>
                                                    </chinese>
                                                    <czech>
                                                        <keyword>ano</keyword>
                                                        <keyword>ne</keyword>
                                                        <keyword></keyword>
                                                    </czech>
                                                    <danish>
                                                        <keyword>ja</keyword>
                                                        <keyword>nej</keyword>
                                                        <keyword></keyword>
                                                    </danish>
                                                    <dutch>
                                                        <keyword>ja</keyword>
                                                        <keyword>nee</keyword>
                                                        <keyword></keyword>
                                                    </dutch>
                                                    <english>
                                                        <keyword>yes</keyword>
                                                        <keyword>no</keyword>
                                                        <keyword></keyword>
                                                    </english>
                                                    <finnish>
                                                        <keyword>kyllä</keyword>
                                                        <keyword>ei</keyword>
                                                        <keyword></keyword>
                                                    </finnish>
                                                    <french>
                                                        <keyword>oui</keyword>
                                                        <keyword>non</keyword>
                                                        <keyword></keyword>
                                                    </french>
                                                    <german>
                                                        <keyword>ja</keyword>
                                                        <keyword>nein</keyword>
                                                        <keyword></keyword>
                                                    </german>
                                                    <greek>
                                                        <keyword>ναί</keyword>
                                                        <keyword>κανένα</keyword>
                                                        <keyword></keyword>
                                                    </greek>
                                                    <italian>
                                                        <keyword>sì</keyword>
                                                        <keyword>no</keyword>
                                                        <keyword></keyword>
                                                    </italian>
                                                    <japanese>
                                                        <keyword>はい</keyword>
                                                        <keyword>いいえ</keyword>
                                                        <keyword></keyword>
                                                    </japanese>
                                                    <korean>
                                                        <keyword>예</keyword>
                                                        <keyword>아니</keyword>
                                                        <keyword></keyword>
                                                    </korean>
                                                    <norwegian>
                                                        <keyword>ja</keyword>
                                                        <keyword>Nei</keyword>
                                                        <keyword></keyword>
                                                    </norwegian>
                                                    <polish>
                                                        <keyword>tak</keyword>
                                                        <keyword>nie</keyword>
                                                        <keyword></keyword>
                                                    </polish>
                                                    <portuguese>
                                                        <keyword>sim</keyword>
                                                        <keyword>não</keyword>
                                                        <keyword></keyword>
                                                    </portuguese>
                                                    <russian>
                                                        <keyword>да</keyword>
                                                        <keyword>нет</keyword>
                                                        <keyword></keyword>
                                                    </russian>
                                                    <spanish>
                                                        <keyword>si</keyword>
                                                        <keyword>no</keyword>
                                                        <keyword></keyword>
                                                    </spanish>
                                                    <swedish>
                                                        <keyword>ja</keyword>
                                                        <keyword>ingen</keyword>
                                                        <keyword></keyword>
                                                    </swedish>
                                                    <turkish>
                                                        <keyword>evet</keyword>
                                                        <keyword>hayır</keyword>
                                                        <keyword></keyword>
                                                    </turkish>
                                                    <language>english</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                                <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                                <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Parameter name="Activate head" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Head motion activation during the recognition and while the robot is&#x0A;talking." id="8" />
                                                <Parameter name="Activate arms" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Arms motion activation while the robot is talking." id="9" />
                                                <Parameter name="Activate legs" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Legs motion activation while the robot is talking." id="10" />
                                                <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="11" />
                                                <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="12" />
                                                <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="13" />
                                                <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="14" />
                                                <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="15" />
                                                <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="16" />
                                                <Parameter name="Activate ears light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate ears light animation (turn, flash, etc...)." id="17" />
                                                <Parameter name="Activate eyes light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate eyes light animation (turn, flash, etc...)." id="18" />
                                                <Parameter name="Activate brain light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate brain light animation (turn, flash, etc...)." id="19" />
                                                <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="20" />
                                                <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="21" />
                                                <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="22" />
                                                <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="23" />
                                                <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="24" />
                                                <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="25" />
                                                <Parameter name="Sentences file" inherits_from_parent="0" content_type="4" value="/../choice(1)" default_value="/Aldebaran/choice_sentences.xml" tooltip="File containing all necessary sentences in each supported language." id="26" />
                                                <Timeline enable="1" fps="1" start_frame="1" end_frame="-1" size="-1">
                                                    <BehaviorLayer name="arms_">
                                                        <BehaviorKeyframe name="end" index="1" bitmap="media/images/box/movement/move_arm.png">
                                                            <Diagram>
                                                                <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="134" y="31">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="27">
                                                                    <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="-31.8144" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="-63.9876" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="0.186207" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="89.5593" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="6.23791" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="-9.67049" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="33.0497" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="71.1899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="0.167662" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="89.1246" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-3.95753" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-16.3503" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="429" y="25">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="armsEnd" index="10" bitmap="media/images/box/movement/move_arm.png">
                                                            <Diagram>
                                                                <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="134" y="31">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="27">
                                                                    <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="-31.8144" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="-63.9876" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="0.186207" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="89.5593" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="6.23791" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="27" value="-9.67049" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="33.0497" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="71.1899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="0.167662" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="89.1246" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-3.95753" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-16.3503" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="armsBodyTalk" index="20" bitmap="media/images/box/movement/move_arm.png">
                                                            <Diagram>
                                                                <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="173" y="31">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="RandomIntMod" id="2" localization="8" tooltip="Generate a random number between 0 and a max number." x="478" y="28">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(0, len(self.aShuffled)), i)
            func = getattr( self, "output_" + str(self.aShuffled[self.nIndex]) )
            func()
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 0, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            func = getattr( self, "output_" + str(nVal) )
            func()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                    <Output name="output_0" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="output_3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="output_4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="output_5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="output_6" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="output_7" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                    <Output name="output_8" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                    <Output name="output_9" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                    <Output name="output_10" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                    <Output name="output_11" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                    <Parameter name="max" inherits_from_parent="0" content_type="1" value="12" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="15" />
                                                                    <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="16" />
                                                                </Box>
                                                                <Box name="Anim_bodytalk1" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1005" y="27">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="28">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-71.6294" />
                                                                                <Key frame="28" value="-80.2427" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-108.197" />
                                                                                <Key frame="28" value="-53.7921" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="0.181844" />
                                                                                <Key frame="28" value="0.890909" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="66.9711" />
                                                                                <Key frame="28" value="42.0977" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="8.78677" />
                                                                                <Key frame="28" value="1.75543" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="2.98591" />
                                                                                <Key frame="28" value="-11" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="67.679" />
                                                                                <Key frame="27" value="86.8394" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="106.61" />
                                                                                <Key frame="27" value="62.6644" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="0.161844" />
                                                                                <Key frame="27" value="0.818182" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="68.6458" />
                                                                                <Key frame="27" value="48.4307" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-7.38531" />
                                                                                <Key frame="27" value="-4.92434" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-14.8561" />
                                                                                <Key frame="27" value="9" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk3" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1007" y="220">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="28">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-65.4769" />
                                                                                <Key frame="28" value="-57.2151" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-36.038" />
                                                                                <Key frame="28" value="-46.9366" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="28" value="0.345455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="58.5335" />
                                                                                <Key frame="28" value="77.9576" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="9.57779" />
                                                                                <Key frame="28" value="2.72224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="28" value="-14" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="13" value="89.5017" />
                                                                                <Key frame="25" value="83.2359" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="13" value="24.6952" />
                                                                                <Key frame="25" value="85.4284" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="0.345455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="13" value="47.9913" />
                                                                                <Key frame="25" value="44.2998" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="13" value="-18.2839" />
                                                                                <Key frame="25" value="-3.43018" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="51" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk2" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1007" y="123">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="21">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="-78.7486" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="-82.5327" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.654545" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="40.1641" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="5.09532" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="9" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="74.6225" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="100.985" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="0.645455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="73.7436" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-6.68218" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="43" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="StandUp" id="6" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="1009" y="318">
                                                                    <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="48">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-31.5507" />
                                                                                <Key frame="48" value="-32.2539" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-64.5149" />
                                                                                <Key frame="48" value="-56.6926" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="0.183662" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="89.1198" />
                                                                                <Key frame="48" value="82.2643" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="6.67737" />
                                                                                <Key frame="48" value="1.22808" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="5.79845" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="33.577" />
                                                                                <Key frame="45" value="45.1787" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="70.9262" />
                                                                                <Key frame="45" value="59.3245" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="0.162208" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="88.6852" />
                                                                                <Key frame="45" value="86.8394" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="-3.07861" />
                                                                                <Key frame="45" value="-0.705538" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="-16.526" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk4" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1011" y="417">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-76.1997" />
                                                                                <Key frame="31" value="-67.3227" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="6.67737" />
                                                                                <Key frame="31" value="-90.7067" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="0.709091" />
                                                                                <Key frame="31" value="0.334571" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="3.07381" />
                                                                                <Key frame="31" value="2.54646" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="9.57779" />
                                                                                <Key frame="31" value="7.20472" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-25" />
                                                                                <Key frame="31" value="-10.6373" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="72.0736" />
                                                                                <Key frame="27" value="70.6674" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="73.0356" />
                                                                                <Key frame="27" value="51.9416" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="0.254545" />
                                                                                <Key frame="27" value="0.33748" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="92.904" />
                                                                                <Key frame="27" value="86.5758" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-9.31893" />
                                                                                <Key frame="27" value="-6.24272" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="62" />
                                                                                <Key frame="27" value="52.6447" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk5" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1011" y="516">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="36">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-88.6803" />
                                                                                <Key frame="36" value="-89.1198" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-54.4953" />
                                                                                <Key frame="36" value="-33.6649" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="36" value="0.454545" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="52.2053" />
                                                                                <Key frame="36" value="46.1408" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="16.2576" />
                                                                                <Key frame="36" value="6.15002" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="36" value="-45" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="88.9488" />
                                                                                <Key frame="33" value="88.773" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="53.1721" />
                                                                                <Key frame="33" value="78.9244" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="33" value="0.418182" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="28.2156" />
                                                                                <Key frame="33" value="40.1689" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="-1.0571" />
                                                                                <Key frame="33" value="-0.881321" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="33" value="-17" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk5" id="9" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1012" y="614">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="34">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-75.8482" />
                                                                                <Key frame="34" value="-76.0239" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-54.0558" />
                                                                                <Key frame="34" value="-66.9759" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="0.507273" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="74.9692" />
                                                                                <Key frame="34" value="69.2563" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="3.42537" />
                                                                                <Key frame="34" value="5.62267" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="-37" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="54.1437" />
                                                                                <Key frame="31" value="57.5715" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="42.0098" />
                                                                                <Key frame="31" value="67.5863" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="0.592727" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="72.8646" />
                                                                                <Key frame="31" value="72.9525" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="-3.95753" />
                                                                                <Key frame="31" value="-3.43018" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="46.3" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk6" id="10" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1012" y="713">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="34">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-52.7326" />
                                                                                <Key frame="34" value="-60.4671" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-26.3699" />
                                                                                <Key frame="34" value="-108.988" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="0.727273" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="62.8402" />
                                                                                <Key frame="34" value="59.1487" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="1.14019" />
                                                                                <Key frame="34" value="6.94104" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="-30" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="44.0362" />
                                                                                <Key frame="31" value="75.3256" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="118.564" />
                                                                                <Key frame="31" value="65.8285" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="0.509091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="87.6305" />
                                                                                <Key frame="31" value="70.8431" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-1.40867" />
                                                                                <Key frame="31" value="-0.498473" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="25" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk7" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1014" y="813">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="46">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-31.9902" />
                                                                                <Key frame="46" value="-28.5624" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-57.4836" />
                                                                                <Key frame="46" value="-65.5696" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="46" value="0.163636" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="81.4732" />
                                                                                <Key frame="46" value="86.6588" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="3.24959" />
                                                                                <Key frame="46" value="9.75358" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="46" value="-11" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="39.9053" />
                                                                                <Key frame="43" value="28.1278" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="69.7836" />
                                                                                <Key frame="43" value="87.1862" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="43" value="0.2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="87.5426" />
                                                                                <Key frame="43" value="88.1578" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-1.23289" />
                                                                                <Key frame="43" value="-2.1997" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="43" value="-5.4" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk8" id="12" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1015" y="912">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-43.0645" />
                                                                                <Key frame="40" value="-58.0061" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-106.615" />
                                                                                <Key frame="40" value="-38.499" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="40" value="0.745455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="79.0123" />
                                                                                <Key frame="40" value="68.641" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="1.22808" />
                                                                                <Key frame="40" value="5.88634" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="40" value="-39" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="36.9169" />
                                                                                <Key frame="37" value="64.0755" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="110.302" />
                                                                                <Key frame="37" value="56.6878" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="37" value="0.818182" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="79.8081" />
                                                                                <Key frame="37" value="75.853" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="-3.16651" />
                                                                                <Key frame="37" value="-0.617646" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="37" value="12" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk9" id="13" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1016" y="1011">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-43.504" />
                                                                                <Key frame="40" value="-24.871" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-37.3564" />
                                                                                <Key frame="40" value="-79.8081" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="40" value="0.381818" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="71.8051" />
                                                                                <Key frame="40" value="89.5593" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="1.49176" />
                                                                                <Key frame="40" value="12.7419" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="40" value="-36" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="72.3373" />
                                                                                <Key frame="37" value="45.7061" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="61.346" />
                                                                                <Key frame="37" value="95.448" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="37" value="0.363636" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="88.8609" />
                                                                                <Key frame="37" value="100.375" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-1.93602" />
                                                                                <Key frame="37" value="-6.50639" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="37" value="10" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalk11" id="14" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="1020" y="1115">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="43">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-72.0688" />
                                                                                <Key frame="24" value="-57.8303" />
                                                                                <Key frame="33" value="-65.7406" />
                                                                                <Key frame="43" value="-54.4905" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-11.9557" />
                                                                                <Key frame="24" value="-41.1357" />
                                                                                <Key frame="33" value="-47.9913" />
                                                                                <Key frame="43" value="-78.3139" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="0.176364" />
                                                                                <Key frame="43" value="0.507273" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="39.9883" />
                                                                                <Key frame="24" value="52.0295" />
                                                                                <Key frame="33" value="53.0842" />
                                                                                <Key frame="43" value="57.7425" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="9.05044" />
                                                                                <Key frame="24" value="9.66569" />
                                                                                <Key frame="33" value="1.31597" />
                                                                                <Key frame="43" value="4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="-2" />
                                                                                <Key frame="33" value="-71" />
                                                                                <Key frame="43" value="-53" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="32.6981" />
                                                                                <Key frame="41" value="28.4793" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="77.1665" />
                                                                                <Key frame="41" value="93.3386" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="86.2242" />
                                                                                <Key frame="41" value="91.3219" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="-0.617646" />
                                                                                <Key frame="41" value="-8.79158" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="8" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="9" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="2" indexofoutput="10" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="11" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="2" indexofoutput="12" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="2" indexofoutput="13" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="14" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="--EMPTY--" index="30">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="armsTactileSensorExplanation" index="50">
                                                            <Diagram>
                                                                <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="76" y="24">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_helpTactilExplain_arms" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="226" y="22">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="250" size="250">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-25.7499" />
                                                                                <Key frame="40" value="-22.8494" />
                                                                                <Key frame="67" value="-22.5858" />
                                                                                <Key frame="92" value="-29.4413" />
                                                                                <Key frame="111" value="-71.5415" />
                                                                                <Key frame="125" value="-57.303" />
                                                                                <Key frame="142" value="-85.9557" />
                                                                                <Key frame="160" value="-56.512" />
                                                                                <Key frame="188" value="-48.5138" />
                                                                                <Key frame="216" value="-64.598" />
                                                                                <Key frame="233" value="-44.3829" />
                                                                                <Key frame="247" value="-22.7616" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-61.7903" />
                                                                                <Key frame="40" value="-62.2297" />
                                                                                <Key frame="67" value="-61.7903" />
                                                                                <Key frame="92" value="-75.4135" />
                                                                                <Key frame="111" value="-54.4953" />
                                                                                <Key frame="125" value="-59.3293" />
                                                                                <Key frame="142" value="-89.2125" />
                                                                                <Key frame="160" value="-53.9679" />
                                                                                <Key frame="188" value="-58.0109" />
                                                                                <Key frame="216" value="-49.046" />
                                                                                <Key frame="233" value="-77.5229" />
                                                                                <Key frame="247" value="-73.3041" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="40" value="0.108026" />
                                                                                <Key frame="92" value="0.109117" />
                                                                                <Key frame="111" value="0.109117" />
                                                                                <Key frame="125" value="0.436364" />
                                                                                <Key frame="188" value="0.114208" />
                                                                                <Key frame="216" value="0.110572" />
                                                                                <Key frame="233" value="0.390909" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="82.3521" />
                                                                                <Key frame="40" value="84.5494" />
                                                                                <Key frame="67" value="83.1432" />
                                                                                <Key frame="92" value="86.9225" />
                                                                                <Key frame="111" value="67.5863" />
                                                                                <Key frame="125" value="38.4063" />
                                                                                <Key frame="142" value="64.3343" />
                                                                                <Key frame="160" value="76.1118" />
                                                                                <Key frame="188" value="84.1979" />
                                                                                <Key frame="216" value="54.4905" />
                                                                                <Key frame="233" value="57.4788" />
                                                                                <Key frame="247" value="84.901" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="1.40386" />
                                                                                <Key frame="40" value="5.97423" />
                                                                                <Key frame="67" value="2.19489" />
                                                                                <Key frame="92" value="4.65586" />
                                                                                <Key frame="111" value="1.49176" />
                                                                                <Key frame="125" value="1.0523" />
                                                                                <Key frame="142" value="1.0523" />
                                                                                <Key frame="160" value="2.107" />
                                                                                <Key frame="188" value="1.14019" />
                                                                                <Key frame="216" value="1.0523" />
                                                                                <Key frame="233" value="1.0523" />
                                                                                <Key frame="247" value="1.14019" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="40" value="-7.20953" />
                                                                                <Key frame="92" value="-11.692" />
                                                                                <Key frame="111" value="-65" />
                                                                                <Key frame="125" value="-54" />
                                                                                <Key frame="188" value="-5.89115" />
                                                                                <Key frame="216" value="-7.82477" />
                                                                                <Key frame="233" value="-46" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="56.9562" />
                                                                                <Key frame="36" value="89.5017" />
                                                                                <Key frame="43" value="89.5017" />
                                                                                <Key frame="53" value="62.845" />
                                                                                <Key frame="63" value="75.853" />
                                                                                <Key frame="72" value="75.9409" />
                                                                                <Key frame="81" value="56" />
                                                                                <Key frame="88" value="69.6126" />
                                                                                <Key frame="107" value="88.9488" />
                                                                                <Key frame="121" value="61.0872" />
                                                                                <Key frame="138" value="89.0367" />
                                                                                <Key frame="150" value="82.7085" />
                                                                                <Key frame="166" value="54.0558" />
                                                                                <Key frame="184" value="77.8745" />
                                                                                <Key frame="196" value="78.6655" />
                                                                                <Key frame="212" value="75.4135" />
                                                                                <Key frame="229" value="73" />
                                                                                <Key frame="243" value="37.6201" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="99.6668" />
                                                                                <Key frame="36" value="29.7929" />
                                                                                <Key frame="43" value="17.0486" />
                                                                                <Key frame="53" value="21.3553" />
                                                                                <Key frame="63" value="3.51326" />
                                                                                <Key frame="72" value="-2.99072" />
                                                                                <Key frame="88" value="70.3989" />
                                                                                <Key frame="107" value="46.9318" />
                                                                                <Key frame="121" value="65.6527" />
                                                                                <Key frame="138" value="47.6349" />
                                                                                <Key frame="150" value="42.4493" />
                                                                                <Key frame="166" value="82.0885" />
                                                                                <Key frame="184" value="43.6798" />
                                                                                <Key frame="196" value="32.3418" />
                                                                                <Key frame="212" value="61.9613" />
                                                                                <Key frame="229" value="76.1118" />
                                                                                <Key frame="243" value="62.4886" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="36" value="0.527273" />
                                                                                <Key frame="43" value="0.507662" />
                                                                                <Key frame="63" value="0.545455" />
                                                                                <Key frame="88" value="0.522207" />
                                                                                <Key frame="121" value="0.272727" />
                                                                                <Key frame="150" value="0.272727" />
                                                                                <Key frame="184" value="0.690909" />
                                                                                <Key frame="212" value="0.509091" />
                                                                                <Key frame="229" value="0.511662" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="37.6201" />
                                                                                <Key frame="36" value="-35.0664" />
                                                                                <Key frame="43" value="-43.0645" />
                                                                                <Key frame="53" value="-58.4456" />
                                                                                <Key frame="63" value="-79.7154" />
                                                                                <Key frame="72" value="-81.3853" />
                                                                                <Key frame="88" value="-15.4665" />
                                                                                <Key frame="107" value="45.794" />
                                                                                <Key frame="121" value="53.4406" />
                                                                                <Key frame="138" value="50.3644" />
                                                                                <Key frame="150" value="64.7786" />
                                                                                <Key frame="166" value="0.441863" />
                                                                                <Key frame="184" value="-32.0781" />
                                                                                <Key frame="196" value="-40.5157" />
                                                                                <Key frame="212" value="-24.871" />
                                                                                <Key frame="229" value="58.4504" />
                                                                                <Key frame="243" value="87.3668" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-2.63916" />
                                                                                <Key frame="36" value="-40.1689" />
                                                                                <Key frame="43" value="-43.5088" />
                                                                                <Key frame="53" value="-35.5107" />
                                                                                <Key frame="63" value="-28.6551" />
                                                                                <Key frame="72" value="-28.6551" />
                                                                                <Key frame="88" value="-5.80326" />
                                                                                <Key frame="107" value="-0.705538" />
                                                                                <Key frame="121" value="-0.529755" />
                                                                                <Key frame="138" value="-0.498473" />
                                                                                <Key frame="150" value="-1.76024" />
                                                                                <Key frame="166" value="-19.2507" />
                                                                                <Key frame="184" value="-21.2722" />
                                                                                <Key frame="196" value="-26.4578" />
                                                                                <Key frame="212" value="-25.1394" />
                                                                                <Key frame="229" value="-12.1315" />
                                                                                <Key frame="243" value="-2.11181" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="36" value="52" />
                                                                                <Key frame="43" value="50.6232" />
                                                                                <Key frame="63" value="71" />
                                                                                <Key frame="88" value="70.1352" />
                                                                                <Key frame="121" value="71.8051" />
                                                                                <Key frame="150" value="59" />
                                                                                <Key frame="184" value="54" />
                                                                                <Key frame="212" value="61" />
                                                                                <Key frame="229" value="61.5218" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="367" y="19">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="10" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="armsNotUnderstood0" index="70">
                                                            <Diagram>
                                                                <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="129" y="39">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris2_arms" id="2" localization="8" tooltip="Y a trop de bruit ici!" x="299" y="53">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="58" size="58">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-48.0744" />
                                                                                <Key frame="33" value="-71" />
                                                                                <Key frame="41" value="-78" />
                                                                                <Key frame="54" value="-37.791" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-27.2488" />
                                                                                <Key frame="33" value="-109.515" />
                                                                                <Key frame="41" value="-77" />
                                                                                <Key frame="54" value="-86" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="0.305455" />
                                                                                <Key frame="33" value="0.690909" />
                                                                                <Key frame="54" value="0.013481" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="67.1469" />
                                                                                <Key frame="33" value="54.3147" />
                                                                                <Key frame="54" value="98.2605" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="1.14019" />
                                                                                <Key frame="33" value="17" />
                                                                                <Key frame="54" value="5.53477" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="19" value="-2.11181" />
                                                                                <Key frame="33" value="-57.1" />
                                                                                <Key frame="54" value="-4.3091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="88.4215" />
                                                                                <Key frame="29" value="69.8763" />
                                                                                <Key frame="37" value="76" />
                                                                                <Key frame="50" value="42.1904" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="37.3516" />
                                                                                <Key frame="29" value="117.685" />
                                                                                <Key frame="37" value="81" />
                                                                                <Key frame="50" value="61" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="0.325455" />
                                                                                <Key frame="29" value="0.663636" />
                                                                                <Key frame="50" value="0.0211173" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="50.4523" />
                                                                                <Key frame="29" value="47.1124" />
                                                                                <Key frame="50" value="89.9156" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-0.498473" />
                                                                                <Key frame="29" value="-17" />
                                                                                <Key frame="50" value="-9.40682" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="1.57965" />
                                                                                <Key frame="29" value="26" />
                                                                                <Key frame="50" value="2.63435" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="444" y="51">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="armsNotUnderstood1" index="80">
                                                            <Diagram>
                                                                <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="153" y="58">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris11_arms" id="2" localization="8" tooltip="Essaye de me parler plus clairement." x="316" y="55">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="67" size="67">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="-38.2305" />
                                                                                <Key frame="32" value="-84.4615" />
                                                                                <Key frame="46" value="-81.2096" />
                                                                                <Key frame="64" value="-28.5624" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="-109.076" />
                                                                                <Key frame="32" value="-46.0577" />
                                                                                <Key frame="46" value="-101.957" />
                                                                                <Key frame="64" value="-68.1185" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="0.125481" />
                                                                                <Key frame="32" value="0.125481" />
                                                                                <Key frame="46" value="0.125481" />
                                                                                <Key frame="64" value="0.125481" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="85.1647" />
                                                                                <Key frame="32" value="66.3558" />
                                                                                <Key frame="46" value="62.6644" />
                                                                                <Key frame="64" value="81.9127" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="13.2692" />
                                                                                <Key frame="32" value="7.99574" />
                                                                                <Key frame="46" value="5.62267" />
                                                                                <Key frame="64" value="0.498473" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="-2.72705" />
                                                                                <Key frame="32" value="-1.67235" />
                                                                                <Key frame="46" value="-2.90283" />
                                                                                <Key frame="64" value="-0.79343" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="81.0386" />
                                                                                <Key frame="28" value="57.3078" />
                                                                                <Key frame="42" value="80.5991" />
                                                                                <Key frame="60" value="29.8856" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="43.7677" />
                                                                                <Key frame="28" value="51.1506" />
                                                                                <Key frame="42" value="115.312" />
                                                                                <Key frame="60" value="70.3989" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="0.0556627" />
                                                                                <Key frame="28" value="0.0556627" />
                                                                                <Key frame="42" value="0.0556627" />
                                                                                <Key frame="60" value="0.0560264" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="77.1713" />
                                                                                <Key frame="28" value="29.3582" />
                                                                                <Key frame="42" value="44.6514" />
                                                                                <Key frame="60" value="85.0816" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-10.7252" />
                                                                                <Key frame="28" value="-0.498473" />
                                                                                <Key frame="42" value="-5.53958" />
                                                                                <Key frame="60" value="-2.11181" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-11.4283" />
                                                                                <Key frame="28" value="-9.49471" />
                                                                                <Key frame="42" value="-7.91266" />
                                                                                <Key frame="60" value="-7.64898" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="470" y="59">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="armsNotUnderstood2" index="90">
                                                            <Diagram>
                                                                <Box name="activeArms" id="1" localization="8" tooltip="activeArms" x="157" y="56">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate arms" )
        if( p == 1 ):
            self.armsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="armsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris15_arms" id="2" localization="8" tooltip="Je t&apos;entends pas bien." x="290" y="54">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="52" size="52">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="-31.3749" />
                                                                                <Key frame="33" value="-31.1992" />
                                                                                <Key frame="48" value="-30.6718" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="-80.0718" />
                                                                                <Key frame="33" value="-78.5776" />
                                                                                <Key frame="48" value="-67.3275" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="0.125844" />
                                                                                <Key frame="33" value="0.125844" />
                                                                                <Key frame="48" value="0.125844" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="90.9655" />
                                                                                <Key frame="33" value="85.8678" />
                                                                                <Key frame="48" value="87.0983" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="4.91953" />
                                                                                <Key frame="33" value="5.09532" />
                                                                                <Key frame="48" value="2.98591" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="18" value="0.788621" />
                                                                                <Key frame="33" value="0.876513" />
                                                                                <Key frame="48" value="1.49176" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="64.6028" />
                                                                                <Key frame="29" value="25.1394" />
                                                                                <Key frame="44" value="27.5125" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="17.9275" />
                                                                                <Key frame="29" value="61.2581" />
                                                                                <Key frame="44" value="54.9299" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="0.272727" />
                                                                                <Key frame="29" value="0.745455" />
                                                                                <Key frame="44" value="0.26" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="57.2199" />
                                                                                <Key frame="29" value="71.4584" />
                                                                                <Key frame="44" value="81.6538" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-1.67235" />
                                                                                <Key frame="29" value="-17.2292" />
                                                                                <Key frame="44" value="-2.55126" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="14" value="-5.18802" />
                                                                                <Key frame="29" value="-33" />
                                                                                <Key frame="44" value="-5.10012" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="gotoTimeline" id="3" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="447" y="60">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <BehaviorLayer name="legs_">
                                                        <BehaviorKeyframe name="end" index="1" bitmap="media/images/box/movement/move_leg.png">
                                                            <Diagram>
                                                                <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="129" y="50">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="45">
                                                                    <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="4.83164" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-8.96255" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="19.6902" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="12.1315" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-19.6853" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-5.10012" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="2.46337" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="21.9705" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-7.29261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-4.39218" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="424" y="44">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="legsEnd" index="10" bitmap="media/images/box/movement/move_leg.png">
                                                            <Diagram>
                                                                <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="129" y="50">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="295" y="45">
                                                                    <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="31" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="4.83164" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-8.96255" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="19.6902" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="12.1315" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-19.6853" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-5.10012" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="2.46337" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="21.9705" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-7.29261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="25" value="-4.39218" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="legsBodyTalk" index="20" bitmap="media/images/box/movement/move_leg.png">
                                                            <Diagram>
                                                                <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="127" y="51">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p=self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="RandomIntMod" id="2" localization="8" tooltip="Generate a random number between 0 and a max number." x="424" y="74">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(0, len(self.aShuffled)), i)
            func = getattr( self, "output_" + str(self.aShuffled[self.nIndex]) )
            func()
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 0, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            func = getattr( self, "output_" + str(nVal) )
            func()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                    <Output name="output_0" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="output_3" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="output_4" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="output_5" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="max" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="9" />
                                                                    <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="10" />
                                                                </Box>
                                                                <Box name="Anim_bodytalkLegs2" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="782" y="170">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="4.66067" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-2.72705" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="15.3786" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="1.14019" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-16.3455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="13.0935" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="14.6803" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-16.9655" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-5.18802" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalkLegs1" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="782" y="74">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-13.0935" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="14.6803" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="16.9655" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-16.3455" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-5.18802" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="4.66067" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="2.72705" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="15.3786" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-1.14019" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalkLegs4" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="784" y="365">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="7.55628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-8.78677" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="4.39699" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="9.84628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-21.5311" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="1.14019" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.18802" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.45169" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="3.1617" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-5.44688" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.10012" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalkLegs3" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="784" y="268">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-9.31412" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="11.8678" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="10.6373" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-16.6091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-4.13332" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="4.66067" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="7.03374" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="13.5329" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-7.3805" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalkLegs5" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="785" y="463">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-5.18802" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-5.97423" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="13.0983" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="9.23104" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-20.9158" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="12.4782" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-1.66754" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.3638" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="13.9724" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-7.90785" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="8.35212" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Anim_bodytalkLegs6" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="785" y="560">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="0.70073" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-4.2164" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="2.11181" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="6.59428" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-22.8494" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="13.2692" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="5.62747" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="4.3091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="13.6208" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-4.65586" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="75" value="-2.28278" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="8" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="--EMPTY--" index="30">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="legsTactileSensorExplanation" index="50">
                                                            <Diagram>
                                                                <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="90" y="20">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_helpTactilExplain_legs" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="245" y="15">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="250" size="250">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="7.81996" />
                                                                                <Key frame="90" value="9.40201" />
                                                                                <Key frame="123" value="4.48007" />
                                                                                <Key frame="152" value="5.00742" />
                                                                                <Key frame="186" value="9.31412" />
                                                                                <Key frame="214" value="3.51326" />
                                                                                <Key frame="231" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="-1.31597" />
                                                                                <Key frame="90" value="-0.876513" />
                                                                                <Key frame="123" value="-3.86483" />
                                                                                <Key frame="152" value="-6.06212" />
                                                                                <Key frame="186" value="-3.86483" />
                                                                                <Key frame="214" value="-6.50158" />
                                                                                <Key frame="231" value="-7.64418" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="15.4713" />
                                                                                <Key frame="90" value="13.5377" />
                                                                                <Key frame="123" value="18.3718" />
                                                                                <Key frame="152" value="17.1413" />
                                                                                <Key frame="186" value="9.05525" />
                                                                                <Key frame="214" value="18.8991" />
                                                                                <Key frame="231" value="18.1081" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="1.93602" />
                                                                                <Key frame="90" value="1.67235" />
                                                                                <Key frame="123" value="4.83645" />
                                                                                <Key frame="152" value="7.82477" />
                                                                                <Key frame="186" value="3.51807" />
                                                                                <Key frame="214" value="8.61579" />
                                                                                <Key frame="231" value="10.4615" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="-18.5428" />
                                                                                <Key frame="90" value="-21.0037" />
                                                                                <Key frame="123" value="-21.1795" />
                                                                                <Key frame="152" value="-21.1795" />
                                                                                <Key frame="186" value="-23.201" />
                                                                                <Key frame="214" value="-21.7069" />
                                                                                <Key frame="231" value="-19.3338" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="-5.01223" />
                                                                                <Key frame="90" value="-5.18802" />
                                                                                <Key frame="123" value="-5.18802" />
                                                                                <Key frame="152" value="-5.18802" />
                                                                                <Key frame="186" value="-5.18802" />
                                                                                <Key frame="214" value="-5.18802" />
                                                                                <Key frame="231" value="-5.18802" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="7.64898" />
                                                                                <Key frame="90" value="8.79158" />
                                                                                <Key frame="123" value="6.50639" />
                                                                                <Key frame="152" value="6.06693" />
                                                                                <Key frame="186" value="10.8131" />
                                                                                <Key frame="214" value="4.74856" />
                                                                                <Key frame="231" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="6.68218" />
                                                                                <Key frame="90" value="6.15482" />
                                                                                <Key frame="123" value="5.97904" />
                                                                                <Key frame="152" value="3.69386" />
                                                                                <Key frame="186" value="4.04542" />
                                                                                <Key frame="214" value="4.57277" />
                                                                                <Key frame="231" value="1.32078" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="14.7634" />
                                                                                <Key frame="90" value="13.7966" />
                                                                                <Key frame="123" value="15.2908" />
                                                                                <Key frame="152" value="15.5544" />
                                                                                <Key frame="186" value="6.94104" />
                                                                                <Key frame="214" value="17.6638" />
                                                                                <Key frame="231" value="18.0154" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="-9.66569" />
                                                                                <Key frame="90" value="-8.96255" />
                                                                                <Key frame="123" value="-8.61098" />
                                                                                <Key frame="152" value="-5.18321" />
                                                                                <Key frame="186" value="-5.00742" />
                                                                                <Key frame="214" value="-6.41369" />
                                                                                <Key frame="231" value="-2.63435" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="45" value="-4.39218" />
                                                                                <Key frame="90" value="-4.48007" />
                                                                                <Key frame="123" value="-4.48007" />
                                                                                <Key frame="152" value="-4.48007" />
                                                                                <Key frame="186" value="-4.48007" />
                                                                                <Key frame="214" value="-4.48007" />
                                                                                <Key frame="231" value="-4.39218" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="legsNotUnderstood0" index="70">
                                                            <Diagram>
                                                                <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="107" y="38">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris2_legs" id="2" localization="8" tooltip="Y a trop de bruit ici!" x="268" y="39">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="58" size="58">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="3.24959" />
                                                                                <Key frame="31" value="1.84332" />
                                                                                <Key frame="52" value="2.37067" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-9.31412" />
                                                                                <Key frame="31" value="-4.48007" />
                                                                                <Key frame="52" value="-4.56797" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="14.3288" />
                                                                                <Key frame="31" value="15.2077" />
                                                                                <Key frame="52" value="15.2077" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="10.901" />
                                                                                <Key frame="31" value="4.22121" />
                                                                                <Key frame="52" value="4.3091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-13.7966" />
                                                                                <Key frame="31" value="-14.4118" />
                                                                                <Key frame="52" value="-14.2361" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-4.57277" />
                                                                                <Key frame="31" value="-4.92434" />
                                                                                <Key frame="52" value="-4.83645" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="3.2544" />
                                                                                <Key frame="31" value="2.11181" />
                                                                                <Key frame="52" value="2.28759" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="2.1997" />
                                                                                <Key frame="31" value="7.29742" />
                                                                                <Key frame="52" value="7.20953" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="15.3786" />
                                                                                <Key frame="31" value="15.2029" />
                                                                                <Key frame="52" value="15.3786" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-0.876513" />
                                                                                <Key frame="31" value="-7.64418" />
                                                                                <Key frame="52" value="-7.90785" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-5.00742" />
                                                                                <Key frame="31" value="-5.00742" />
                                                                                <Key frame="52" value="-5.00742" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="legsNotUnderstood1" index="80">
                                                            <Diagram>
                                                                <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="107" y="37">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris11_legs" id="2" localization="8" tooltip="Essaye de me parler plus clairement." x="276" y="37">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="67" size="67">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="3.33748" />
                                                                                <Key frame="44" value="2.81013" />
                                                                                <Key frame="62" value="5.09532" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="-6.85315" />
                                                                                <Key frame="44" value="-5.53477" />
                                                                                <Key frame="62" value="-8.17153" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="17.4929" />
                                                                                <Key frame="44" value="21.7996" />
                                                                                <Key frame="62" value="19.0749" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="7.91266" />
                                                                                <Key frame="44" value="6.4185" />
                                                                                <Key frame="62" value="10.5494" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="-21.5311" />
                                                                                <Key frame="44" value="-21.1795" />
                                                                                <Key frame="62" value="-21.619" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="-4.83645" />
                                                                                <Key frame="44" value="-4.83645" />
                                                                                <Key frame="62" value="-4.83645" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="3.16651" />
                                                                                <Key frame="44" value="2.46337" />
                                                                                <Key frame="62" value="3.07861" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="6.68218" />
                                                                                <Key frame="44" value="10.901" />
                                                                                <Key frame="62" value="7.64898" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="17.5759" />
                                                                                <Key frame="44" value="21.3553" />
                                                                                <Key frame="62" value="20.8279" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="-7.46839" />
                                                                                <Key frame="44" value="-14.0603" />
                                                                                <Key frame="62" value="-9.05044" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="16" value="-5.00742" />
                                                                                <Key frame="44" value="-4.74375" />
                                                                                <Key frame="62" value="-4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="legsNotUnderstood2" index="90">
                                                            <Diagram>
                                                                <Box name="activeLegs" id="1" localization="8" tooltip="activeLegs" x="107" y="37">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate legs" )
        if( p == 1 ):
            self.legsOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="legsOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris15_legs" id="2" localization="8" tooltip="Je t&apos;entends pas bien." x="277" y="43">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="52" size="52">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="0.437054" />
                                                                                <Key frame="46" value="1.66754" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="-7.64418" />
                                                                                <Key frame="46" value="-6.85315" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="21.9753" />
                                                                                <Key frame="46" value="17.7565" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="9.31893" />
                                                                                <Key frame="46" value="7.20953" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="-17.0486" />
                                                                                <Key frame="46" value="-17.4002" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="-5.18802" />
                                                                                <Key frame="46" value="-5.10012" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="1.49656" />
                                                                                <Key frame="46" value="2.81494" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="7.4732" />
                                                                                <Key frame="46" value="8.00055" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="20.3006" />
                                                                                <Key frame="46" value="15.906" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="-9.40201" />
                                                                                <Key frame="46" value="-9.40201" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="24" value="-4.56797" />
                                                                                <Key frame="46" value="-4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <BehaviorLayer name="head_">
                                                        <BehaviorKeyframe name="end" index="1" bitmap="media/images/box/movement/move_head.png">
                                                            <Diagram>
                                                                <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="113" y="27">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="271" y="18">
                                                                    <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="-11.1647" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="-0.441863" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="406" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="headDown" index="10" bitmap="media/images/box/movement/move_head.png">
                                                            <Diagram>
                                                                <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="113" y="27">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="StandUp" id="2" localization="8" tooltip='Robot will go to the position &quot;StandUp&#x0A;Position description : &#x0A;' x="271" y="18">
                                                                    <bitmap>media/images/positions/StandUp_1.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="31">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="22.4979" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="31" value="-1.58446" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="--EMPTY--" index="20">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="--EMPTY--_copy" index="30">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="headCheck" index="40" bitmap="media/images/box/movement/move_head.png">
                                                            <Diagram>
                                                                <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="88" y="32">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="headCheckRandom" id="2" localization="8" tooltip="headchecks à intervales variables" x="242" y="33">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.onStopped();
        pass

    def onInput_RandomInt_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="RandomInt_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="RandomInt" id="1" localization="8" tooltip="Generate a random number between 0 and a max number." x="142" y="26">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(0, len(self.aShuffled)), i)
            self.output_RandomValue(self.aShuffled[self.nIndex])
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 0, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            self.output_RandomValue(nVal)]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                                        <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value outputted" id="3" />
                                                                                        <Parameter name="max" inherits_from_parent="0" content_type="1" value="4" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="4" />
                                                                                        <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="5" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="2" localization="8" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" x="261" y="273">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                                                        <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                    </Box>
                                                                                    <Box name="Dispatcher" id="3" localization="8" tooltip="Dispatch an event carrying an information, depending on the information. Will be tested against all the values of the table, and the matching output will be stimulated !" plugin="dispatcher_plugin" x="312" y="26">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		elif(p == self.typeConversion(3)):
			self.output_4(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <keywords>
                                                                                                <keyword>0</keyword>
                                                                                                <keyword>1</keyword>
                                                                                                <keyword>2</keyword>
                                                                                                <keyword>3</keyword>
                                                                                                <keyword></keyword>
                                                                                            </keywords>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If nothing has been matched in dispatcher." id="3" />
                                                                                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="5" />
                                                                                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="6" />
                                                                                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="7" />
                                                                                        <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="8" />
                                                                                    </Box>
                                                                                    <Box name="Anim_headCheck4" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="308">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="6" value="5.88634" />
                                                                                                    <Key frame="14" value="-7" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="6" value="-2.1997" />
                                                                                                    <Key frame="14" value="-2.72705" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_headCheck2" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="119">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="15">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="8" value="5.88634" />
                                                                                                    <Key frame="15" value="-5.01223" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="8" value="-2.1997" />
                                                                                                    <Key frame="15" value="-2.81494" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_headCheck3" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="213">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="27">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="9" value="5.88634" />
                                                                                                    <Key frame="19" value="-11" />
                                                                                                    <Key frame="27" value="-7" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="9" value="-2.1997" />
                                                                                                    <Key frame="19" value="-2.28759" />
                                                                                                    <Key frame="27" value="-2.72705" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Anim_headCheck1" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="580" y="25">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="22">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="12" value="7" />
                                                                                                    <Key frame="22" value="-7" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                                    <Key frame="12" value="-2.63916" />
                                                                                                    <Key frame="22" value="-2.81494" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="RandomInt" id="8" localization="8" tooltip="Generate a random number between 0 and a max number." x="751" y="154">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nIndex = -1
        self.aShuffled = []
        pass

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("max")
        if(self.getParameter("shuffle")):
            self.nIndex +=1
            if nMax != self.nMax or self.nIndex == self.nMax:
                if self.nIndex == self.nMax:
                    self.nIndex = 0
                self.nMax = nMax
                self.aShuffled = []
                for i in xrange(nMax):
                    self.aShuffled.insert(random.randint(1, len(self.aShuffled)), i)
            self.output_RandomValue(self.aShuffled[self.nIndex])
        else: #random is much simpler
            if nMax > 0:
                nVal = random.randint( 1, nMax - 1 )
            else: # nMax should be = 0
                nVal = 0
            self.output_RandomValue(nVal)]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                                        <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value outputted" id="3" />
                                                                                        <Parameter name="max" inherits_from_parent="0" content_type="1" value="4" default_value="10" min="0" max="1000000000" tooltip="Output will stimulate a random number (integer) between 0 and max !" id="4" />
                                                                                        <Parameter name="shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Is it a real random, or do we want to shuffle ? (meaning the box will give all the number between 0 and max before giving the same number twice)." id="5" />
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="7" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="headTactileSensorExplanation" index="50">
                                                            <Diagram>
                                                                <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="88" y="13">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_helpTactilExplain_head" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." x="234" y="20">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="250" size="250">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="22.8494" />
                                                                                <Key frame="38" value="28.914" />
                                                                                <Key frame="45" value="28.2987" />
                                                                                <Key frame="55" value="29.5016" />
                                                                                <Key frame="65" value="29.5016" />
                                                                                <Key frame="79" value="29.5016" />
                                                                                <Key frame="95" value="-8.70368" />
                                                                                <Key frame="114" value="-23.4695" />
                                                                                <Key frame="128" value="-21.0964" />
                                                                                <Key frame="145" value="-11.2525" />
                                                                                <Key frame="157" value="-22.7664" />
                                                                                <Key frame="171" value="-7" />
                                                                                <Key frame="186" value="29.5016" />
                                                                                <Key frame="203" value="29.5016" />
                                                                                <Key frame="219" value="-17.3171" />
                                                                                <Key frame="236" value="-2.1997" />
                                                                                <Key frame="250" value="-17.9323" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="-19.4265" />
                                                                                <Key frame="38" value="-27.6883" />
                                                                                <Key frame="45" value="-30.5887" />
                                                                                <Key frame="55" value="-13.4498" />
                                                                                <Key frame="65" value="-6.15482" />
                                                                                <Key frame="79" value="-1.23289" />
                                                                                <Key frame="95" value="-2.28759" />
                                                                                <Key frame="114" value="-4.48488" />
                                                                                <Key frame="128" value="-2.99072" />
                                                                                <Key frame="145" value="-6.06693" />
                                                                                <Key frame="157" value="-5.62747" />
                                                                                <Key frame="171" value="-4.3091" />
                                                                                <Key frame="186" value="-9.93417" />
                                                                                <Key frame="203" value="-13.9772" />
                                                                                <Key frame="219" value="-6.77007" />
                                                                                <Key frame="236" value="-6.77007" />
                                                                                <Key frame="250" value="-2.55126" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="headNotUnderstood0" index="70">
                                                            <Diagram>
                                                                <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="106" y="29">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris2_head" id="2" localization="8" tooltip="Y a trop de bruit ici!" x="267" y="35">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="58" size="58">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="3.6" />
                                                                                <Key frame="39" value="0" />
                                                                                <Key frame="58" value="-19.8659" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="22" value="19" />
                                                                                <Key frame="39" value="-34" />
                                                                                <Key frame="58" value="5.09532" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="headNotUnderstood1" index="80">
                                                            <Diagram>
                                                                <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="106" y="29">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris11_head" id="2" localization="8" tooltip="Essaye de me parler plus clairement." x="249" y="22">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="67" size="67">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="4.30429" />
                                                                                <Key frame="35" value="-14.6803" />
                                                                                <Key frame="49" value="-18.196" />
                                                                                <Key frame="67" value="-18.196" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="21" value="-4.39699" />
                                                                                <Key frame="35" value="-3.78175" />
                                                                                <Key frame="49" value="-0.881321" />
                                                                                <Key frame="67" value="-1.32078" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="headNotUnderstood2" index="90">
                                                            <Diagram>
                                                                <Box name="activeHeadcheck" id="1" localization="8" tooltip="activeHeadcheck" x="107" y="29">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = self.getParameter( "Activate head" )
        if( p == 1 ):
            self.eyesOk()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="eyesOk" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Anim_pasCompris15_head" id="2" localization="8" tooltip="Je t&apos;entends pas bien." x="256" y="26">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="52" size="52">
                                                                        <ActuatorList model="">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="12.5661" />
                                                                                <Key frame="40" value="3" />
                                                                                <Key frame="52" value="-17.2292" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="17" value="-22.3269" />
                                                                                <Key frame="28" value="10" />
                                                                                <Key frame="40" value="-26" />
                                                                                <Key frame="52" value="-6.85796" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <BehaviorLayer name="timeline_security">
                                                        <BehaviorKeyframe name="timelineSecurityStop" index="1" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="68" y="11">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Box name="activeMotion" id="2" localization="8" tooltip="activeMotion" x="69" y="122">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p1 = self.getParameter( "Activate arms" )
        p2 = self.getParameter( "Activate legs" )
        p3 = self.getParameter( "Activate head" )
        if( not p1 and not p2 and not p3 ):
            self.noMotion()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="noMotion" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Activate head" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="4" />
                                                                    <Parameter name="Activate arms" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="5" />
                                                                    <Parameter name="Activate legs" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Exit" id="3" localization="8" tooltip="Exit the behavior." x="194" y="122">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            ALFrameManager.exitBehavior(self.parentId)
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto" index="2" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="8">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy" index="10" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy" index="11" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="10" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy_copy" index="20" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy_copy" index="21" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="20" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy" index="30" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy" index="31" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="30" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy" index="40" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy" index="41" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="40" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy" index="50" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy" index="51" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="69" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="50" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy_copy" index="70" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy_copy" index="71" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="70" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy_copy_copy" index="80" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy_copy_copy" index="81" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="80" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityStop_copy_copy_copy_copy_copy_copy_copy_copy" index="90" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="Stop" id="1" localization="8" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." x="61" y="18">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="timelineSecurityGoto_copy_copy_copy_copy_copy_copy_copy_copy" index="91" bitmap="media/images/box/box-timeLine.png">
                                                            <Diagram>
                                                                <Box name="gotoTimeline" id="1" localization="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." x="70" y="10">
                                                                    <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.getParentTimeline().goTo(self.getParameter("frame number"))
        try:
            self.getParentTimeline().pause()
        except:
            pass

    def onInput_onStop(self):
        ""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" />
                                                                    <Parameter name="frame number" inherits_from_parent="0" content_type="1" value="90" default_value="1" min="0" max="10000" tooltip="" id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Máš rád čokoládu? ",
			"Danish" : " Kan du lide chokolade? ",
			"German" : " Mögen Sie Schokolade? ",
			"Greek" : "  ",
			"English" : " would you like to play another round with this poor guy?? ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"French" : " Aimes-tu le chocolat ? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Dutch" : " Hou je van chocolade? ",
			"Norwegian" : "  ",
			"Polish" : " Lubisz czekoladę? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Russian" : " Вы любите шоколад? ",
			"Swedish" : " Gillar du choklad? ",
			"Turkish" : " Çikolata sever misin? ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Máš rád čokoládu?]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Kan du lide chokolade?]]>
</danish>
                                                    <german>
                                                        <![CDATA[Mögen Sie Schokolade?]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[would you like to play another round with this poor guy??]]>
</english>
                                                    <spanish>
                                                        <![CDATA[¿Te gusta el chocolate?]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Pidätkö suklaasta?]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Aimes-tu le chocolat ?]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ti piace il cioccolato?]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[チョコレートが好きですか]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[당신은 초콜렛을 좋아합니까?]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hou je van chocolade?]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Lubisz czekoladę?]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Você gosta de chocolate?]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Gostas de chocolate?]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Вы любите шоколад?]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Gillar du choklad?]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Çikolata sever misin?]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="7" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say (5)" id="10" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1177" y="172">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " ehhh what does it matter.... i lost......AGAIN! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[ehhh what does it matter.... i lost......AGAIN!]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>8</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Delay (2)" id="43" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="1675" y="32">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Say (4)" id="23" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1959" y="26">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " About time...\n\ni may be drunk guys, but i earned some points todayy... ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[About time...

i may be drunk guys, but i earned some points todayy...]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="check_mood (1)" id="44" localization="8" tooltip="" x="1492" y="504">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If" id="5" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="499" y="59">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                                                <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                                                <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                                                <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&lt; or =" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                                    <Choice value="&lt;" />
                                                    <Choice value="&lt; or =" />
                                                    <Choice value="=" />
                                                    <Choice value="&gt; or =" />
                                                    <Choice value="&gt;" />
                                                    <Choice value="≠" />
                                                </Parameter>
                                                <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                                            </Box>
                                            <Box name="Get Data (3)" id="6" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="251" y="64">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="sad" id="7" localization="8" tooltip="Enter description here" x="708" y="195">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="Say_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Joy dialogues" id="5" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="319" y="140">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>1</keyword>
                                                                            <keyword>2</keyword>
                                                                            <keyword>3</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                    <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                </Box>
                                                                <Box name="Random Int. (1)" id="7" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="145" y="112">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                                    <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                                    <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                                    <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="3" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                                    <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                                                </Box>
                                                                <Box name="Say" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="660" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " whatever.. ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[whatever..]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (1)" id="10" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="664" y="206">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Well, time to fold. What a lousy game. ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[Well, time to fold. What a lousy game.]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (2)" id="11" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="656" y="360">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " i want another drink.... uhhh ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[i want another drink.... uhhh]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="9" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="joy_1" id="29" localization="8" tooltip="" x="710" y="51">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Random Int." id="41" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="278" y="567">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                                    <Output name="output_RandomValue" type="0" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                                    <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                                    <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="3" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                                    <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                                                </Box>
                                                                <Box name="Joy dialogues" id="42" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="407" y="583">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>1</keyword>
                                                                            <keyword>2</keyword>
                                                                            <keyword>3</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                    <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                </Box>
                                                                <Box name="Say" id="43" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="657" y="727">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="99" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " this game is so in my favor! haha! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[this game is so in my favor! haha!]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (1)" id="44" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="660" y="494">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="99" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="92" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " we\'re doing good, huhh?? ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[we're doing good, huhh??]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (2)" id="45" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="649" y="618">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="99" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="88" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="504" y="143">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " waiter! if i win, get me a bottle of champagne! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[waiter! if i win, get me a bottle of champagne!]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Timeline" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="830" y="313">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="38">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-8.96736" />
                                                                                <Key frame="20" value="-8.96736" />
                                                                                <Key frame="27" value="-8.96736" />
                                                                                <Key frame="38" value="-8.96736" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="0.612832" />
                                                                                <Key frame="20" value="0.612832" />
                                                                                <Key frame="27" value="0.612832" />
                                                                                <Key frame="38" value="1.22808" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="5.44688" />
                                                                                <Key frame="20" value="5.44688" />
                                                                                <Key frame="27" value="5.44688" />
                                                                                <Key frame="38" value="5.44688" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-7.55628" />
                                                                                <Key frame="20" value="-7.55628" />
                                                                                <Key frame="27" value="-7.55628" />
                                                                                <Key frame="38" value="-7.55628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-13.6208" />
                                                                                <Key frame="20" value="-13.6208" />
                                                                                <Key frame="27" value="-13.6208" />
                                                                                <Key frame="38" value="-13.6208" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-73.7436" />
                                                                                <Key frame="20" value="-73.7436" />
                                                                                <Key frame="27" value="-73.7436" />
                                                                                <Key frame="38" value="-73.7436" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="10" value="0.0288" />
                                                                                <Key frame="20" value="0.0288" />
                                                                                <Key frame="27" value="0.0288" />
                                                                                <Key frame="38" value="0.0288" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="7.64898" />
                                                                                <Key frame="20" value="7.64898" />
                                                                                <Key frame="27" value="7.64898" />
                                                                                <Key frame="38" value="7.64898" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="5.53958" />
                                                                                <Key frame="20" value="5.53958" />
                                                                                <Key frame="27" value="5.53958" />
                                                                                <Key frame="38" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-9.92936" />
                                                                                <Key frame="20" value="-9.92936" />
                                                                                <Key frame="27" value="-9.92936" />
                                                                                <Key frame="38" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-5.10013" />
                                                                                <Key frame="20" value="-5.10013" />
                                                                                <Key frame="27" value="-5.10013" />
                                                                                <Key frame="38" value="-5.10013" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="16.697" />
                                                                                <Key frame="20" value="16.697" />
                                                                                <Key frame="27" value="16.697" />
                                                                                <Key frame="38" value="16.697" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-15.8229" />
                                                                                <Key frame="20" value="-15.8229" />
                                                                                <Key frame="27" value="-15.8229" />
                                                                                <Key frame="38" value="-15.8229" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-18.0202" />
                                                                                <Key frame="20" value="-18.0202" />
                                                                                <Key frame="27" value="-18.0202" />
                                                                                <Key frame="38" value="-18.0202" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="5.01224" />
                                                                                <Key frame="20" value="5.01224" />
                                                                                <Key frame="27" value="5.01224" />
                                                                                <Key frame="38" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="7.12163" />
                                                                                <Key frame="20" value="7.12163" />
                                                                                <Key frame="27" value="7.12163" />
                                                                                <Key frame="38" value="7.12163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="88.5" />
                                                                                <Key frame="20" value="34.456" />
                                                                                <Key frame="27" value="81.3901" />
                                                                                <Key frame="38" value="18.0202" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="73.0356" />
                                                                                <Key frame="20" value="73.0356" />
                                                                                <Key frame="27" value="73.0356" />
                                                                                <Key frame="38" value="73.6509" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="10" value="0.3116" />
                                                                                <Key frame="20" value="0.3116" />
                                                                                <Key frame="27" value="0.3116" />
                                                                                <Key frame="38" value="0.3116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="7.11683" />
                                                                                <Key frame="20" value="7.11683" />
                                                                                <Key frame="27" value="7.11683" />
                                                                                <Key frame="38" value="7.11683" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-5.35899" />
                                                                                <Key frame="20" value="-5.35899" />
                                                                                <Key frame="27" value="-5.35899" />
                                                                                <Key frame="38" value="-5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-9.92936" />
                                                                                <Key frame="20" value="-9.92936" />
                                                                                <Key frame="27" value="-9.92936" />
                                                                                <Key frame="38" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="-5.00743" />
                                                                                <Key frame="20" value="-5.00743" />
                                                                                <Key frame="27" value="-5.00743" />
                                                                                <Key frame="38" value="-5.00743" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="57.4836" />
                                                                                <Key frame="20" value="83.4996" />
                                                                                <Key frame="27" value="70.3158" />
                                                                                <Key frame="38" value="85.1695" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="3.68905" />
                                                                                <Key frame="20" value="0.964409" />
                                                                                <Key frame="27" value="6.50159" />
                                                                                <Key frame="38" value="-2.72705" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="10" value="21.3553" />
                                                                                <Key frame="20" value="8.17153" />
                                                                                <Key frame="27" value="12.654" />
                                                                                <Key frame="38" value="12.654" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Timeline (1)" id="51" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="854" y="572">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="76">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-8.96736" />
                                                                                <Key frame="39" value="-8.96736" />
                                                                                <Key frame="53" value="-9.58261" />
                                                                                <Key frame="65" value="-9.58261" />
                                                                                <Key frame="76" value="-9.58261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="0.612832" />
                                                                                <Key frame="39" value="67.4984" />
                                                                                <Key frame="53" value="-61.4387" />
                                                                                <Key frame="65" value="-5.45169" />
                                                                                <Key frame="76" value="-5.45169" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="5.2711" />
                                                                                <Key frame="39" value="5.2711" />
                                                                                <Key frame="53" value="5.2711" />
                                                                                <Key frame="65" value="5.2711" />
                                                                                <Key frame="76" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-7.55628" />
                                                                                <Key frame="39" value="-7.55628" />
                                                                                <Key frame="53" value="-7.55628" />
                                                                                <Key frame="65" value="-7.55628" />
                                                                                <Key frame="76" value="-7.55628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-13.8845" />
                                                                                <Key frame="39" value="-13.8845" />
                                                                                <Key frame="53" value="-13.8845" />
                                                                                <Key frame="65" value="-13.8845" />
                                                                                <Key frame="76" value="-13.8845" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-73.6557" />
                                                                                <Key frame="39" value="-73.6557" />
                                                                                <Key frame="53" value="-73.6557" />
                                                                                <Key frame="65" value="-73.6557" />
                                                                                <Key frame="76" value="-73.6557" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="24" value="0.028" />
                                                                                <Key frame="39" value="0.028" />
                                                                                <Key frame="53" value="0.028" />
                                                                                <Key frame="65" value="0.028" />
                                                                                <Key frame="76" value="0.028" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="7.64898" />
                                                                                <Key frame="39" value="7.64898" />
                                                                                <Key frame="53" value="7.64898" />
                                                                                <Key frame="65" value="7.64898" />
                                                                                <Key frame="76" value="7.64898" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="5.53958" />
                                                                                <Key frame="39" value="5.53958" />
                                                                                <Key frame="53" value="5.53958" />
                                                                                <Key frame="65" value="5.53958" />
                                                                                <Key frame="76" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="53" value="-9.92936" />
                                                                                <Key frame="65" value="-9.92936" />
                                                                                <Key frame="76" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-5.10013" />
                                                                                <Key frame="39" value="-5.10013" />
                                                                                <Key frame="53" value="-5.10013" />
                                                                                <Key frame="65" value="-5.10013" />
                                                                                <Key frame="76" value="-5.10013" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="16.697" />
                                                                                <Key frame="39" value="16.697" />
                                                                                <Key frame="53" value="16.697" />
                                                                                <Key frame="65" value="16.697" />
                                                                                <Key frame="76" value="16.697" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-15.9108" />
                                                                                <Key frame="39" value="-15.9108" />
                                                                                <Key frame="53" value="-16.5261" />
                                                                                <Key frame="65" value="-16.5261" />
                                                                                <Key frame="76" value="-16.5261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-17.7565" />
                                                                                <Key frame="39" value="-17.7565" />
                                                                                <Key frame="53" value="-17.7565" />
                                                                                <Key frame="65" value="-17.7565" />
                                                                                <Key frame="76" value="-17.7565" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="5.01224" />
                                                                                <Key frame="39" value="5.01224" />
                                                                                <Key frame="53" value="5.01224" />
                                                                                <Key frame="65" value="5.01224" />
                                                                                <Key frame="76" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="7.12163" />
                                                                                <Key frame="39" value="7.12163" />
                                                                                <Key frame="53" value="7.12163" />
                                                                                <Key frame="65" value="7.12163" />
                                                                                <Key frame="76" value="7.12163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="22.4148" />
                                                                                <Key frame="39" value="88.4215" />
                                                                                <Key frame="53" value="88.4215" />
                                                                                <Key frame="65" value="88.4215" />
                                                                                <Key frame="76" value="2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="69.3442" />
                                                                                <Key frame="39" value="76.0239" />
                                                                                <Key frame="53" value="75.0571" />
                                                                                <Key frame="65" value="75.0571" />
                                                                                <Key frame="76" value="71.2778" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="24" value="0.3116" />
                                                                                <Key frame="39" value="0.3116" />
                                                                                <Key frame="53" value="0.3116" />
                                                                                <Key frame="65" value="0.3116" />
                                                                                <Key frame="76" value="0.3116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="7.11683" />
                                                                                <Key frame="39" value="7.11683" />
                                                                                <Key frame="53" value="7.11683" />
                                                                                <Key frame="65" value="7.11683" />
                                                                                <Key frame="76" value="7.11683" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-5.35899" />
                                                                                <Key frame="39" value="-5.35899" />
                                                                                <Key frame="53" value="-5.35899" />
                                                                                <Key frame="65" value="-5.35899" />
                                                                                <Key frame="76" value="-5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="53" value="-9.92936" />
                                                                                <Key frame="65" value="-9.92936" />
                                                                                <Key frame="76" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-5.00743" />
                                                                                <Key frame="39" value="-5.00743" />
                                                                                <Key frame="53" value="-5.00743" />
                                                                                <Key frame="65" value="-5.00743" />
                                                                                <Key frame="76" value="-5.00743" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="84.2906" />
                                                                                <Key frame="39" value="30.9403" />
                                                                                <Key frame="53" value="31.5555" />
                                                                                <Key frame="65" value="31.5555" />
                                                                                <Key frame="76" value="85.1695" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="-11.4283" />
                                                                                <Key frame="39" value="-7.82477" />
                                                                                <Key frame="53" value="-7.82477" />
                                                                                <Key frame="65" value="-7.82477" />
                                                                                <Key frame="76" value="-4.39699" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="24" value="4.91954" />
                                                                                <Key frame="39" value="27.5956" />
                                                                                <Key frame="53" value="27.5956" />
                                                                                <Key frame="65" value="27.5956" />
                                                                                <Key frame="76" value="-7.73688" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Hands_in_the_air" id="12" localization="8" tooltip="Put your hands in the air like you just don&apos;t care" x="851" y="744">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Raise_arms" id="1" localization="8" tooltip="" x="421" y="630">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="50">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.49471" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-0.969218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-32.166" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-63.1087" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="50" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="5.53478" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-66.888" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="18.8943" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-35.9501" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="32.166" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="63.1087" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="50" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-5.53478" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-66.888" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-18.8943" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="35.9501" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Hands_in_the_air" id="7" localization="8" tooltip="" x="420" y="482">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-8.70368" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-0.266077" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-81.0338" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-44.3877" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.45169" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-38.6748" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="46.1408" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-49.2218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="31.9071" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="64.1586" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.2872" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.73207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.62267" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-4.56796" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-63.7191" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-19.9538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="34.8027" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter (1)" id="3" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="595" y="642">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="Raise_right_hand" id="2" localization="8" tooltip="" x="661" y="483">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-8.70368" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.266077" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-31.9071" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-64.1586" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.2872" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.73207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.62267" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-4.56796" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-63.7191" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="19.9538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-34.8027" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="81.0338" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="44.3877" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-5.45169" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-38.6748" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-46.1408" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="49.2218" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="42" indexofinput="2" outputowner="41" indexofoutput="3" />
                                                                <Link inputowner="44" indexofinput="2" outputowner="42" indexofoutput="4" />
                                                                <Link inputowner="45" indexofinput="2" outputowner="42" indexofoutput="5" />
                                                                <Link inputowner="43" indexofinput="2" outputowner="42" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="44" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="51" indexofoutput="4" />
                                                                <Link inputowner="41" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="51" indexofinput="2" outputowner="45" indexofoutput="4" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="43" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="12" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="29" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="29" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Hands" id="16" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="1124" y="17">
                            <bitmap>media/images/box/movement/move_arm.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                <Choice value="Both" />
                                <Choice value="Left" />
                                <Choice value="Right" />
                            </Parameter>
                            <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Open the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                <Choice value="Open the hand" />
                                <Choice value="Close the hand" />
                            </Parameter>
                        </Box>
                        <Box name="Stand Up (3)" id="45" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1266" y="26">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Choice (light)" id="20" localization="8" tooltip="Launch speech recognition, and wait for one of a defined number of expected answers (written in the table of the box). the robot will prompt the speaker if he cannot understand and give suggestions as to available answers and other ways of selecting your choice. e.g. The tactile sensor on his head.&#x0A;&#x0A;Note that you must open this box to enter the question text and the available answers.&#x0A;&#x0A;This is a lighter version of Choice box from standard library which has no animation embedded.&#x0A;&#x0A;V1.1.0&#x0A;" x="1626" y="360">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Choice" id="1" localization="8" tooltip="Launch the speech recognition waiting for a defined number of predicted answers (written in the table on the box). Available help&#x0A;from the robot which gives some possible answers and attracts attention on the other modalities to answer (head tactile sensor).&#x0A;&#x0A;You can edit a choice by left double-clicking on the line. You can add a choice by right clicking on a line and selecting &apos;Insert a&#x0A;row&apos;. You can delete a choice by right clicking on a line and selecting &apos;Remove a row&apos;. You can also write several alternative&#x0A;answers for the same choice by writing them on the line separated by the character &apos;/&apos;.&#x0A;Ex: apple pie / pie / apple&#x0A;Then if any of these answers (&apos;apple pie&apos;, &apos;pie&apos; or &apos;apple&apos;) are said, the corresponding output will be activated. Indeed, each output&#x0A;which name begins with &apos;output_&apos; correspond to the choice in the list placed just in front of the output.&#x0A;&#x0A;Moreover, you have advanced options appearing when you click on the blue cross. Then you can make the robot calculate the threshold&#x0A;average of choices with the 1/2/3 button. Actually, it will calculate recognition threshold of each alternative answer and put them from&#x0A;highest to smallest threshold. The threshold displayed in front of each choice then is the highest&apos;s." plugin="ui_choice_plugin" x="469" y="52">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v8.8
# @author Desktop Application team
# (c) 2011 Aldebaran Robotics

import os
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # PROXIES INITIALIZATION
        self.tts = ALProxy("ALTextToSpeech")
        self.ttsStop = ALProxy("ALTextToSpeech", True) #Create another proxy as wait is blocking if audioout is remote
        self.memory = ALProxy("ALMemory")
        try:
            self.asr = ALProxy("ALSpeechRecognition")
            self.ad = ALProxy("ALAudioDevice")
            self.player = ALProxy("ALAudioPlayer")
            self.dcm = ALProxy( "DCM" )
        except:
            self.logger.warning("cannot find ALSpeechRecognition, choice box will run in simulation mode")
            self.asr = None
            self.ad = None
            self.player = None
            self.dcm = None

        self.leds = ALProxy( "ALLeds" )
        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.aFrameNumbers = {"end" : 1,
                              "headDown" : 10,
                              "bodyTalk" : 20,
                              "reco" : 30,
                              "headCheck" : 40,
                              "helpTactileSensor" : 50,
                              "notUnderstood" : 70}
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.bBrainAnimPaused = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.
        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        self.bSeqStarted = False
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 6
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateEyesLight = True
        self.bActivateEarsLight = True
        self.bActivateBrainLight = True
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")
        self.BIND_PYTHON(self.getName(), "onWordRecognized")
        self.BIND_PYTHON(self.getName(), "onSpeechDetected")


# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        framemanager = ALProxy("ALFrameManager")
        filename = framemanager.getBehaviorPath(self.behaviorId) + self.tryGetParameter( "Sentences file", "/Aldebaran/choice_sentences.xml" )
        if not self.fileExists(filename):
            raise RuntimeError("File " + filename + " could not be found. Please update your Choice box with a newer one from Choregraphe")
        try:
            doc = self.getFileContents( filename )
            dom = xml.dom.minidom.parseString( doc )
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check the special characters and that the syntax is correct.\n" + str(e) )
        try:
            tag = "sentences"
            mainBlock = dom.getElementsByTagName( tag )[0]
            tag = "translation"
            aTranslations = mainBlock.getElementsByTagName( tag )
            self.aAllWords = {}
            self.aAllSentences = {}
            for sTranslation in aTranslations:
                sLanguage = sTranslation.getAttribute("language")
                tag = "speechReco"
                blockSpeechReco = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the speech recognition
                self.aAllWords[sLanguage] = {}
                aKinds = ["negative",
                          "positive",
                          "help",
                          "exit",
                          "repeat"]
                for sKind in aKinds:
                    tag = sKind
                    blockWordsForThisKind = blockSpeechReco.getElementsByTagName( sKind )[0]
                    self.aAllWords[sLanguage][sKind] = blockWordsForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the speech recognition
                tag = "tts"
                blockTTS = sTranslation.getElementsByTagName( tag )[0]
                # variable used for the Text-To-Speech
                self.aAllSentences[sLanguage] = {}
                aKinds = ["confirmation",
                          "enumMarks",
                          "helpEnumChoices",
                          "helpEnumDefault",
                          "helpTactile",
                          "notUnderstood",
                          "noQuestion",
                          "notUnderstoodAnims"]
                for sKind in aKinds:
                    tag = sKind
                    blockSentencesForThisKind = blockTTS.getElementsByTagName( sKind )[0]
                    self.aAllSentences[sLanguage][sKind] = blockSentencesForThisKind.getAttribute( "text" ).encode("utf-8").split("/")
                # end - variable used for the Text-To-Speech
        except Exception as e:
            raise Exception( "The " + filename + " file is not in the right format. Check that the '" + tag + "' tag is defined and with the right format.\n" + str(e) )

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["yes", "sure", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": ["ναί", "κανένα", ""], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "Norwegian": ["ja", "Nei", ""], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        if(self.asr != None):
            self.asr.setVisualExpression( False )
        language = self.tts.getLanguage()
        if(self.asr != None):
            self.asr.setLanguage( language )
        try:
            self.aAllWords[language]
            self.aAllSentences[language]
        except:
            raise Exception( "The current language is not supported by this Choice box. It is probably deprecated. Try to use the one supplied in Choregraphe library instead." )
        self.asNegativeWords = self.aAllWords[language]["negative"]
        self.asPositiveWords = self.aAllWords[language]["positive"]
        self.asHelpWords = self.aAllWords[language]["help"]
        self.asExitWords = self.aAllWords[language]["exit"]
        self.asRepeatWords = self.aAllWords[language]["repeat"]
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        self.bHasAlreadyHearingEyes = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.nFrameNumber = self.aFrameNumbers["end"]
        self.beginTime = time.time()
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 6 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateEyesLight = self.tryGetParameter( "Activate eyes light", True )
        self.bActivateEarsLight = self.tryGetParameter( "Activate ears light", True )
        self.bActivateBrainLight = self.tryGetParameter( "Activate brain light", True )
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.aDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.aDefaultChoices.append( self.asHelpWords )
        if (self.bActivateDefaultChoiceRepeat):
            self.aDefaultChoices.append( self.asRepeatWords )
        if (self.bActivateDefaultChoiceExit):
            self.aDefaultChoices.append( self.asExitWords )
        if( question == None ):
            question = ""
        self.initQuestionAndChoices( question )
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, 0.1 )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        thread.start_new_thread( self.loopLedsBrainTwinkle, () )
        while( not self.bGoOut ):
            self.questionRecognitionReaction()
        if( self.bInTactileSensorMenu ):
            self.nCountNoReply = 0
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            self.loopLedsBrainTurn()
        else:
            self.bIsRunning = False

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = "English"
            if(self.asr != None):
                language =  self.asr.getLanguage()
            self.asNegativeWords = self.aAllWords[language]["negative"]
            self.asPositiveWords = self.aAllWords[language]["positive"]
            self.asHelpWords = self.aAllWords[language]["help"]
            self.asExitWords = self.aAllWords[language]["exit"]
            self.asRepeatWords = self.aAllWords[language]["repeat"]
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aChoiceIndexes.append( index )
                index += 1

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.ttsStop.stop(idtts)
            except:
                self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        self.ttsQuestionAndRecoInit()
        if( not self.bMustStop ):
            # stop movement animation
            if( self.nFrameNumber != self.aFrameNumbers["reco"] ):
                self.nFrameNumber = self.aFrameNumbers["reco"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            # start speech recognition
            self.logger.debug( "Speech recognition started." )
            self.memory.subscribeToEvent( "WordRecognized", self.getName(), "onWordRecognized" )
            self.bRecoIsWaitingForVoice = True
            self.memory.subscribeToEvent( "SpeechDetected", self.getName(), "onSpeechDetected" )
        # leds during the recognition
        self.loopLedsReco()
        # process the reco loop break
        self.processRecoInterruption()

    def ttsQuestionAndRecoInit(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        if( not self.bInConfirmation ):
            # launch TTS
            idTTS = -1
            if( self.sQuestion != ""):
                idTTS = self.tts.post.say( self.sQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(self.sQuestion) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            if(self.asr != None):
                self.asr.setLanguage( self.tts.getLanguage() )
            if( not self.bVocabularyLoaded ):
                aWordsRecognised = []
                for i in range( len( self.aChoices ) ):
                    if( self.aChoices[i] != [] ):
                        aWordsRecognised.extend( self.aChoices[i] )
                sWordsRecognised = "You can say: "
                if( len( aWordsRecognised ) > 1 ):
                    for i in range( len( aWordsRecognised ) - 1 ):
                        sWordsRecognised += "'" + aWordsRecognised[i] + "', "
                if( len( aWordsRecognised ) > 0 ):
                    sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
                sWordsRecognised += "."
                self.logger.debug( sWordsRecognised )
                if(self.asr != None):
                    self.asr.setVocabulary( aWordsRecognised, False )
                self.bVocabularyLoaded = True
        else:
            # launch TTS
            sentence = self.aAllSentences[self.tts.getLanguage()]["confirmation"][0]
            idTTS = -1
            sentenceToSay = sentence % self.sPreviousAnswer
            if( sentenceToSay != ""):
                idTTS = self.tts.post.say( sentenceToSay )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceToSay) )
                # launch TTS movement animation
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            # prepare speech recognition
            aWordsRecognised = []
            aWordsRecognised.extend( self.asNegativeWords )
            aWordsRecognised.extend( self.asPositiveWords )
            sWordsRecognised = "You can say: "
            if( len( aWordsRecognised ) > 1 ):
                for i in range( len( aWordsRecognised ) - 1 ):
                    sWordsRecognised += "'" + aWordsRecognised[i] + "', "
            if( len( aWordsRecognised ) > 0 ):
                sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
            sWordsRecognised += "."
            self.logger.debug( sWordsRecognised )
            if(self.asr != None):
                self.asr.setVocabulary( aWordsRecognised, False )
            self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
                self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # leds noticing that the robot confirm its guessing
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                # reinitialize leds
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
        else:
            self.nCountNoReply = 0
            if( self.sRecoInterruption in [ "onStop" ] ):
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.aAllSentences[self.tts.getLanguage()]["noQuestion"][0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.tts.post.say( sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.tts.post.say( sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
                if( not self.bInTactileSensorMenu ):
                    # launch TTS movement animation
                    if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                        self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.tts.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onWordRecognized(self, pDataName, pValue, pMessage):
        "Handler for when a word is recognised by the speech recognition system."
        aState = pValue
        self.logger.debug( "The word '" + str(aState[0]) + "' has been recognised with a threshold of " + str(aState[1]) + "." )
        # interrupt loops:
            # - stop reco
            # - stop leds
            # - stop asking the question on and on
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass
        self.bRecoIsHearingOrAnalysing = False
        self.bRecoIsWaitingForVoice = False
        if( aState[0] != "" ):
            if( aState[1] >= self.rUnderstoodThreshold ):
                if( self.rUnderstoodThreshold <= self.arUnderstoodThreshold[1] - 0.02 ):
                    self.rUnderstoodThreshold += 0.02
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[1]
                if( self.bInConfirmation ):
                    if( aState[0] in self.asNegativeWords ):
                        thread.start_new_thread( self.ledsNegative, () )
                    else:
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                else:
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                self.reactionWordUnderstood( aState )
            else:
                if( self.rUnderstoodThreshold >= self.arUnderstoodThreshold[0] + 0.05 ):
                    self.rUnderstoodThreshold -= 0.05
                else:
                    self.rUnderstoodThreshold = self.arUnderstoodThreshold[0]
                aCurrentChoice = ""
                for choice in self.aChoices:
                    if( aCurrentChoice == "" ):
                        if( aState[0] in choice ):
                            aCurrentChoice = choice
                if( self.sPreviousAnswer in aCurrentChoice ): # if answer in the same choice as previously
                    # then ask confirmation
                    aState[1] = self.rConfirmationThreshold - 0.01
                    thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    self.reactionWordUnderstood( aState )
                else:
                    # else not understood
                    if( self.bInConfirmation ):
                        thread.start_new_thread( self.ledsUnderstood, (True, False) )
                    else:
                        self.sPreviousAnswer = aState[0]
                        thread.start_new_thread( self.ledsNotUnderstood, () )
                    self.reactionNothingUnderstood()
        else:
            if( self.bInConfirmation ):
                thread.start_new_thread( self.ledsUnderstood, (True, False) )
            else:
                thread.start_new_thread( self.ledsNotUnderstood, () )
            self.reactionNothingUnderstood()
        if( pMessage == "" ):
            self.sRecoInterruption = "wordRecognised"
        else:
            self.sRecoInterruption = pMessage

    def onSpeechDetected(self, pDataName, pValue, pMessage):
        "Handler for when something has been heard by the speech recognition system."
        aState = pValue
        if( aState == 1):
            if( self.bRecoIsWaitingForVoice ):
                # make eyes leds switch from an animation to an other
                self.bRecoIsHearingOrAnalysing = True
                self.bRecoIsWaitingForVoice = False
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word[0] in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word[0] in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word[0] in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word[0]
            if( word[1] >= self.rConfirmationThreshold ):
                if( self.rConfirmationThreshold <= self.arConfirmationThreshold[1] - 0.02 ):
                    self.rConfirmationThreshold += 0.02
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[1]
                if( self.sPreviousAnswer in self.asHelpWords ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
            else:
                if( self.rConfirmationThreshold >= self.arConfirmationThreshold[0] + 0.05 ):
                    self.rConfirmationThreshold -= 0.05
                else:
                    self.rConfirmationThreshold = self.arConfirmationThreshold[0]
                self.bInConfirmation = True

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.aAllSentences[self.tts.getLanguage()]["notUnderstood"][0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"]
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
                if( self.nFrameNumber != self.aFrameNumbers["notUnderstood"] + 10*index ):
                    self.nFrameNumber = self.aFrameNumbers["notUnderstood"] + 10*index
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.aAllSentences[self.tts.getLanguage()]["helpEnumChoices"]
        sentenceHelpEnumDefault = self.aAllSentences[self.tts.getLanguage()]["helpEnumDefault"]
        sentenceHelpEnumMarks = self.aAllSentences[self.tts.getLanguage()]["enumMarks"]
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.aAllSentences[self.tts.getLanguage()]["helpTactile"]
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.tts.post.say( sentence + "\\Pau=300\\" )
            else:
                idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch TTS movement animation
            if( self.bInTactileSensorMenu ):
                if( self.nFrameNumber != self.aFrameNumbers["helpTactileSensor"] ):
                    self.nFrameNumber = self.aFrameNumbers["helpTactileSensor"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
            else:
                if( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ):
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                    try:
                        self.getTimeline().goTo(self.nFrameNumber)
                    except: # if NAOqi < 1.14
                        try:
                            self.gotoAndStop(self.nFrameNumber)
                        except:
                            pass
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.tts.post.say( sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                    # launch TTS movement animation
                    listPossibleFrames = range( len( self.aAllSentences[self.tts.getLanguage()]["notUnderstoodAnims"] ) )
                    for i in range(len(listPossibleFrames)):
                        listPossibleFrames[i] = listPossibleFrames[i] * 10 + self.aFrameNumbers["notUnderstood"]
                    if( ( self.nFrameNumber != self.aFrameNumbers["bodyTalk"] ) and not ( self.nFrameNumber in listPossibleFrames ) ):
                        try:
                            self.getTimeline().goTo(self.aFrameNumbers["bodyTalk"])
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.aFrameNumbers["bodyTalk"])
                            except:
                                pass
                    self.nFrameNumber = self.aFrameNumbers["bodyTalk"]
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.tts.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDS ---------------------------------------------------------------------------------------------------

    def setLeds(self, eyesLight, earsLight, brainLight):
        "Set all LEDS (eyes, ears and brain lights)."
        rDuration = 1
        if( self.bActivateEyesLight ):
            # set eyes leds
            self.leds.post.fadeRGB( "FaceLeds", eyesLight, rDuration )
        if( self.bActivateEarsLight ):
            # set ears leds
            self.leds.fadeRGB( "EarLeds", earsLight, rDuration )
        if( self.bActivateBrainLight ):
            # set brain leds light
            self.setLedsBrain( brainLight, 500 )

    def ledsUnderstood(self, bFlashEars, bFlashBrain):
        "Sequence of LEDS for eyes, ears and brain when the robot understood what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x00FF00, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x00FF00, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            if( self.bInTactileSensorMenu ):
                self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
            else:
                self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            if( bFlashEars ):
                self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        if( self.bActivateBrainLight ):
            if( bFlashBrain ):
                self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.1 )
        if( not self.bInTactileSensorMenu ):
            self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def ledsNotUnderstood(self):
        "Sequence of LEDS for eyes and ears when the robot did not understand what it heard."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.05 )
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.3 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        self.bBrainAnimPaused = False

    def ledsNegative(self):
        "Sequence of LEDS for eyes and ears when the robot understood 'no'."
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFF0000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0xFF0000, rDuration )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration )
        if( self.bActivateEarsLight ):
            self.leds.fadeRGB( "EarLeds", 0x000000, rDuration )
        time.sleep( 0.1 )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        time.sleep( 0.1 )
        self.bBrainAnimPaused = False

    def loopLedsReco(self):
        "LEDS (eyes and ears) process during the speech recognition."
        self.beginTime = time.time()
        if( self.bInConfirmation ):
            timerReco = self.beginTime + self.nTimeoutRecoConfirmation
        else:
            timerReco = self.beginTime + self.nTimeoutReco
        self.bHasAlreadyHearingEyes = False
        nEarLedsNextIndex = 0
        nEyesLed = -1
        while( self.bRecoIsWaitingForVoice or self.bRecoIsHearingOrAnalysing ):
            if( self.bMustStop ):
                try:
                    self.timeToReply(time.time() - self.beginTime)
                except:
                    pass
                break
            if( self.bRecoIsWaitingForVoice ):
                if( timerReco < time.time() ):
                    try:
                        self.timeToReply(timerReco - self.beginTime)
                    except:
                        pass
                    self.sRecoInterruption = "timeout"
                    break
            nEarLedsNextIndex = self.ledsEarsTurnOneStep( nEarLedsNextIndex )
            nEyesLed += 1
            self.ledsEyesTurnOneStep( 0x0055FF, nEyesLed%8 )
            time.sleep( 0.2 )

    def ledsEarsTurnOneStep(self, nEarLedsNextIndex):
        "One step of ears LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEarsLight ):
            nNbrLedByEars = 10
            rTime = 0.7
            strTemplate = "Ears/Led/%s/%dDeg/Actuator/Value"
            nAngle = (360/nNbrLedByEars) * nEarLedsNextIndex
            # update index before sending movement in case of a fast/concurrent call of the function
            nEarLedsNextIndex -= 1 # more beautiful to turn in this way
            if( nEarLedsNextIndex < 0 ):
                nEarLedsNextIndex = nNbrLedByEars-1
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 1.0, rTime )
            self.leds.post.fade( strTemplate % ( "Left", nAngle ), 0.0, rTime*1.2 )
            self.leds.post.fade( strTemplate % ( "Right", nAngle ), 0.0, rTime*1.2 )
        return nEarLedsNextIndex

    def ledsEyesTurnOneStep(self, nColor, nLed):
        "One step of eyes LEDS sequence (turn) when the robot is in speech recognition."
        if( self.bActivateEyesLight ):
            rTime = 0.7
            if( self.bRecoIsHearingOrAnalysing ):
                if( not self.bHasAlreadyHearingEyes ):
                    self.leds.fadeRGB( "FaceLeds", 0xF4FF22, 0.1 )
                    # start headcheck animation
                    if( self.nFrameNumber != self.aFrameNumbers["headCheck"] ):
                        self.nFrameNumber = self.aFrameNumbers["headCheck"]
                        try:
                            self.getTimeline().goTo(self.nFrameNumber)
                        except: # if NAOqi < 1.14
                            try:
                                self.gotoAndStop(self.nFrameNumber)
                            except:
                                pass
                    self.bHasAlreadyHearingEyes = True
            elif( self.bRecoIsWaitingForVoice ):
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , nColor, rTime )
                self.leds.post.fadeRGB( "FaceLed%d" % (nLed) , 0x000000, rTime*1.25 )

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        rDuration = 0.05
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0x0055FF, rDuration )
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        rDuration = 0.2
        if( self.bActivateEyesLight ):
            self.leds.fadeRGB( "FaceLeds", 0xFFFFFF, rDuration )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0. )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    # start the tactile sensor menu
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
                self.sRecoInterruption = "onTactileSensor"
                self.setLeds( 0xFFFFFF, 0xFFFFFF, 0.5 )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    # validate choice
                    thread.start_new_thread( self.ledsUnderstood, (False, True) )
                    if( self.aChoices[self.nIndexChoice][0] == self.asRepeatWords[0] ):
                        self.repeatWhenNoQuestion()
                        # launch TTS
                        idTTS = -1
                        if( self.sQuestion != ""):
                            idTTS = self.tts.post.say( self.sQuestion + "\\Pau=300\\" )
                            self.aIdsTTS.append( idTTS )
                            self.logger.debug( "Robot says: " + str(self.sQuestion) )
                        # wait for the end of the TTS
                        if( idTTS != -1 ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    else:
                        self.reactionWordUnderstood( [ self.aChoices[self.nIndexChoice][0], 1.0 ] )
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.tts.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS ) ):
                            try:
                                self.tts.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        if( self.aChoices[ self.nIndexChoice ][0] != "" ):
            if( self.nFrameNumber != self.aFrameNumbers["headDown"] ):
                self.nFrameNumber = self.aFrameNumbers["headDown"]
                try:
                    self.getTimeline().goTo(self.nFrameNumber)
                except: # if NAOqi < 1.14
                    try:
                        self.gotoAndStop(self.nFrameNumber)
                    except:
                        pass
            sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
            idTTS = self.tts.post.say( sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
            # launch flash leds
            thread.start_new_thread( self.ledsChangeOnTactile, () )
        if( idTTS != -1 ):
            try:
                self.tts.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.tts.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.tts.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        self.logger.debug( "Change detected on the front tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        self.logger.debug( "Change detected on the middle tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        self.logger.debug( "Change detected on the rear tactile sensor: " + str(param[0]) )
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass

        self.bGoOut = True
        self.bInTactileSensorMenu = False
        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.tts.say( outputName )
                        self.logger.debug( "Robot says: " + str(outputName) )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                        self.logger.debug( "Output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' stimulated with: " + str(outputName) + "." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )
        self.onUnload()
        # come back to an initial position and stop movement animation
        if( self.nFrameNumber != self.aFrameNumbers["end"] ):
            self.nFrameNumber = self.aFrameNumbers["end"]
            try:
                self.getTimeline().goTo(self.nFrameNumber)
            except: # if NAOqi < 1.14
                try:
                    self.gotoAndStop(self.nFrameNumber)
                except:
                    pass

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )
        try:
            self.memory.unsubscribeToEvent( "WordRecognized", self.getName() )
            self.bRecoIsWaitingForVoice = False
            self.bRecoIsHearingOrAnalysing = False
            self.logger.debug( "Speech recognition stopped." )
            self.memory.unsubscribeToEvent( "SpeechDetected", self.getName() )
        except:
            pass

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.bExternChoices = False
        self.bInTactileSensorMenu = False
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <keyword>نعم</keyword>
                                                        <keyword>لا</keyword>
                                                        <keyword></keyword>
                                                    </arabic>
                                                    <brazilian>
                                                        <keyword>sim</keyword>
                                                        <keyword>não</keyword>
                                                        <keyword></keyword>
                                                    </brazilian>
                                                    <chinese>
                                                        <keyword>是</keyword>
                                                        <keyword>不是</keyword>
                                                        <keyword></keyword>
                                                    </chinese>
                                                    <czech>
                                                        <keyword>ano</keyword>
                                                        <keyword>ne</keyword>
                                                        <keyword></keyword>
                                                    </czech>
                                                    <danish>
                                                        <keyword>ja</keyword>
                                                        <keyword>nej</keyword>
                                                        <keyword></keyword>
                                                    </danish>
                                                    <dutch>
                                                        <keyword>ja</keyword>
                                                        <keyword>nee</keyword>
                                                        <keyword></keyword>
                                                    </dutch>
                                                    <english>
                                                        <keyword>yes</keyword>
                                                        <keyword>sure</keyword>
                                                        <keyword></keyword>
                                                    </english>
                                                    <finnish>
                                                        <keyword>kyllä</keyword>
                                                        <keyword>ei</keyword>
                                                        <keyword></keyword>
                                                    </finnish>
                                                    <french>
                                                        <keyword>oui</keyword>
                                                        <keyword>non</keyword>
                                                        <keyword></keyword>
                                                    </french>
                                                    <german>
                                                        <keyword>ja</keyword>
                                                        <keyword>nein</keyword>
                                                        <keyword></keyword>
                                                    </german>
                                                    <greek>
                                                        <keyword>ναί</keyword>
                                                        <keyword>κανένα</keyword>
                                                        <keyword></keyword>
                                                    </greek>
                                                    <italian>
                                                        <keyword>sì</keyword>
                                                        <keyword>no</keyword>
                                                        <keyword></keyword>
                                                    </italian>
                                                    <japanese>
                                                        <keyword>はい</keyword>
                                                        <keyword>いいえ</keyword>
                                                        <keyword></keyword>
                                                    </japanese>
                                                    <korean>
                                                        <keyword>예</keyword>
                                                        <keyword>아니</keyword>
                                                        <keyword></keyword>
                                                    </korean>
                                                    <norwegian>
                                                        <keyword>ja</keyword>
                                                        <keyword>Nei</keyword>
                                                        <keyword></keyword>
                                                    </norwegian>
                                                    <polish>
                                                        <keyword>tak</keyword>
                                                        <keyword>nie</keyword>
                                                        <keyword></keyword>
                                                    </polish>
                                                    <portuguese>
                                                        <keyword>sim</keyword>
                                                        <keyword>não</keyword>
                                                        <keyword></keyword>
                                                    </portuguese>
                                                    <russian>
                                                        <keyword>да</keyword>
                                                        <keyword>нет</keyword>
                                                        <keyword></keyword>
                                                    </russian>
                                                    <spanish>
                                                        <keyword>si</keyword>
                                                        <keyword>no</keyword>
                                                        <keyword></keyword>
                                                    </spanish>
                                                    <swedish>
                                                        <keyword>ja</keyword>
                                                        <keyword>ingen</keyword>
                                                        <keyword></keyword>
                                                    </swedish>
                                                    <turkish>
                                                        <keyword>evet</keyword>
                                                        <keyword>hayır</keyword>
                                                        <keyword></keyword>
                                                    </turkish>
                                                    <language>english</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                                <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip="To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                                <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="8" />
                                                <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="9" />
                                                <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="10" />
                                                <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="6" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="11" />
                                                <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="12" />
                                                <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="13" />
                                                <Parameter name="Activate ears light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate ears light animation (turn, flash, etc...)." id="14" />
                                                <Parameter name="Activate eyes light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate eyes light animation (turn, flash, etc...)." id="15" />
                                                <Parameter name="Activate brain light" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Activate brain light animation (turn, flash, etc...)." id="16" />
                                                <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="17" />
                                                <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="18" />
                                                <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="19" />
                                                <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="20" />
                                                <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="21" />
                                                <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="22" />
                                                <Parameter name="Sentences file" inherits_from_parent="0" content_type="4" value="/Aldebaran/choice_sentences_light.xml" default_value="/Aldebaran/choice_sentences_light.xml" tooltip="File containing all necessary sentences in each supported language." id="23" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Máš rád čokoládu? ",
			"Danish" : " Kan du lide chokolade? ",
			"German" : " Mögen Sie Schokolade? ",
			"Greek" : "  ",
			"English" : " now...wheres my other card? haha.. im so drunk i dropped that holder down there... help me hold it, dealer man ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"French" : " Aimes-tu le chocolat ? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Dutch" : " Hou je van chocolade? ",
			"Norwegian" : "  ",
			"Polish" : " Lubisz czekoladę? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Russian" : " Вы любите шоколад? ",
			"Swedish" : " Gillar du choklad? ",
			"Turkish" : " Çikolata sever misin? ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Máš rád čokoládu?]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Kan du lide chokolade?]]>
</danish>
                                                    <german>
                                                        <![CDATA[Mögen Sie Schokolade?]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[now...wheres my other card? haha.. im so drunk i dropped that holder down there... help me hold it, dealer man]]>
</english>
                                                    <spanish>
                                                        <![CDATA[¿Te gusta el chocolate?]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Pidätkö suklaasta?]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Aimes-tu le chocolat ?]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ti piace il cioccolato?]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[チョコレートが好きですか]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[당신은 초콜렛을 좋아합니까?]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hou je van chocolade?]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Lubisz czekoladę?]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Você gosta de chocolate?]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Gostas de chocolate?]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Вы любите шоколад?]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Gillar du choklad?]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Çikolata sever misin?]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Delay" id="41" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="935" y="326">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="ourif" id="42" localization="8" tooltip="" x="777" y="122">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Output name="output1" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Switch Case" id="1" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="132" y="6">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		elif(p == self.typeConversion(4)):
			self.output_4(p)
		elif(p == self.typeConversion(5)):
			self.output_5(p)
		elif(p == self.typeConversion(6)):
			self.output_6(p)
		elif(p == self.typeConversion(7)):
			self.output_7(p)
		elif(p == self.typeConversion(8)):
			self.output_8(p)
		elif(p == self.typeConversion(9)):
			self.output_9(p)
		elif(p == self.typeConversion(10)):
			self.output_10(p)
		elif(p == self.typeConversion(11)):
			self.output_11(p)
		elif(p == self.typeConversion(12)):
			self.output_12(p)
		elif(p == self.typeConversion(13)):
			self.output_13(p)
		elif(p == self.typeConversion(14)):
			self.output_14(p)
		elif(p == self.typeConversion(15)):
			self.output_15(p)
		elif(p == self.typeConversion(16)):
			self.output_16(p)
		elif(p == self.typeConversion(17)):
			self.output_17(p)
		elif(p == self.typeConversion(18)):
			self.output_18(p)
		elif(p == self.typeConversion(19)):
			self.output_19(p)
		elif(p == self.typeConversion(20)):
			self.output_20(p)
		elif(p == self.typeConversion(21)):
			self.output_21(p)
		elif(p == self.typeConversion(22)):
			self.output_22(p)
		elif(p == self.typeConversion(23)):
			self.output_23(p)
		elif(p == self.typeConversion(24)):
			self.output_24(p)
		elif(p == self.typeConversion(25)):
			self.output_25(p)
		elif(p == self.typeConversion(26)):
			self.output_26(p)
		elif(p == self.typeConversion(27)):
			self.output_27(p)
		elif(p == self.typeConversion(28)):
			self.output_28(p)
		elif(p == self.typeConversion(29)):
			self.output_29(p)
		elif(p == self.typeConversion(30)):
			self.output_30(p)
		elif(p == self.typeConversion(31)):
			self.output_31(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>1</keyword>
                                                        <keyword>2</keyword>
                                                        <keyword>3</keyword>
                                                        <keyword>4</keyword>
                                                        <keyword>5</keyword>
                                                        <keyword>6</keyword>
                                                        <keyword>7</keyword>
                                                        <keyword>8</keyword>
                                                        <keyword>9</keyword>
                                                        <keyword>10</keyword>
                                                        <keyword>11</keyword>
                                                        <keyword>12</keyword>
                                                        <keyword>13</keyword>
                                                        <keyword>14</keyword>
                                                        <keyword>15</keyword>
                                                        <keyword>16</keyword>
                                                        <keyword>17</keyword>
                                                        <keyword>18</keyword>
                                                        <keyword>19</keyword>
                                                        <keyword>20</keyword>
                                                        <keyword>21</keyword>
                                                        <keyword>22</keyword>
                                                        <keyword>23</keyword>
                                                        <keyword>24</keyword>
                                                        <keyword>25</keyword>
                                                        <keyword>26</keyword>
                                                        <keyword>27</keyword>
                                                        <keyword>28</keyword>
                                                        <keyword>29</keyword>
                                                        <keyword>30</keyword>
                                                        <keyword>31</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="8" />
                                                <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="9" />
                                                <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="10" />
                                                <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="11" />
                                                <Output name="output_9" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="12" />
                                                <Output name="output_10" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="13" />
                                                <Output name="output_11" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="14" />
                                                <Output name="output_12" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="15" />
                                                <Output name="output_13" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="16" />
                                                <Output name="output_14" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="17" />
                                                <Output name="output_15" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="18" />
                                                <Output name="output_16" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="19" />
                                                <Output name="output_17" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="20" />
                                                <Output name="output_18" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="21" />
                                                <Output name="output_19" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="22" />
                                                <Output name="output_20" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="23" />
                                                <Output name="output_21" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="24" />
                                                <Output name="output_22" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="25" />
                                                <Output name="output_23" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="26" />
                                                <Output name="output_24" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="27" />
                                                <Output name="output_25" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="28" />
                                                <Output name="output_26" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="29" />
                                                <Output name="output_27" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="30" />
                                                <Output name="output_28" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="31" />
                                                <Output name="output_29" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="32" />
                                                <Output name="output_30" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="33" />
                                                <Output name="output_31" type="0" type_size="1" nature="2" inner="0" tooltip="该输入/输出点由指令盒自动添加。请参阅指令盒工具提示，以获取更多信息。" id="34" />
                                            </Box>
                                            <Box name="Random Int." id="3" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="452" y="247">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="1" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                            </Box>
                                            <Box name="If" id="5" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="660" y="269">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                                                <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                                                <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                                                <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&gt;" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                                    <Choice value="&lt;" />
                                                    <Choice value="&lt; or =" />
                                                    <Choice value="=" />
                                                    <Choice value="&gt; or =" />
                                                    <Choice value="&gt;" />
                                                    <Choice value="≠" />
                                                </Parameter>
                                                <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="17" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="18" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="19" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="20" />
                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="8" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="9" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="10" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="11" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="12" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="13" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="14" />
                                            <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="21" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="22" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="23" />
                                            <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="24" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="25" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="26" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="27" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="28" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="29" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="30" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="31" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="32" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="33" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="34" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="15" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="16" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Delay (1)" id="46" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="970" y="24">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Say (1)" id="8" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="1664" y="561">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " soo buddy...\n\nwhat have you got for me?  ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[soo buddy...

what have you got for me? ]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Hands (1)" id="47" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="1082" y="328">
                            <bitmap>media/images/box/movement/move_arm.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            ids = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    ids.append( self.motion.post.openHand(hand) )
                else:
                    ids.append( self.motion.post.closeHand(hand) )
            for id in ids:
                self.motion.wait( id, 0 )
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Left" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                <Choice value="Both" />
                                <Choice value="Left" />
                                <Choice value="Right" />
                            </Parameter>
                            <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Open the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                <Choice value="Open the hand" />
                                <Choice value="Close the hand" />
                            </Parameter>
                        </Box>
                        <Box name="Stand Up (2)" id="32" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1214" y="326">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say" id="7" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="2464" y="782">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " well.... won\'t blame you. you weren\'t that fun to play with either. ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[well.... won't blame you. you weren't that fun to play with either.]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[]]>
</chinese>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Stand Up" id="15" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1556" y="33">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Stand Up (4)" id="28" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1495" y="346">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="check_mood" id="31" localization="8" tooltip="" x="1410" y="26">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If" id="5" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="499" y="59">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                                                <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                                                <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                                                <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&lt; or =" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                                    <Choice value="&lt;" />
                                                    <Choice value="&lt; or =" />
                                                    <Choice value="=" />
                                                    <Choice value="&gt; or =" />
                                                    <Choice value="&gt;" />
                                                    <Choice value="≠" />
                                                </Parameter>
                                                <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                                            </Box>
                                            <Box name="Get Data (3)" id="6" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="251" y="64">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="sad" id="7" localization="8" tooltip="Enter description here" x="709" y="196">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="Say_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="sad dialogues" id="5" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="319" y="140">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>1</keyword>
                                                                            <keyword>2</keyword>
                                                                            <keyword>3</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                    <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                </Box>
                                                                <Box name="Random Int. (1)" id="7" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="145" y="112">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                                    <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                                    <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                                    <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="3" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                                    <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                                                </Box>
                                                                <Box name="Say" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="658" y="29">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " ohh, Lord of Misery! what. have i done to be treated like this?? ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[ohh, Lord of Misery! what. have i done to be treated like this??]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (1)" id="10" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="658" y="279">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " OHHHHH GOD!!!!!!! this card is as bad as my divorce is going to be!  ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[OHHHHH GOD!!!!!!! this card is as bad as my divorce is going to be! ]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (2)" id="11" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="665" y="514">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Ohhhhh, I like this! waiter, get me another beer, would you? ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[Ohhhhh, I like this! waiter, get me another beer, would you?]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Timeline (1)" id="51" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="662" y="144">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="76">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-8.96736" />
                                                                                <Key frame="39" value="-8.96736" />
                                                                                <Key frame="53" value="-9.58261" />
                                                                                <Key frame="65" value="-9.58261" />
                                                                                <Key frame="76" value="-9.58261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="0.612832" />
                                                                                <Key frame="39" value="67.4984" />
                                                                                <Key frame="53" value="-61.4387" />
                                                                                <Key frame="65" value="-5.45169" />
                                                                                <Key frame="76" value="-5.45169" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="5.2711" />
                                                                                <Key frame="39" value="5.2711" />
                                                                                <Key frame="53" value="5.2711" />
                                                                                <Key frame="65" value="5.2711" />
                                                                                <Key frame="76" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-7.55628" />
                                                                                <Key frame="39" value="-7.55628" />
                                                                                <Key frame="53" value="-7.55628" />
                                                                                <Key frame="65" value="-7.55628" />
                                                                                <Key frame="76" value="-7.55628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-13.8845" />
                                                                                <Key frame="39" value="-13.8845" />
                                                                                <Key frame="53" value="-13.8845" />
                                                                                <Key frame="65" value="-13.8845" />
                                                                                <Key frame="76" value="-13.8845" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-73.6557" />
                                                                                <Key frame="39" value="-73.6557" />
                                                                                <Key frame="53" value="-73.6557" />
                                                                                <Key frame="65" value="-73.6557" />
                                                                                <Key frame="76" value="-73.6557" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="23" value="0.028" />
                                                                                <Key frame="39" value="0.028" />
                                                                                <Key frame="53" value="0.028" />
                                                                                <Key frame="65" value="0.028" />
                                                                                <Key frame="76" value="0.028" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="7.64898" />
                                                                                <Key frame="39" value="7.64898" />
                                                                                <Key frame="53" value="7.64898" />
                                                                                <Key frame="65" value="7.64898" />
                                                                                <Key frame="76" value="7.64898" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="5.53958" />
                                                                                <Key frame="39" value="5.53958" />
                                                                                <Key frame="53" value="5.53958" />
                                                                                <Key frame="65" value="5.53958" />
                                                                                <Key frame="76" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="53" value="-9.92936" />
                                                                                <Key frame="65" value="-9.92936" />
                                                                                <Key frame="76" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-5.10013" />
                                                                                <Key frame="39" value="-5.10013" />
                                                                                <Key frame="53" value="-5.10013" />
                                                                                <Key frame="65" value="-5.10013" />
                                                                                <Key frame="76" value="-5.10013" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="16.697" />
                                                                                <Key frame="39" value="16.697" />
                                                                                <Key frame="53" value="16.697" />
                                                                                <Key frame="65" value="16.697" />
                                                                                <Key frame="76" value="16.697" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-15.9108" />
                                                                                <Key frame="39" value="-15.9108" />
                                                                                <Key frame="53" value="-16.5261" />
                                                                                <Key frame="65" value="-16.5261" />
                                                                                <Key frame="76" value="-16.5261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-17.7565" />
                                                                                <Key frame="39" value="-17.7565" />
                                                                                <Key frame="53" value="-17.7565" />
                                                                                <Key frame="65" value="-17.7565" />
                                                                                <Key frame="76" value="-17.7565" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="5.01224" />
                                                                                <Key frame="39" value="5.01224" />
                                                                                <Key frame="53" value="5.01224" />
                                                                                <Key frame="65" value="5.01224" />
                                                                                <Key frame="76" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="7.12163" />
                                                                                <Key frame="39" value="7.12163" />
                                                                                <Key frame="53" value="7.12163" />
                                                                                <Key frame="65" value="7.12163" />
                                                                                <Key frame="76" value="7.12163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="22.4148" />
                                                                                <Key frame="39" value="88.4215" />
                                                                                <Key frame="53" value="88.4215" />
                                                                                <Key frame="65" value="88.4215" />
                                                                                <Key frame="76" value="2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="69.3442" />
                                                                                <Key frame="39" value="76.0239" />
                                                                                <Key frame="53" value="75.0571" />
                                                                                <Key frame="65" value="75.0571" />
                                                                                <Key frame="76" value="71.2778" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="23" value="0.3116" />
                                                                                <Key frame="39" value="0.3116" />
                                                                                <Key frame="53" value="0.3116" />
                                                                                <Key frame="65" value="0.3116" />
                                                                                <Key frame="76" value="0.3116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="7.11683" />
                                                                                <Key frame="39" value="7.11683" />
                                                                                <Key frame="53" value="7.11683" />
                                                                                <Key frame="65" value="7.11683" />
                                                                                <Key frame="76" value="7.11683" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-5.35899" />
                                                                                <Key frame="39" value="-5.35899" />
                                                                                <Key frame="53" value="-5.35899" />
                                                                                <Key frame="65" value="-5.35899" />
                                                                                <Key frame="76" value="-5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="53" value="-9.92936" />
                                                                                <Key frame="65" value="-9.92936" />
                                                                                <Key frame="76" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-5.00743" />
                                                                                <Key frame="39" value="-5.00743" />
                                                                                <Key frame="53" value="-5.00743" />
                                                                                <Key frame="65" value="-5.00743" />
                                                                                <Key frame="76" value="-5.00743" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="84.2906" />
                                                                                <Key frame="39" value="30.9403" />
                                                                                <Key frame="53" value="31.5555" />
                                                                                <Key frame="65" value="31.5555" />
                                                                                <Key frame="76" value="85.1695" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-11.4283" />
                                                                                <Key frame="39" value="-7.82477" />
                                                                                <Key frame="53" value="-7.82477" />
                                                                                <Key frame="65" value="-7.82477" />
                                                                                <Key frame="76" value="-4.39699" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="4.91954" />
                                                                                <Key frame="39" value="27.5956" />
                                                                                <Key frame="53" value="27.5956" />
                                                                                <Key frame="65" value="27.5956" />
                                                                                <Key frame="76" value="-7.73688" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wipe Forehead" id="3" localization="8" tooltip="This box makes the robot wipe his forehead." x="660" y="400">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="127">
                                                                        <ActuatorList model="Nao">
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-13.4498" />
                                                                                <Key frame="41" value="-35.6864" />
                                                                                <Key frame="82" value="-6.50639" />
                                                                                <Key frame="99" value="-0.353971" />
                                                                                <Key frame="113" value="-1.58446" />
                                                                                <Key frame="127" value="-2.11181" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-1.49656" />
                                                                                <Key frame="41" value="24.5194" />
                                                                                <Key frame="82" value="17.6638" />
                                                                                <Key frame="99" value="6.41369" />
                                                                                <Key frame="113" value="-0.79343" />
                                                                                <Key frame="127" value="3.51326" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="49.4806" />
                                                                                <Key frame="38" value="49.217" />
                                                                                <Key frame="78" value="50.8869" />
                                                                                <Key frame="95" value="53.26" />
                                                                                <Key frame="109" value="58.2698" />
                                                                                <Key frame="123" value="55.9846" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="16.4333" />
                                                                                <Key frame="38" value="13.1814" />
                                                                                <Key frame="78" value="11.5993" />
                                                                                <Key frame="95" value="23.2889" />
                                                                                <Key frame="109" value="20.6522" />
                                                                                <Key frame="123" value="18.2791" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-54.8468" />
                                                                                <Key frame="38" value="-47.2003" />
                                                                                <Key frame="78" value="-57.7473" />
                                                                                <Key frame="95" value="-53.0011" />
                                                                                <Key frame="109" value="-71.2826" />
                                                                                <Key frame="123" value="-55.0226" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-49.6564" />
                                                                                <Key frame="38" value="-49.7443" />
                                                                                <Key frame="78" value="-47.1076" />
                                                                                <Key frame="95" value="-56.8635" />
                                                                                <Key frame="109" value="-55.3694" />
                                                                                <Key frame="123" value="-56.7757" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="38" value="22.1463" />
                                                                                <Key frame="78" value="22.1463" />
                                                                                <Key frame="95" value="22.1463" />
                                                                                <Key frame="123" value="22.1463" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="38" value="0.132026" />
                                                                                <Key frame="78" value="0.132026" />
                                                                                <Key frame="95" value="0.132026" />
                                                                                <Key frame="123" value="0.132026" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="4.39699" />
                                                                                <Key frame="34" value="-34.0996" />
                                                                                <Key frame="74" value="-49.6564" />
                                                                                <Key frame="91" value="-35.1543" />
                                                                                <Key frame="105" value="33.4892" />
                                                                                <Key frame="119" value="50.5401" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-1.145" />
                                                                                <Key frame="34" value="-1.145" />
                                                                                <Key frame="74" value="-35.247" />
                                                                                <Key frame="91" value="-47.7276" />
                                                                                <Key frame="105" value="-12.8346" />
                                                                                <Key frame="119" value="-12.3072" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-7.38531" />
                                                                                <Key frame="34" value="-16.3503" />
                                                                                <Key frame="74" value="-8.96736" />
                                                                                <Key frame="91" value="43.2403" />
                                                                                <Key frame="105" value="67.1469" />
                                                                                <Key frame="119" value="38.8457" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="73.392" />
                                                                                <Key frame="34" value="80.0718" />
                                                                                <Key frame="74" value="90.0914" />
                                                                                <Key frame="91" value="71.1068" />
                                                                                <Key frame="105" value="70.2279" />
                                                                                <Key frame="119" value="48.1671" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="-3.34229" />
                                                                                <Key frame="74" value="-2.99072" />
                                                                                <Key frame="91" value="-3.86964" />
                                                                                <Key frame="119" value="-2.1997" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="0.166571" />
                                                                                <Key frame="74" value="0.166208" />
                                                                                <Key frame="91" value="0.166571" />
                                                                                <Key frame="119" value="0.166208" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                    <Resource name="Head" type="Lock" timeout="0" />
                                                                    <Resource name="Arms" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="51" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="9" indexofoutput="4" />
                                                                <Link inputowner="51" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="joy_1" id="29" localization="8" tooltip="" x="710" y="51">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Random Int." id="41" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="278" y="567">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                                    <Output name="output_RandomValue" type="0" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                                    <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                                    <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="3" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                                    <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                                                </Box>
                                                                <Box name="Joy dialogues" id="42" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="407" y="583">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>1</keyword>
                                                                            <keyword>2</keyword>
                                                                            <keyword>3</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                    <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                </Box>
                                                                <Box name="Say" id="43" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="696" y="725">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " finally!! You know, I want to just sing and dance around!!! what a card! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[finally!! You know, I want to just sing and dance around!!! what a card!]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (1)" id="44" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="685" y="283">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " woohoo!! things are starting to look up for me  after all!!  ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[woohoo!! things are starting to look up for me  after all!! ]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>5</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (2)" id="45" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="694" y="511">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="504" y="143">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " woww... not what i expected! How could this be??? Don\'t want to lose again! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[woww... not what i expected! How could this be??? Don't want to lose again!]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>5</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Timeline (2)" id="53" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="694" y="613">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="71">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-10.5494" />
                                                                                <Key frame="30" value="-10.5494" />
                                                                                <Key frame="39" value="-10.5494" />
                                                                                <Key frame="51" value="-10.5494" />
                                                                                <Key frame="61" value="-10.5494" />
                                                                                <Key frame="71" value="-10.5494" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="0.349159" />
                                                                                <Key frame="30" value="0.349159" />
                                                                                <Key frame="39" value="0.349159" />
                                                                                <Key frame="51" value="0.349159" />
                                                                                <Key frame="61" value="0.349159" />
                                                                                <Key frame="71" value="0.349159" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="5.2711" />
                                                                                <Key frame="30" value="5.2711" />
                                                                                <Key frame="39" value="5.2711" />
                                                                                <Key frame="51" value="5.2711" />
                                                                                <Key frame="61" value="5.2711" />
                                                                                <Key frame="71" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-7.55628" />
                                                                                <Key frame="30" value="-7.55628" />
                                                                                <Key frame="39" value="-7.55628" />
                                                                                <Key frame="51" value="-7.55628" />
                                                                                <Key frame="61" value="-7.55628" />
                                                                                <Key frame="71" value="-7.55628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-13.6208" />
                                                                                <Key frame="30" value="-13.6208" />
                                                                                <Key frame="39" value="-13.6208" />
                                                                                <Key frame="51" value="-13.6208" />
                                                                                <Key frame="61" value="-13.6208" />
                                                                                <Key frame="71" value="-13.6208" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-73.6557" />
                                                                                <Key frame="30" value="-73.6557" />
                                                                                <Key frame="39" value="-73.6557" />
                                                                                <Key frame="51" value="-73.6557" />
                                                                                <Key frame="61" value="-73.6557" />
                                                                                <Key frame="71" value="-73.6557" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="17" value="0.0184" />
                                                                                <Key frame="30" value="0.0184" />
                                                                                <Key frame="39" value="0.0184" />
                                                                                <Key frame="51" value="0.0184" />
                                                                                <Key frame="61" value="0.0184" />
                                                                                <Key frame="71" value="0.0184" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="7.64898" />
                                                                                <Key frame="30" value="7.64898" />
                                                                                <Key frame="39" value="7.64898" />
                                                                                <Key frame="51" value="7.64898" />
                                                                                <Key frame="61" value="7.64898" />
                                                                                <Key frame="71" value="7.64898" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="5.53958" />
                                                                                <Key frame="30" value="5.53958" />
                                                                                <Key frame="39" value="5.53958" />
                                                                                <Key frame="51" value="5.53958" />
                                                                                <Key frame="61" value="5.53958" />
                                                                                <Key frame="71" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-9.92936" />
                                                                                <Key frame="30" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="51" value="-9.92936" />
                                                                                <Key frame="61" value="-9.92936" />
                                                                                <Key frame="71" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-5.10013" />
                                                                                <Key frame="30" value="-5.10013" />
                                                                                <Key frame="39" value="-5.10013" />
                                                                                <Key frame="51" value="-5.10013" />
                                                                                <Key frame="61" value="-5.10013" />
                                                                                <Key frame="71" value="-5.10013" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="16.6091" />
                                                                                <Key frame="30" value="16.6091" />
                                                                                <Key frame="39" value="16.6091" />
                                                                                <Key frame="51" value="16.6091" />
                                                                                <Key frame="61" value="16.6091" />
                                                                                <Key frame="71" value="16.6091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-16.2624" />
                                                                                <Key frame="30" value="-16.2624" />
                                                                                <Key frame="39" value="-16.2624" />
                                                                                <Key frame="51" value="-16.2624" />
                                                                                <Key frame="61" value="-16.2624" />
                                                                                <Key frame="71" value="-16.2624" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-18.2839" />
                                                                                <Key frame="30" value="-18.2839" />
                                                                                <Key frame="39" value="-18.2839" />
                                                                                <Key frame="51" value="-17.6686" />
                                                                                <Key frame="61" value="-17.6686" />
                                                                                <Key frame="71" value="-17.6686" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="5.01224" />
                                                                                <Key frame="30" value="5.01224" />
                                                                                <Key frame="39" value="5.01224" />
                                                                                <Key frame="51" value="5.01224" />
                                                                                <Key frame="61" value="5.01224" />
                                                                                <Key frame="71" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="7.12163" />
                                                                                <Key frame="30" value="7.12163" />
                                                                                <Key frame="39" value="7.12163" />
                                                                                <Key frame="51" value="7.12163" />
                                                                                <Key frame="61" value="7.12163" />
                                                                                <Key frame="71" value="7.12163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="88.2457" />
                                                                                <Key frame="30" value="80.9507" />
                                                                                <Key frame="39" value="88.4215" />
                                                                                <Key frame="51" value="74.5346" />
                                                                                <Key frame="61" value="88.5" />
                                                                                <Key frame="71" value="2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="80.4185" />
                                                                                <Key frame="30" value="2.1949" />
                                                                                <Key frame="39" value="0.524941" />
                                                                                <Key frame="51" value="10.3688" />
                                                                                <Key frame="61" value="6.50159" />
                                                                                <Key frame="71" value="-24.8758" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="17" value="0.3116" />
                                                                                <Key frame="30" value="0.3116" />
                                                                                <Key frame="39" value="0.3116" />
                                                                                <Key frame="51" value="0.3116" />
                                                                                <Key frame="61" value="0.3116" />
                                                                                <Key frame="71" value="0.3116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="7.02893" />
                                                                                <Key frame="30" value="7.02893" />
                                                                                <Key frame="39" value="7.02893" />
                                                                                <Key frame="51" value="7.02893" />
                                                                                <Key frame="61" value="7.02893" />
                                                                                <Key frame="71" value="7.02893" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-5.35899" />
                                                                                <Key frame="30" value="-5.35899" />
                                                                                <Key frame="39" value="-5.35899" />
                                                                                <Key frame="51" value="-5.35899" />
                                                                                <Key frame="61" value="-5.35899" />
                                                                                <Key frame="71" value="-5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-9.92936" />
                                                                                <Key frame="30" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="51" value="-9.92936" />
                                                                                <Key frame="61" value="-9.92936" />
                                                                                <Key frame="71" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-5.00743" />
                                                                                <Key frame="30" value="-5.00743" />
                                                                                <Key frame="39" value="-5.00743" />
                                                                                <Key frame="51" value="-5.00743" />
                                                                                <Key frame="61" value="-5.00743" />
                                                                                <Key frame="71" value="-5.00743" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-6.2379" />
                                                                                <Key frame="30" value="-33.8359" />
                                                                                <Key frame="39" value="-33.1328" />
                                                                                <Key frame="51" value="-32.5175" />
                                                                                <Key frame="61" value="-30.2324" />
                                                                                <Key frame="71" value="80.0718" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-2.81494" />
                                                                                <Key frame="30" value="4.2164" />
                                                                                <Key frame="39" value="-29.8856" />
                                                                                <Key frame="51" value="7.29261" />
                                                                                <Key frame="61" value="-21.6238" />
                                                                                <Key frame="71" value="-3.86964" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-2.72705" />
                                                                                <Key frame="30" value="45.6134" />
                                                                                <Key frame="39" value="44.8224" />
                                                                                <Key frame="51" value="44.2071" />
                                                                                <Key frame="61" value="38.5821" />
                                                                                <Key frame="71" value="104.149" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Samyukta" id="4" localization="8" tooltip="Enter description here" x="695" y="822">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Timeline_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Output name="Timeline_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Timeline" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="681" y="107">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="280">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram />
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-7.73688" />
                                                                                                    <Key frame="20" value="-6.77007" />
                                                                                                    <Key frame="30" value="-6.77007" />
                                                                                                    <Key frame="40" value="-6.77007" />
                                                                                                    <Key frame="50" value="-6.77007" />
                                                                                                    <Key frame="60" value="-6.77007" />
                                                                                                    <Key frame="70" value="-7.73688" />
                                                                                                    <Key frame="80" value="-7.73688" />
                                                                                                    <Key frame="90" value="-6.77007" />
                                                                                                    <Key frame="100" value="-6.77007" />
                                                                                                    <Key frame="110" value="-6.77007" />
                                                                                                    <Key frame="120" value="-6.77007" />
                                                                                                    <Key frame="130" value="-6.77007" />
                                                                                                    <Key frame="140" value="-7.73688" />
                                                                                                    <Key frame="150" value="-7.73688" />
                                                                                                    <Key frame="160" value="-6.77007" />
                                                                                                    <Key frame="170" value="-6.77007" />
                                                                                                    <Key frame="180" value="-6.77007" />
                                                                                                    <Key frame="190" value="-6.77007" />
                                                                                                    <Key frame="200" value="-6.77007" />
                                                                                                    <Key frame="210" value="-7.73688" />
                                                                                                    <Key frame="220" value="-7.73688" />
                                                                                                    <Key frame="230" value="-6.77007" />
                                                                                                    <Key frame="240" value="-6.77007" />
                                                                                                    <Key frame="250" value="-6.77007" />
                                                                                                    <Key frame="260" value="-6.77007" />
                                                                                                    <Key frame="270" value="-6.77007" />
                                                                                                    <Key frame="280" value="-7.73688" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="25.662" />
                                                                                                    <Key frame="20" value="15.115" />
                                                                                                    <Key frame="30" value="8.4352" />
                                                                                                    <Key frame="40" value="2.54646" />
                                                                                                    <Key frame="50" value="-8.4352" />
                                                                                                    <Key frame="60" value="-15.115" />
                                                                                                    <Key frame="70" value="-25.6668" />
                                                                                                    <Key frame="80" value="25.662" />
                                                                                                    <Key frame="90" value="15.115" />
                                                                                                    <Key frame="100" value="8.4352" />
                                                                                                    <Key frame="110" value="2.54646" />
                                                                                                    <Key frame="120" value="-8.4352" />
                                                                                                    <Key frame="130" value="-15.115" />
                                                                                                    <Key frame="140" value="-25.6668" />
                                                                                                    <Key frame="150" value="25.662" />
                                                                                                    <Key frame="160" value="15.115" />
                                                                                                    <Key frame="170" value="8.4352" />
                                                                                                    <Key frame="180" value="2.54646" />
                                                                                                    <Key frame="190" value="-8.4352" />
                                                                                                    <Key frame="200" value="-15.115" />
                                                                                                    <Key frame="210" value="-25.6668" />
                                                                                                    <Key frame="220" value="25.662" />
                                                                                                    <Key frame="230" value="15.115" />
                                                                                                    <Key frame="240" value="8.4352" />
                                                                                                    <Key frame="250" value="2.54646" />
                                                                                                    <Key frame="260" value="-8.4352" />
                                                                                                    <Key frame="270" value="-15.115" />
                                                                                                    <Key frame="280" value="-25.6668" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="5.18321" />
                                                                                                    <Key frame="20" value="5.18321" />
                                                                                                    <Key frame="30" value="5.18321" />
                                                                                                    <Key frame="40" value="5.18321" />
                                                                                                    <Key frame="50" value="5.27591" />
                                                                                                    <Key frame="60" value="5.27591" />
                                                                                                    <Key frame="70" value="5.18321" />
                                                                                                    <Key frame="80" value="5.18321" />
                                                                                                    <Key frame="90" value="5.18321" />
                                                                                                    <Key frame="100" value="5.18321" />
                                                                                                    <Key frame="110" value="5.18321" />
                                                                                                    <Key frame="120" value="5.27591" />
                                                                                                    <Key frame="130" value="5.27591" />
                                                                                                    <Key frame="140" value="5.18321" />
                                                                                                    <Key frame="150" value="5.18321" />
                                                                                                    <Key frame="160" value="5.18321" />
                                                                                                    <Key frame="170" value="5.18321" />
                                                                                                    <Key frame="180" value="5.18321" />
                                                                                                    <Key frame="190" value="5.27591" />
                                                                                                    <Key frame="200" value="5.27591" />
                                                                                                    <Key frame="210" value="5.18321" />
                                                                                                    <Key frame="220" value="5.18321" />
                                                                                                    <Key frame="230" value="5.18321" />
                                                                                                    <Key frame="240" value="5.18321" />
                                                                                                    <Key frame="250" value="5.18321" />
                                                                                                    <Key frame="260" value="5.27591" />
                                                                                                    <Key frame="270" value="5.27591" />
                                                                                                    <Key frame="280" value="5.18321" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-7.55628" />
                                                                                                    <Key frame="20" value="-7.55628" />
                                                                                                    <Key frame="30" value="-7.55628" />
                                                                                                    <Key frame="40" value="-7.55628" />
                                                                                                    <Key frame="50" value="-7.38531" />
                                                                                                    <Key frame="60" value="-7.38531" />
                                                                                                    <Key frame="70" value="-7.55628" />
                                                                                                    <Key frame="80" value="-7.55628" />
                                                                                                    <Key frame="90" value="-7.55628" />
                                                                                                    <Key frame="100" value="-7.55628" />
                                                                                                    <Key frame="110" value="-7.55628" />
                                                                                                    <Key frame="120" value="-7.38531" />
                                                                                                    <Key frame="130" value="-7.38531" />
                                                                                                    <Key frame="140" value="-7.55628" />
                                                                                                    <Key frame="150" value="-7.55628" />
                                                                                                    <Key frame="160" value="-7.55628" />
                                                                                                    <Key frame="170" value="-7.55628" />
                                                                                                    <Key frame="180" value="-7.55628" />
                                                                                                    <Key frame="190" value="-7.38531" />
                                                                                                    <Key frame="200" value="-7.38531" />
                                                                                                    <Key frame="210" value="-7.55628" />
                                                                                                    <Key frame="220" value="-7.55628" />
                                                                                                    <Key frame="230" value="-7.55628" />
                                                                                                    <Key frame="240" value="-7.55628" />
                                                                                                    <Key frame="250" value="-7.55628" />
                                                                                                    <Key frame="260" value="-7.38531" />
                                                                                                    <Key frame="270" value="-7.38531" />
                                                                                                    <Key frame="280" value="-7.55628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-83.2311" />
                                                                                                    <Key frame="20" value="-71.6294" />
                                                                                                    <Key frame="30" value="-38.1426" />
                                                                                                    <Key frame="40" value="-37.1758" />
                                                                                                    <Key frame="50" value="-18.2839" />
                                                                                                    <Key frame="60" value="-36.3017" />
                                                                                                    <Key frame="70" value="-46.6681" />
                                                                                                    <Key frame="80" value="-83.2311" />
                                                                                                    <Key frame="90" value="-71.6294" />
                                                                                                    <Key frame="100" value="-38.1426" />
                                                                                                    <Key frame="110" value="-37.1758" />
                                                                                                    <Key frame="120" value="-18.2839" />
                                                                                                    <Key frame="130" value="-36.3017" />
                                                                                                    <Key frame="140" value="-46.6681" />
                                                                                                    <Key frame="150" value="-83.2311" />
                                                                                                    <Key frame="160" value="-71.6294" />
                                                                                                    <Key frame="170" value="-38.1426" />
                                                                                                    <Key frame="180" value="-37.1758" />
                                                                                                    <Key frame="190" value="-18.2839" />
                                                                                                    <Key frame="200" value="-36.3017" />
                                                                                                    <Key frame="210" value="-46.6681" />
                                                                                                    <Key frame="220" value="-83.2311" />
                                                                                                    <Key frame="230" value="-71.6294" />
                                                                                                    <Key frame="240" value="-38.1426" />
                                                                                                    <Key frame="250" value="-37.1758" />
                                                                                                    <Key frame="260" value="-18.2839" />
                                                                                                    <Key frame="270" value="-36.3017" />
                                                                                                    <Key frame="280" value="-46.6681" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-85.8726" />
                                                                                                    <Key frame="20" value="-90.3551" />
                                                                                                    <Key frame="30" value="-90.3551" />
                                                                                                    <Key frame="40" value="-86.9273" />
                                                                                                    <Key frame="50" value="-38.7579" />
                                                                                                    <Key frame="60" value="-37.1758" />
                                                                                                    <Key frame="70" value="-41.8389" />
                                                                                                    <Key frame="80" value="-85.8726" />
                                                                                                    <Key frame="90" value="-90.3551" />
                                                                                                    <Key frame="100" value="-90.3551" />
                                                                                                    <Key frame="110" value="-86.9273" />
                                                                                                    <Key frame="120" value="-38.7579" />
                                                                                                    <Key frame="130" value="-37.1758" />
                                                                                                    <Key frame="140" value="-41.8389" />
                                                                                                    <Key frame="150" value="-85.8726" />
                                                                                                    <Key frame="160" value="-90.3551" />
                                                                                                    <Key frame="170" value="-90.3551" />
                                                                                                    <Key frame="180" value="-86.9273" />
                                                                                                    <Key frame="190" value="-38.7579" />
                                                                                                    <Key frame="200" value="-37.1758" />
                                                                                                    <Key frame="210" value="-41.8389" />
                                                                                                    <Key frame="220" value="-85.8726" />
                                                                                                    <Key frame="230" value="-90.3551" />
                                                                                                    <Key frame="240" value="-90.3551" />
                                                                                                    <Key frame="250" value="-86.9273" />
                                                                                                    <Key frame="260" value="-38.7579" />
                                                                                                    <Key frame="270" value="-37.1758" />
                                                                                                    <Key frame="280" value="-41.8389" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="10" value="0.3824" />
                                                                                                    <Key frame="20" value="0.3972" />
                                                                                                    <Key frame="30" value="0.34" />
                                                                                                    <Key frame="40" value="0.34" />
                                                                                                    <Key frame="50" value="0.2984" />
                                                                                                    <Key frame="60" value="0.2984" />
                                                                                                    <Key frame="70" value="0.3132" />
                                                                                                    <Key frame="80" value="0.3824" />
                                                                                                    <Key frame="90" value="0.3972" />
                                                                                                    <Key frame="100" value="0.34" />
                                                                                                    <Key frame="110" value="0.34" />
                                                                                                    <Key frame="120" value="0.2984" />
                                                                                                    <Key frame="130" value="0.2984" />
                                                                                                    <Key frame="140" value="0.3132" />
                                                                                                    <Key frame="150" value="0.3824" />
                                                                                                    <Key frame="160" value="0.3972" />
                                                                                                    <Key frame="170" value="0.34" />
                                                                                                    <Key frame="180" value="0.34" />
                                                                                                    <Key frame="190" value="0.2984" />
                                                                                                    <Key frame="200" value="0.2984" />
                                                                                                    <Key frame="210" value="0.3132" />
                                                                                                    <Key frame="220" value="0.3824" />
                                                                                                    <Key frame="230" value="0.3972" />
                                                                                                    <Key frame="240" value="0.34" />
                                                                                                    <Key frame="250" value="0.34" />
                                                                                                    <Key frame="260" value="0.2984" />
                                                                                                    <Key frame="270" value="0.2984" />
                                                                                                    <Key frame="280" value="0.3132" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.12163" />
                                                                                                    <Key frame="20" value="7.12163" />
                                                                                                    <Key frame="30" value="7.12163" />
                                                                                                    <Key frame="40" value="7.12163" />
                                                                                                    <Key frame="50" value="7.55628" />
                                                                                                    <Key frame="60" value="7.55628" />
                                                                                                    <Key frame="70" value="7.12163" />
                                                                                                    <Key frame="80" value="7.12163" />
                                                                                                    <Key frame="90" value="7.12163" />
                                                                                                    <Key frame="100" value="7.12163" />
                                                                                                    <Key frame="110" value="7.12163" />
                                                                                                    <Key frame="120" value="7.55628" />
                                                                                                    <Key frame="130" value="7.55628" />
                                                                                                    <Key frame="140" value="7.12163" />
                                                                                                    <Key frame="150" value="7.12163" />
                                                                                                    <Key frame="160" value="7.12163" />
                                                                                                    <Key frame="170" value="7.12163" />
                                                                                                    <Key frame="180" value="7.12163" />
                                                                                                    <Key frame="190" value="7.55628" />
                                                                                                    <Key frame="200" value="7.55628" />
                                                                                                    <Key frame="210" value="7.12163" />
                                                                                                    <Key frame="220" value="7.12163" />
                                                                                                    <Key frame="230" value="7.12163" />
                                                                                                    <Key frame="240" value="7.12163" />
                                                                                                    <Key frame="250" value="7.12163" />
                                                                                                    <Key frame="260" value="7.55628" />
                                                                                                    <Key frame="270" value="7.55628" />
                                                                                                    <Key frame="280" value="7.12163" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="5.89115" />
                                                                                                    <Key frame="20" value="5.89115" />
                                                                                                    <Key frame="30" value="5.89115" />
                                                                                                    <Key frame="40" value="5.89115" />
                                                                                                    <Key frame="50" value="5.35899" />
                                                                                                    <Key frame="60" value="5.35899" />
                                                                                                    <Key frame="70" value="5.89115" />
                                                                                                    <Key frame="80" value="5.89115" />
                                                                                                    <Key frame="90" value="5.89115" />
                                                                                                    <Key frame="100" value="5.89115" />
                                                                                                    <Key frame="110" value="5.89115" />
                                                                                                    <Key frame="120" value="5.35899" />
                                                                                                    <Key frame="130" value="5.35899" />
                                                                                                    <Key frame="140" value="5.89115" />
                                                                                                    <Key frame="150" value="5.89115" />
                                                                                                    <Key frame="160" value="5.89115" />
                                                                                                    <Key frame="170" value="5.89115" />
                                                                                                    <Key frame="180" value="5.89115" />
                                                                                                    <Key frame="190" value="5.35899" />
                                                                                                    <Key frame="200" value="5.35899" />
                                                                                                    <Key frame="210" value="5.89115" />
                                                                                                    <Key frame="220" value="5.89115" />
                                                                                                    <Key frame="230" value="5.89115" />
                                                                                                    <Key frame="240" value="5.89115" />
                                                                                                    <Key frame="250" value="5.89115" />
                                                                                                    <Key frame="260" value="5.35899" />
                                                                                                    <Key frame="270" value="5.35899" />
                                                                                                    <Key frame="280" value="5.89115" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-9.48991" />
                                                                                                    <Key frame="20" value="-9.48991" />
                                                                                                    <Key frame="30" value="-9.48991" />
                                                                                                    <Key frame="40" value="-9.48991" />
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                    <Key frame="60" value="-9.48991" />
                                                                                                    <Key frame="70" value="-9.48991" />
                                                                                                    <Key frame="80" value="-9.48991" />
                                                                                                    <Key frame="90" value="-9.48991" />
                                                                                                    <Key frame="100" value="-9.48991" />
                                                                                                    <Key frame="110" value="-9.48991" />
                                                                                                    <Key frame="120" value="-9.48991" />
                                                                                                    <Key frame="130" value="-9.48991" />
                                                                                                    <Key frame="140" value="-9.48991" />
                                                                                                    <Key frame="150" value="-9.48991" />
                                                                                                    <Key frame="160" value="-9.48991" />
                                                                                                    <Key frame="170" value="-9.48991" />
                                                                                                    <Key frame="180" value="-9.48991" />
                                                                                                    <Key frame="190" value="-9.48991" />
                                                                                                    <Key frame="200" value="-9.48991" />
                                                                                                    <Key frame="210" value="-9.48991" />
                                                                                                    <Key frame="220" value="-9.48991" />
                                                                                                    <Key frame="230" value="-9.48991" />
                                                                                                    <Key frame="240" value="-9.48991" />
                                                                                                    <Key frame="250" value="-9.48991" />
                                                                                                    <Key frame="260" value="-9.48991" />
                                                                                                    <Key frame="270" value="-9.48991" />
                                                                                                    <Key frame="280" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-5.10013" />
                                                                                                    <Key frame="20" value="-5.10013" />
                                                                                                    <Key frame="30" value="-5.10013" />
                                                                                                    <Key frame="40" value="-5.10013" />
                                                                                                    <Key frame="50" value="-5.29" />
                                                                                                    <Key frame="60" value="-5.29" />
                                                                                                    <Key frame="70" value="-5.10013" />
                                                                                                    <Key frame="80" value="-5.10013" />
                                                                                                    <Key frame="90" value="-5.10013" />
                                                                                                    <Key frame="100" value="-5.10013" />
                                                                                                    <Key frame="110" value="-5.10013" />
                                                                                                    <Key frame="120" value="-5.29" />
                                                                                                    <Key frame="130" value="-5.29" />
                                                                                                    <Key frame="140" value="-5.10013" />
                                                                                                    <Key frame="150" value="-5.10013" />
                                                                                                    <Key frame="160" value="-5.10013" />
                                                                                                    <Key frame="170" value="-5.10013" />
                                                                                                    <Key frame="180" value="-5.10013" />
                                                                                                    <Key frame="190" value="-5.29" />
                                                                                                    <Key frame="200" value="-5.29" />
                                                                                                    <Key frame="210" value="-5.10013" />
                                                                                                    <Key frame="220" value="-5.10013" />
                                                                                                    <Key frame="230" value="-5.10013" />
                                                                                                    <Key frame="240" value="-5.10013" />
                                                                                                    <Key frame="250" value="-5.10013" />
                                                                                                    <Key frame="260" value="-5.29" />
                                                                                                    <Key frame="270" value="-5.29" />
                                                                                                    <Key frame="280" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="91.7566" />
                                                                                                    <Key frame="20" value="75.5845" />
                                                                                                    <Key frame="30" value="50.0959" />
                                                                                                    <Key frame="40" value="51.2385" />
                                                                                                    <Key frame="50" value="34.7196" />
                                                                                                    <Key frame="60" value="44.6514" />
                                                                                                    <Key frame="70" value="62.137" />
                                                                                                    <Key frame="80" value="91.7566" />
                                                                                                    <Key frame="90" value="75.5845" />
                                                                                                    <Key frame="100" value="50.0959" />
                                                                                                    <Key frame="110" value="51.2385" />
                                                                                                    <Key frame="120" value="34.7196" />
                                                                                                    <Key frame="130" value="44.6514" />
                                                                                                    <Key frame="140" value="62.137" />
                                                                                                    <Key frame="150" value="91.7566" />
                                                                                                    <Key frame="160" value="75.5845" />
                                                                                                    <Key frame="170" value="50.0959" />
                                                                                                    <Key frame="180" value="51.2385" />
                                                                                                    <Key frame="190" value="34.7196" />
                                                                                                    <Key frame="200" value="44.6514" />
                                                                                                    <Key frame="210" value="62.137" />
                                                                                                    <Key frame="220" value="91.7566" />
                                                                                                    <Key frame="230" value="75.5845" />
                                                                                                    <Key frame="240" value="50.0959" />
                                                                                                    <Key frame="250" value="51.2385" />
                                                                                                    <Key frame="260" value="34.7196" />
                                                                                                    <Key frame="270" value="44.6514" />
                                                                                                    <Key frame="280" value="62.137" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-0.266077" />
                                                                                                    <Key frame="20" value="10.7204" />
                                                                                                    <Key frame="30" value="8.61098" />
                                                                                                    <Key frame="40" value="-12.5709" />
                                                                                                    <Key frame="50" value="-17.488" />
                                                                                                    <Key frame="60" value="-14.7634" />
                                                                                                    <Key frame="70" value="-7.03374" />
                                                                                                    <Key frame="80" value="-0.266077" />
                                                                                                    <Key frame="90" value="10.7204" />
                                                                                                    <Key frame="100" value="8.61098" />
                                                                                                    <Key frame="110" value="-12.5709" />
                                                                                                    <Key frame="120" value="-17.488" />
                                                                                                    <Key frame="130" value="-14.7634" />
                                                                                                    <Key frame="140" value="-7.03374" />
                                                                                                    <Key frame="150" value="-0.266077" />
                                                                                                    <Key frame="160" value="10.7204" />
                                                                                                    <Key frame="170" value="8.61098" />
                                                                                                    <Key frame="180" value="-12.5709" />
                                                                                                    <Key frame="190" value="-17.488" />
                                                                                                    <Key frame="200" value="-14.7634" />
                                                                                                    <Key frame="210" value="-7.03374" />
                                                                                                    <Key frame="220" value="-0.266077" />
                                                                                                    <Key frame="230" value="10.7204" />
                                                                                                    <Key frame="240" value="8.61098" />
                                                                                                    <Key frame="250" value="-12.5709" />
                                                                                                    <Key frame="260" value="-17.488" />
                                                                                                    <Key frame="270" value="-14.7634" />
                                                                                                    <Key frame="280" value="-7.03374" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="90.2624" />
                                                                                                    <Key frame="20" value="73.0356" />
                                                                                                    <Key frame="30" value="73.0356" />
                                                                                                    <Key frame="40" value="87.5378" />
                                                                                                    <Key frame="50" value="49.046" />
                                                                                                    <Key frame="60" value="47.376" />
                                                                                                    <Key frame="70" value="69.6078" />
                                                                                                    <Key frame="80" value="90.2624" />
                                                                                                    <Key frame="90" value="73.0356" />
                                                                                                    <Key frame="100" value="73.0356" />
                                                                                                    <Key frame="110" value="87.5378" />
                                                                                                    <Key frame="120" value="49.046" />
                                                                                                    <Key frame="130" value="47.376" />
                                                                                                    <Key frame="140" value="69.6078" />
                                                                                                    <Key frame="150" value="90.2624" />
                                                                                                    <Key frame="160" value="73.0356" />
                                                                                                    <Key frame="170" value="73.0356" />
                                                                                                    <Key frame="180" value="87.5378" />
                                                                                                    <Key frame="190" value="49.046" />
                                                                                                    <Key frame="200" value="47.376" />
                                                                                                    <Key frame="210" value="69.6078" />
                                                                                                    <Key frame="220" value="90.2624" />
                                                                                                    <Key frame="230" value="73.0356" />
                                                                                                    <Key frame="240" value="73.0356" />
                                                                                                    <Key frame="250" value="87.5378" />
                                                                                                    <Key frame="260" value="49.046" />
                                                                                                    <Key frame="270" value="47.376" />
                                                                                                    <Key frame="280" value="69.6078" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="5.27591" />
                                                                                                    <Key frame="20" value="5.27591" />
                                                                                                    <Key frame="30" value="5.27591" />
                                                                                                    <Key frame="40" value="5.27591" />
                                                                                                    <Key frame="50" value="5.18321" />
                                                                                                    <Key frame="60" value="5.18321" />
                                                                                                    <Key frame="70" value="5.27591" />
                                                                                                    <Key frame="80" value="5.27591" />
                                                                                                    <Key frame="90" value="5.27591" />
                                                                                                    <Key frame="100" value="5.27591" />
                                                                                                    <Key frame="110" value="5.27591" />
                                                                                                    <Key frame="120" value="5.18321" />
                                                                                                    <Key frame="130" value="5.18321" />
                                                                                                    <Key frame="140" value="5.27591" />
                                                                                                    <Key frame="150" value="5.27591" />
                                                                                                    <Key frame="160" value="5.27591" />
                                                                                                    <Key frame="170" value="5.27591" />
                                                                                                    <Key frame="180" value="5.27591" />
                                                                                                    <Key frame="190" value="5.18321" />
                                                                                                    <Key frame="200" value="5.18321" />
                                                                                                    <Key frame="210" value="5.27591" />
                                                                                                    <Key frame="220" value="5.27591" />
                                                                                                    <Key frame="230" value="5.27591" />
                                                                                                    <Key frame="240" value="5.27591" />
                                                                                                    <Key frame="250" value="5.27591" />
                                                                                                    <Key frame="260" value="5.18321" />
                                                                                                    <Key frame="270" value="5.18321" />
                                                                                                    <Key frame="280" value="5.27591" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.38531" />
                                                                                                    <Key frame="20" value="7.38531" />
                                                                                                    <Key frame="30" value="7.38531" />
                                                                                                    <Key frame="40" value="7.38531" />
                                                                                                    <Key frame="50" value="7.55628" />
                                                                                                    <Key frame="60" value="7.55628" />
                                                                                                    <Key frame="70" value="7.38531" />
                                                                                                    <Key frame="80" value="7.38531" />
                                                                                                    <Key frame="90" value="7.38531" />
                                                                                                    <Key frame="100" value="7.38531" />
                                                                                                    <Key frame="110" value="7.38531" />
                                                                                                    <Key frame="120" value="7.55628" />
                                                                                                    <Key frame="130" value="7.55628" />
                                                                                                    <Key frame="140" value="7.38531" />
                                                                                                    <Key frame="150" value="7.38531" />
                                                                                                    <Key frame="160" value="7.38531" />
                                                                                                    <Key frame="170" value="7.38531" />
                                                                                                    <Key frame="180" value="7.38531" />
                                                                                                    <Key frame="190" value="7.55628" />
                                                                                                    <Key frame="200" value="7.55628" />
                                                                                                    <Key frame="210" value="7.38531" />
                                                                                                    <Key frame="220" value="7.38531" />
                                                                                                    <Key frame="230" value="7.38531" />
                                                                                                    <Key frame="240" value="7.38531" />
                                                                                                    <Key frame="250" value="7.38531" />
                                                                                                    <Key frame="260" value="7.55628" />
                                                                                                    <Key frame="270" value="7.55628" />
                                                                                                    <Key frame="280" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="45.2666" />
                                                                                                    <Key frame="20" value="36.3017" />
                                                                                                    <Key frame="30" value="18.2839" />
                                                                                                    <Key frame="40" value="18.2839" />
                                                                                                    <Key frame="50" value="38.1426" />
                                                                                                    <Key frame="60" value="71.6294" />
                                                                                                    <Key frame="70" value="82.9722" />
                                                                                                    <Key frame="80" value="45.2666" />
                                                                                                    <Key frame="90" value="36.3017" />
                                                                                                    <Key frame="100" value="18.2839" />
                                                                                                    <Key frame="110" value="18.2839" />
                                                                                                    <Key frame="120" value="38.1426" />
                                                                                                    <Key frame="130" value="71.6294" />
                                                                                                    <Key frame="140" value="82.9722" />
                                                                                                    <Key frame="150" value="45.2666" />
                                                                                                    <Key frame="160" value="36.3017" />
                                                                                                    <Key frame="170" value="18.2839" />
                                                                                                    <Key frame="180" value="18.2839" />
                                                                                                    <Key frame="190" value="38.1426" />
                                                                                                    <Key frame="200" value="71.6294" />
                                                                                                    <Key frame="210" value="82.9722" />
                                                                                                    <Key frame="220" value="45.2666" />
                                                                                                    <Key frame="230" value="36.3017" />
                                                                                                    <Key frame="240" value="18.2839" />
                                                                                                    <Key frame="250" value="18.2839" />
                                                                                                    <Key frame="260" value="38.1426" />
                                                                                                    <Key frame="270" value="71.6294" />
                                                                                                    <Key frame="280" value="82.9722" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="40.0762" />
                                                                                                    <Key frame="20" value="37.1758" />
                                                                                                    <Key frame="30" value="38.7579" />
                                                                                                    <Key frame="40" value="52.6447" />
                                                                                                    <Key frame="50" value="90.3551" />
                                                                                                    <Key frame="60" value="90.3551" />
                                                                                                    <Key frame="70" value="84.7252" />
                                                                                                    <Key frame="80" value="40.0762" />
                                                                                                    <Key frame="90" value="37.1758" />
                                                                                                    <Key frame="100" value="38.7579" />
                                                                                                    <Key frame="110" value="52.6447" />
                                                                                                    <Key frame="120" value="90.3551" />
                                                                                                    <Key frame="130" value="90.3551" />
                                                                                                    <Key frame="140" value="84.7252" />
                                                                                                    <Key frame="150" value="40.0762" />
                                                                                                    <Key frame="160" value="37.1758" />
                                                                                                    <Key frame="170" value="38.7579" />
                                                                                                    <Key frame="180" value="52.6447" />
                                                                                                    <Key frame="190" value="90.3551" />
                                                                                                    <Key frame="200" value="90.3551" />
                                                                                                    <Key frame="210" value="84.7252" />
                                                                                                    <Key frame="220" value="40.0762" />
                                                                                                    <Key frame="230" value="37.1758" />
                                                                                                    <Key frame="240" value="38.7579" />
                                                                                                    <Key frame="250" value="52.6447" />
                                                                                                    <Key frame="260" value="90.3551" />
                                                                                                    <Key frame="270" value="90.3551" />
                                                                                                    <Key frame="280" value="84.7252" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="10" value="0.3072" />
                                                                                                    <Key frame="20" value="0.2984" />
                                                                                                    <Key frame="30" value="0.2984" />
                                                                                                    <Key frame="40" value="0.2984" />
                                                                                                    <Key frame="50" value="0.34" />
                                                                                                    <Key frame="60" value="0.3972" />
                                                                                                    <Key frame="70" value="0.3828" />
                                                                                                    <Key frame="80" value="0.3072" />
                                                                                                    <Key frame="90" value="0.2984" />
                                                                                                    <Key frame="100" value="0.2984" />
                                                                                                    <Key frame="110" value="0.2984" />
                                                                                                    <Key frame="120" value="0.34" />
                                                                                                    <Key frame="130" value="0.3972" />
                                                                                                    <Key frame="140" value="0.3828" />
                                                                                                    <Key frame="150" value="0.3072" />
                                                                                                    <Key frame="160" value="0.2984" />
                                                                                                    <Key frame="170" value="0.2984" />
                                                                                                    <Key frame="180" value="0.2984" />
                                                                                                    <Key frame="190" value="0.34" />
                                                                                                    <Key frame="200" value="0.3972" />
                                                                                                    <Key frame="210" value="0.3828" />
                                                                                                    <Key frame="220" value="0.3072" />
                                                                                                    <Key frame="230" value="0.2984" />
                                                                                                    <Key frame="240" value="0.2984" />
                                                                                                    <Key frame="250" value="0.2984" />
                                                                                                    <Key frame="260" value="0.34" />
                                                                                                    <Key frame="270" value="0.3972" />
                                                                                                    <Key frame="280" value="0.3828" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.55628" />
                                                                                                    <Key frame="20" value="7.55628" />
                                                                                                    <Key frame="30" value="7.55628" />
                                                                                                    <Key frame="40" value="7.55628" />
                                                                                                    <Key frame="50" value="7.12163" />
                                                                                                    <Key frame="60" value="7.12163" />
                                                                                                    <Key frame="70" value="7.55628" />
                                                                                                    <Key frame="80" value="7.55628" />
                                                                                                    <Key frame="90" value="7.55628" />
                                                                                                    <Key frame="100" value="7.55628" />
                                                                                                    <Key frame="110" value="7.55628" />
                                                                                                    <Key frame="120" value="7.12163" />
                                                                                                    <Key frame="130" value="7.12163" />
                                                                                                    <Key frame="140" value="7.55628" />
                                                                                                    <Key frame="150" value="7.55628" />
                                                                                                    <Key frame="160" value="7.55628" />
                                                                                                    <Key frame="170" value="7.55628" />
                                                                                                    <Key frame="180" value="7.55628" />
                                                                                                    <Key frame="190" value="7.12163" />
                                                                                                    <Key frame="200" value="7.12163" />
                                                                                                    <Key frame="210" value="7.55628" />
                                                                                                    <Key frame="220" value="7.55628" />
                                                                                                    <Key frame="230" value="7.55628" />
                                                                                                    <Key frame="240" value="7.55628" />
                                                                                                    <Key frame="250" value="7.55628" />
                                                                                                    <Key frame="260" value="7.12163" />
                                                                                                    <Key frame="270" value="7.12163" />
                                                                                                    <Key frame="280" value="7.55628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-5.35899" />
                                                                                                    <Key frame="20" value="-5.35899" />
                                                                                                    <Key frame="30" value="-5.35899" />
                                                                                                    <Key frame="40" value="-5.35899" />
                                                                                                    <Key frame="50" value="-5.89115" />
                                                                                                    <Key frame="60" value="-5.89115" />
                                                                                                    <Key frame="70" value="-5.35899" />
                                                                                                    <Key frame="80" value="-5.35899" />
                                                                                                    <Key frame="90" value="-5.35899" />
                                                                                                    <Key frame="100" value="-5.35899" />
                                                                                                    <Key frame="110" value="-5.35899" />
                                                                                                    <Key frame="120" value="-5.89115" />
                                                                                                    <Key frame="130" value="-5.89115" />
                                                                                                    <Key frame="140" value="-5.35899" />
                                                                                                    <Key frame="150" value="-5.35899" />
                                                                                                    <Key frame="160" value="-5.35899" />
                                                                                                    <Key frame="170" value="-5.35899" />
                                                                                                    <Key frame="180" value="-5.35899" />
                                                                                                    <Key frame="190" value="-5.89115" />
                                                                                                    <Key frame="200" value="-5.89115" />
                                                                                                    <Key frame="210" value="-5.35899" />
                                                                                                    <Key frame="220" value="-5.35899" />
                                                                                                    <Key frame="230" value="-5.35899" />
                                                                                                    <Key frame="240" value="-5.35899" />
                                                                                                    <Key frame="250" value="-5.35899" />
                                                                                                    <Key frame="260" value="-5.89115" />
                                                                                                    <Key frame="270" value="-5.89115" />
                                                                                                    <Key frame="280" value="-5.35899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-9.48991" />
                                                                                                    <Key frame="20" value="-9.48991" />
                                                                                                    <Key frame="30" value="-9.48991" />
                                                                                                    <Key frame="40" value="-9.48991" />
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                    <Key frame="60" value="-9.48991" />
                                                                                                    <Key frame="70" value="-9.48991" />
                                                                                                    <Key frame="80" value="-9.48991" />
                                                                                                    <Key frame="90" value="-9.48991" />
                                                                                                    <Key frame="100" value="-9.48991" />
                                                                                                    <Key frame="110" value="-9.48991" />
                                                                                                    <Key frame="120" value="-9.48991" />
                                                                                                    <Key frame="130" value="-9.48991" />
                                                                                                    <Key frame="140" value="-9.48991" />
                                                                                                    <Key frame="150" value="-9.48991" />
                                                                                                    <Key frame="160" value="-9.48991" />
                                                                                                    <Key frame="170" value="-9.48991" />
                                                                                                    <Key frame="180" value="-9.48991" />
                                                                                                    <Key frame="190" value="-9.48991" />
                                                                                                    <Key frame="200" value="-9.48991" />
                                                                                                    <Key frame="210" value="-9.48991" />
                                                                                                    <Key frame="220" value="-9.48991" />
                                                                                                    <Key frame="230" value="-9.48991" />
                                                                                                    <Key frame="240" value="-9.48991" />
                                                                                                    <Key frame="250" value="-9.48991" />
                                                                                                    <Key frame="260" value="-9.48991" />
                                                                                                    <Key frame="270" value="-9.48991" />
                                                                                                    <Key frame="280" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-5.2711" />
                                                                                                    <Key frame="20" value="-5.29" />
                                                                                                    <Key frame="30" value="-5.29" />
                                                                                                    <Key frame="40" value="-5.29" />
                                                                                                    <Key frame="50" value="-5.10013" />
                                                                                                    <Key frame="60" value="-5.10013" />
                                                                                                    <Key frame="70" value="-5.2711" />
                                                                                                    <Key frame="80" value="-5.2711" />
                                                                                                    <Key frame="90" value="-5.29" />
                                                                                                    <Key frame="100" value="-5.29" />
                                                                                                    <Key frame="110" value="-5.29" />
                                                                                                    <Key frame="120" value="-5.10013" />
                                                                                                    <Key frame="130" value="-5.10013" />
                                                                                                    <Key frame="140" value="-5.2711" />
                                                                                                    <Key frame="150" value="-5.2711" />
                                                                                                    <Key frame="160" value="-5.29" />
                                                                                                    <Key frame="170" value="-5.29" />
                                                                                                    <Key frame="180" value="-5.29" />
                                                                                                    <Key frame="190" value="-5.10013" />
                                                                                                    <Key frame="200" value="-5.10013" />
                                                                                                    <Key frame="210" value="-5.2711" />
                                                                                                    <Key frame="220" value="-5.2711" />
                                                                                                    <Key frame="230" value="-5.29" />
                                                                                                    <Key frame="240" value="-5.29" />
                                                                                                    <Key frame="250" value="-5.29" />
                                                                                                    <Key frame="260" value="-5.10013" />
                                                                                                    <Key frame="270" value="-5.10013" />
                                                                                                    <Key frame="280" value="-5.2711" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="59.2414" />
                                                                                                    <Key frame="20" value="44.6514" />
                                                                                                    <Key frame="30" value="34.7196" />
                                                                                                    <Key frame="40" value="37.2685" />
                                                                                                    <Key frame="50" value="50.0959" />
                                                                                                    <Key frame="60" value="75.5845" />
                                                                                                    <Key frame="70" value="91.3219" />
                                                                                                    <Key frame="80" value="59.2414" />
                                                                                                    <Key frame="90" value="44.6514" />
                                                                                                    <Key frame="100" value="34.7196" />
                                                                                                    <Key frame="110" value="37.2685" />
                                                                                                    <Key frame="120" value="50.0959" />
                                                                                                    <Key frame="130" value="75.5845" />
                                                                                                    <Key frame="140" value="91.3219" />
                                                                                                    <Key frame="150" value="59.2414" />
                                                                                                    <Key frame="160" value="44.6514" />
                                                                                                    <Key frame="170" value="34.7196" />
                                                                                                    <Key frame="180" value="37.2685" />
                                                                                                    <Key frame="190" value="50.0959" />
                                                                                                    <Key frame="200" value="75.5845" />
                                                                                                    <Key frame="210" value="91.3219" />
                                                                                                    <Key frame="220" value="59.2414" />
                                                                                                    <Key frame="230" value="44.6514" />
                                                                                                    <Key frame="240" value="34.7196" />
                                                                                                    <Key frame="250" value="37.2685" />
                                                                                                    <Key frame="260" value="50.0959" />
                                                                                                    <Key frame="270" value="75.5845" />
                                                                                                    <Key frame="280" value="91.3219" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.73207" />
                                                                                                    <Key frame="20" value="14.7634" />
                                                                                                    <Key frame="30" value="17.488" />
                                                                                                    <Key frame="40" value="10.8962" />
                                                                                                    <Key frame="50" value="-8.61098" />
                                                                                                    <Key frame="60" value="-10.7204" />
                                                                                                    <Key frame="70" value="0.876518" />
                                                                                                    <Key frame="80" value="7.73207" />
                                                                                                    <Key frame="90" value="14.7634" />
                                                                                                    <Key frame="100" value="17.488" />
                                                                                                    <Key frame="110" value="10.8962" />
                                                                                                    <Key frame="120" value="-8.61098" />
                                                                                                    <Key frame="130" value="-10.7204" />
                                                                                                    <Key frame="140" value="0.876518" />
                                                                                                    <Key frame="150" value="7.73207" />
                                                                                                    <Key frame="160" value="14.7634" />
                                                                                                    <Key frame="170" value="17.488" />
                                                                                                    <Key frame="180" value="10.8962" />
                                                                                                    <Key frame="190" value="-8.61098" />
                                                                                                    <Key frame="200" value="-10.7204" />
                                                                                                    <Key frame="210" value="0.876518" />
                                                                                                    <Key frame="220" value="7.73207" />
                                                                                                    <Key frame="230" value="14.7634" />
                                                                                                    <Key frame="240" value="17.488" />
                                                                                                    <Key frame="250" value="10.8962" />
                                                                                                    <Key frame="260" value="-8.61098" />
                                                                                                    <Key frame="270" value="-10.7204" />
                                                                                                    <Key frame="280" value="0.876518" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-67.9427" />
                                                                                                    <Key frame="20" value="-47.376" />
                                                                                                    <Key frame="30" value="-49.046" />
                                                                                                    <Key frame="40" value="-64.5149" />
                                                                                                    <Key frame="50" value="-73.0356" />
                                                                                                    <Key frame="60" value="-73.0356" />
                                                                                                    <Key frame="70" value="-90.7946" />
                                                                                                    <Key frame="80" value="-67.9427" />
                                                                                                    <Key frame="90" value="-47.376" />
                                                                                                    <Key frame="100" value="-49.046" />
                                                                                                    <Key frame="110" value="-64.5149" />
                                                                                                    <Key frame="120" value="-73.0356" />
                                                                                                    <Key frame="130" value="-73.0356" />
                                                                                                    <Key frame="140" value="-90.7946" />
                                                                                                    <Key frame="150" value="-67.9427" />
                                                                                                    <Key frame="160" value="-47.376" />
                                                                                                    <Key frame="170" value="-49.046" />
                                                                                                    <Key frame="180" value="-64.5149" />
                                                                                                    <Key frame="190" value="-73.0356" />
                                                                                                    <Key frame="200" value="-73.0356" />
                                                                                                    <Key frame="210" value="-90.7946" />
                                                                                                    <Key frame="220" value="-67.9427" />
                                                                                                    <Key frame="230" value="-47.376" />
                                                                                                    <Key frame="240" value="-49.046" />
                                                                                                    <Key frame="250" value="-64.5149" />
                                                                                                    <Key frame="260" value="-73.0356" />
                                                                                                    <Key frame="270" value="-73.0356" />
                                                                                                    <Key frame="280" value="-90.7946" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Hands_in_the_air" id="12" localization="8" tooltip="Put your hands in the air like you just don&apos;t care" x="689" y="387">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Raise_arms" id="1" localization="8" tooltip="" x="421" y="630">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="50">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.49471" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-0.969218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-32.166" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-63.1087" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="50" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="5.53478" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-66.888" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="18.8943" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-35.9501" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="32.166" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="63.1087" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="50" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-5.53478" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-66.888" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-18.8943" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="35.9501" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Hands_in_the_air" id="7" localization="8" tooltip="" x="420" y="482">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-8.70368" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-0.266077" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-81.0338" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-44.3877" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.45169" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-38.6748" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="46.1408" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-49.2218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="31.9071" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="64.1586" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.2872" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.73207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.62267" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-4.56796" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-63.7191" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-19.9538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="34.8027" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter (1)" id="3" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="595" y="642">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="Raise_right_hand" id="2" localization="8" tooltip="" x="661" y="483">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-8.70368" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.266077" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-31.9071" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-64.1586" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.2872" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.73207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.62267" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-4.56796" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-63.7191" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="19.9538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-34.8027" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="81.0338" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="44.3877" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-5.45169" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-38.6748" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-46.1408" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="49.2218" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="42" indexofinput="2" outputowner="41" indexofoutput="3" />
                                                                <Link inputowner="44" indexofinput="2" outputowner="42" indexofoutput="4" />
                                                                <Link inputowner="45" indexofinput="2" outputowner="42" indexofoutput="5" />
                                                                <Link inputowner="43" indexofinput="2" outputowner="42" indexofoutput="6" />
                                                                <Link inputowner="41" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="42" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="44" indexofoutput="4" />
                                                                <Link inputowner="53" indexofinput="2" outputowner="42" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="45" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="53" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="42" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="43" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="29" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="29" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="check_mood (3)" id="36" localization="8" tooltip="" x="1347" y="330">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If" id="5" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="499" y="59">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                                                <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                                                <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                                                <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&lt; or =" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                                    <Choice value="&lt;" />
                                                    <Choice value="&lt; or =" />
                                                    <Choice value="=" />
                                                    <Choice value="&gt; or =" />
                                                    <Choice value="&gt;" />
                                                    <Choice value="≠" />
                                                </Parameter>
                                                <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="0" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                                            </Box>
                                            <Box name="Get Data (3)" id="6" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="251" y="64">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="emotion" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="sad" id="7" localization="8" tooltip="Enter description here" x="709" y="196">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="Say_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="sad dialogues" id="5" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="319" y="140">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>1</keyword>
                                                                            <keyword>2</keyword>
                                                                            <keyword>3</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                    <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                </Box>
                                                                <Box name="Random Int. (1)" id="7" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="145" y="112">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                                    <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                                    <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                                    <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="3" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                                    <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                                                </Box>
                                                                <Box name="Say" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="658" y="29">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " ohh, Lord of Misery! what. have i done to be treated like this?? ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[ohh, Lord of Misery! what. have i done to be treated like this??]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (1)" id="10" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="658" y="279">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " OHHHHH GOD!!!!!!! this round might as well be as bad as my divorce!  ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[OHHHHH GOD!!!!!!! this round might as well be as bad as my divorce! ]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (2)" id="11" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="665" y="514">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Ohhhhh, this is getting interesting! waiter, get me another beer! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[Ohhhhh, this is getting interesting! waiter, get me another beer!]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Timeline (1)" id="51" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="662" y="144">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="76">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-8.96736" />
                                                                                <Key frame="39" value="-8.96736" />
                                                                                <Key frame="53" value="-9.58261" />
                                                                                <Key frame="65" value="-9.58261" />
                                                                                <Key frame="76" value="-9.58261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="0.612832" />
                                                                                <Key frame="39" value="67.4984" />
                                                                                <Key frame="53" value="-61.4387" />
                                                                                <Key frame="65" value="-5.45169" />
                                                                                <Key frame="76" value="-5.45169" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="5.2711" />
                                                                                <Key frame="39" value="5.2711" />
                                                                                <Key frame="53" value="5.2711" />
                                                                                <Key frame="65" value="5.2711" />
                                                                                <Key frame="76" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-7.55628" />
                                                                                <Key frame="39" value="-7.55628" />
                                                                                <Key frame="53" value="-7.55628" />
                                                                                <Key frame="65" value="-7.55628" />
                                                                                <Key frame="76" value="-7.55628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-13.8845" />
                                                                                <Key frame="39" value="-13.8845" />
                                                                                <Key frame="53" value="-13.8845" />
                                                                                <Key frame="65" value="-13.8845" />
                                                                                <Key frame="76" value="-13.8845" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-73.6557" />
                                                                                <Key frame="39" value="-73.6557" />
                                                                                <Key frame="53" value="-73.6557" />
                                                                                <Key frame="65" value="-73.6557" />
                                                                                <Key frame="76" value="-73.6557" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="23" value="0.028" />
                                                                                <Key frame="39" value="0.028" />
                                                                                <Key frame="53" value="0.028" />
                                                                                <Key frame="65" value="0.028" />
                                                                                <Key frame="76" value="0.028" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="7.64898" />
                                                                                <Key frame="39" value="7.64898" />
                                                                                <Key frame="53" value="7.64898" />
                                                                                <Key frame="65" value="7.64898" />
                                                                                <Key frame="76" value="7.64898" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="5.53958" />
                                                                                <Key frame="39" value="5.53958" />
                                                                                <Key frame="53" value="5.53958" />
                                                                                <Key frame="65" value="5.53958" />
                                                                                <Key frame="76" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="53" value="-9.92936" />
                                                                                <Key frame="65" value="-9.92936" />
                                                                                <Key frame="76" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-5.10013" />
                                                                                <Key frame="39" value="-5.10013" />
                                                                                <Key frame="53" value="-5.10013" />
                                                                                <Key frame="65" value="-5.10013" />
                                                                                <Key frame="76" value="-5.10013" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="16.697" />
                                                                                <Key frame="39" value="16.697" />
                                                                                <Key frame="53" value="16.697" />
                                                                                <Key frame="65" value="16.697" />
                                                                                <Key frame="76" value="16.697" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-15.9108" />
                                                                                <Key frame="39" value="-15.9108" />
                                                                                <Key frame="53" value="-16.5261" />
                                                                                <Key frame="65" value="-16.5261" />
                                                                                <Key frame="76" value="-16.5261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-17.7565" />
                                                                                <Key frame="39" value="-17.7565" />
                                                                                <Key frame="53" value="-17.7565" />
                                                                                <Key frame="65" value="-17.7565" />
                                                                                <Key frame="76" value="-17.7565" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="5.01224" />
                                                                                <Key frame="39" value="5.01224" />
                                                                                <Key frame="53" value="5.01224" />
                                                                                <Key frame="65" value="5.01224" />
                                                                                <Key frame="76" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="7.12163" />
                                                                                <Key frame="39" value="7.12163" />
                                                                                <Key frame="53" value="7.12163" />
                                                                                <Key frame="65" value="7.12163" />
                                                                                <Key frame="76" value="7.12163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="22.4148" />
                                                                                <Key frame="39" value="88.4215" />
                                                                                <Key frame="53" value="88.4215" />
                                                                                <Key frame="65" value="88.4215" />
                                                                                <Key frame="76" value="2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="69.3442" />
                                                                                <Key frame="39" value="76.0239" />
                                                                                <Key frame="53" value="75.0571" />
                                                                                <Key frame="65" value="75.0571" />
                                                                                <Key frame="76" value="71.2778" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="23" value="0.3116" />
                                                                                <Key frame="39" value="0.3116" />
                                                                                <Key frame="53" value="0.3116" />
                                                                                <Key frame="65" value="0.3116" />
                                                                                <Key frame="76" value="0.3116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="7.11683" />
                                                                                <Key frame="39" value="7.11683" />
                                                                                <Key frame="53" value="7.11683" />
                                                                                <Key frame="65" value="7.11683" />
                                                                                <Key frame="76" value="7.11683" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-5.35899" />
                                                                                <Key frame="39" value="-5.35899" />
                                                                                <Key frame="53" value="-5.35899" />
                                                                                <Key frame="65" value="-5.35899" />
                                                                                <Key frame="76" value="-5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="53" value="-9.92936" />
                                                                                <Key frame="65" value="-9.92936" />
                                                                                <Key frame="76" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-5.00743" />
                                                                                <Key frame="39" value="-5.00743" />
                                                                                <Key frame="53" value="-5.00743" />
                                                                                <Key frame="65" value="-5.00743" />
                                                                                <Key frame="76" value="-5.00743" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="84.2906" />
                                                                                <Key frame="39" value="30.9403" />
                                                                                <Key frame="53" value="31.5555" />
                                                                                <Key frame="65" value="31.5555" />
                                                                                <Key frame="76" value="85.1695" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="-11.4283" />
                                                                                <Key frame="39" value="-7.82477" />
                                                                                <Key frame="53" value="-7.82477" />
                                                                                <Key frame="65" value="-7.82477" />
                                                                                <Key frame="76" value="-4.39699" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="23" value="4.91954" />
                                                                                <Key frame="39" value="27.5956" />
                                                                                <Key frame="53" value="27.5956" />
                                                                                <Key frame="65" value="27.5956" />
                                                                                <Key frame="76" value="-7.73688" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wipe Forehead" id="3" localization="8" tooltip="This box makes the robot wipe his forehead." x="660" y="400">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="127">
                                                                        <ActuatorList model="Nao">
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-13.4498" />
                                                                                <Key frame="41" value="-35.6864" />
                                                                                <Key frame="82" value="-6.50639" />
                                                                                <Key frame="99" value="-0.353971" />
                                                                                <Key frame="113" value="-1.58446" />
                                                                                <Key frame="127" value="-2.11181" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="23" value="-1.49656" />
                                                                                <Key frame="41" value="24.5194" />
                                                                                <Key frame="82" value="17.6638" />
                                                                                <Key frame="99" value="6.41369" />
                                                                                <Key frame="113" value="-0.79343" />
                                                                                <Key frame="127" value="3.51326" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="49.4806" />
                                                                                <Key frame="38" value="49.217" />
                                                                                <Key frame="78" value="50.8869" />
                                                                                <Key frame="95" value="53.26" />
                                                                                <Key frame="109" value="58.2698" />
                                                                                <Key frame="123" value="55.9846" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="16.4333" />
                                                                                <Key frame="38" value="13.1814" />
                                                                                <Key frame="78" value="11.5993" />
                                                                                <Key frame="95" value="23.2889" />
                                                                                <Key frame="109" value="20.6522" />
                                                                                <Key frame="123" value="18.2791" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-54.8468" />
                                                                                <Key frame="38" value="-47.2003" />
                                                                                <Key frame="78" value="-57.7473" />
                                                                                <Key frame="95" value="-53.0011" />
                                                                                <Key frame="109" value="-71.2826" />
                                                                                <Key frame="123" value="-55.0226" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="20" value="-49.6564" />
                                                                                <Key frame="38" value="-49.7443" />
                                                                                <Key frame="78" value="-47.1076" />
                                                                                <Key frame="95" value="-56.8635" />
                                                                                <Key frame="109" value="-55.3694" />
                                                                                <Key frame="123" value="-56.7757" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="38" value="22.1463" />
                                                                                <Key frame="78" value="22.1463" />
                                                                                <Key frame="95" value="22.1463" />
                                                                                <Key frame="123" value="22.1463" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="38" value="0.132026" />
                                                                                <Key frame="78" value="0.132026" />
                                                                                <Key frame="95" value="0.132026" />
                                                                                <Key frame="123" value="0.132026" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="4.39699" />
                                                                                <Key frame="34" value="-34.0996" />
                                                                                <Key frame="74" value="-49.6564" />
                                                                                <Key frame="91" value="-35.1543" />
                                                                                <Key frame="105" value="33.4892" />
                                                                                <Key frame="119" value="50.5401" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-1.145" />
                                                                                <Key frame="34" value="-1.145" />
                                                                                <Key frame="74" value="-35.247" />
                                                                                <Key frame="91" value="-47.7276" />
                                                                                <Key frame="105" value="-12.8346" />
                                                                                <Key frame="119" value="-12.3072" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="-7.38531" />
                                                                                <Key frame="34" value="-16.3503" />
                                                                                <Key frame="74" value="-8.96736" />
                                                                                <Key frame="91" value="43.2403" />
                                                                                <Key frame="105" value="67.1469" />
                                                                                <Key frame="119" value="38.8457" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="15" value="73.392" />
                                                                                <Key frame="34" value="80.0718" />
                                                                                <Key frame="74" value="90.0914" />
                                                                                <Key frame="91" value="71.1068" />
                                                                                <Key frame="105" value="70.2279" />
                                                                                <Key frame="119" value="48.1671" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="-3.34229" />
                                                                                <Key frame="74" value="-2.99072" />
                                                                                <Key frame="91" value="-3.86964" />
                                                                                <Key frame="119" value="-2.1997" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="-1">
                                                                                <Key frame="34" value="0.166571" />
                                                                                <Key frame="74" value="0.166208" />
                                                                                <Key frame="91" value="0.166571" />
                                                                                <Key frame="119" value="0.166208" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="1" unit="-1" />
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="1" unit="-1" />
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                    <Resource name="Head" type="Lock" timeout="0" />
                                                                    <Resource name="Arms" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="51" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="9" indexofoutput="4" />
                                                                <Link inputowner="51" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="joy_1" id="29" localization="8" tooltip="" x="710" y="51">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Random Int." id="41" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="278" y="567">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                                                                    <Output name="output_RandomValue" type="0" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                                                                    <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                                                                    <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="3" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                                                                    <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                                                                </Box>
                                                                <Box name="Joy dialogues" id="42" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="407" y="583">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(1)):
			self.output_1(p)
		elif(p == self.typeConversion(2)):
			self.output_2(p)
		elif(p == self.typeConversion(3)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>1</keyword>
                                                                            <keyword>2</keyword>
                                                                            <keyword>3</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                    <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                </Box>
                                                                <Box name="Say" id="43" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="696" y="725">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " finally!! You know, I want to just sing and dance around!!! what a card! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[finally!! You know, I want to just sing and dance around!!! what a card!]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (1)" id="44" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="685" y="283">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " woohoo!! things are starting to look up for me  after all!!  ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[woohoo!! things are starting to look up for me  after all!! ]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Say (2)" id="45" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="694" y="511">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="504" y="143">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : "  ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " woww... not what i expected! How could this be??? Don\'t want to lose again! ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <arabic>
                                                                                                <![CDATA[]]>
</arabic>
                                                                                            <czech>
                                                                                                <![CDATA[Ahoj]]>
</czech>
                                                                                            <danish>
                                                                                                <![CDATA[Hej]]>
</danish>
                                                                                            <german>
                                                                                                <![CDATA[Hallo]]>
</german>
                                                                                            <greek>
                                                                                                <![CDATA[]]>
</greek>
                                                                                            <english>
                                                                                                <![CDATA[woww... not what i expected! How could this be??? Don't want to lose again!]]>
</english>
                                                                                            <spanish>
                                                                                                <![CDATA[Hola]]>
</spanish>
                                                                                            <finnish>
                                                                                                <![CDATA[Hei]]>
</finnish>
                                                                                            <french>
                                                                                                <![CDATA[Bonjour]]>
</french>
                                                                                            <italian>
                                                                                                <![CDATA[Ciao]]>
</italian>
                                                                                            <japanese>
                                                                                                <![CDATA[こんにちは]]>
</japanese>
                                                                                            <korean>
                                                                                                <![CDATA[안녕하세요]]>
</korean>
                                                                                            <dutch>
                                                                                                <![CDATA[Hallo]]>
</dutch>
                                                                                            <norwegian>
                                                                                                <![CDATA[]]>
</norwegian>
                                                                                            <polish>
                                                                                                <![CDATA[Cześć]]>
</polish>
                                                                                            <brazilian>
                                                                                                <![CDATA[Olá]]>
</brazilian>
                                                                                            <portuguese>
                                                                                                <![CDATA[Olá]]>
</portuguese>
                                                                                            <russian>
                                                                                                <![CDATA[Привет]]>
</russian>
                                                                                            <swedish>
                                                                                                <![CDATA[Hallå]]>
</swedish>
                                                                                            <turkish>
                                                                                                <![CDATA[Merhaba]]>
</turkish>
                                                                                            <chinese>
                                                                                                <![CDATA[]]>
</chinese>
                                                                                            <language>6</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Speech" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Timeline (2)" id="53" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="694" y="613">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="71">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList model="nao">
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-10.5494" />
                                                                                <Key frame="30" value="-10.5494" />
                                                                                <Key frame="39" value="-10.5494" />
                                                                                <Key frame="51" value="-10.5494" />
                                                                                <Key frame="61" value="-10.5494" />
                                                                                <Key frame="71" value="-10.5494" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="0.349159" />
                                                                                <Key frame="30" value="0.349159" />
                                                                                <Key frame="39" value="0.349159" />
                                                                                <Key frame="51" value="0.349159" />
                                                                                <Key frame="61" value="0.349159" />
                                                                                <Key frame="71" value="0.349159" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="5.2711" />
                                                                                <Key frame="30" value="5.2711" />
                                                                                <Key frame="39" value="5.2711" />
                                                                                <Key frame="51" value="5.2711" />
                                                                                <Key frame="61" value="5.2711" />
                                                                                <Key frame="71" value="5.2711" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-7.55628" />
                                                                                <Key frame="30" value="-7.55628" />
                                                                                <Key frame="39" value="-7.55628" />
                                                                                <Key frame="51" value="-7.55628" />
                                                                                <Key frame="61" value="-7.55628" />
                                                                                <Key frame="71" value="-7.55628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-13.6208" />
                                                                                <Key frame="30" value="-13.6208" />
                                                                                <Key frame="39" value="-13.6208" />
                                                                                <Key frame="51" value="-13.6208" />
                                                                                <Key frame="61" value="-13.6208" />
                                                                                <Key frame="71" value="-13.6208" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-73.6557" />
                                                                                <Key frame="30" value="-73.6557" />
                                                                                <Key frame="39" value="-73.6557" />
                                                                                <Key frame="51" value="-73.6557" />
                                                                                <Key frame="61" value="-73.6557" />
                                                                                <Key frame="71" value="-73.6557" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="17" value="0.0184" />
                                                                                <Key frame="30" value="0.0184" />
                                                                                <Key frame="39" value="0.0184" />
                                                                                <Key frame="51" value="0.0184" />
                                                                                <Key frame="61" value="0.0184" />
                                                                                <Key frame="71" value="0.0184" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="7.64898" />
                                                                                <Key frame="30" value="7.64898" />
                                                                                <Key frame="39" value="7.64898" />
                                                                                <Key frame="51" value="7.64898" />
                                                                                <Key frame="61" value="7.64898" />
                                                                                <Key frame="71" value="7.64898" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="5.53958" />
                                                                                <Key frame="30" value="5.53958" />
                                                                                <Key frame="39" value="5.53958" />
                                                                                <Key frame="51" value="5.53958" />
                                                                                <Key frame="61" value="5.53958" />
                                                                                <Key frame="71" value="5.53958" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-9.92936" />
                                                                                <Key frame="30" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="51" value="-9.92936" />
                                                                                <Key frame="61" value="-9.92936" />
                                                                                <Key frame="71" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-5.10013" />
                                                                                <Key frame="30" value="-5.10013" />
                                                                                <Key frame="39" value="-5.10013" />
                                                                                <Key frame="51" value="-5.10013" />
                                                                                <Key frame="61" value="-5.10013" />
                                                                                <Key frame="71" value="-5.10013" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="16.6091" />
                                                                                <Key frame="30" value="16.6091" />
                                                                                <Key frame="39" value="16.6091" />
                                                                                <Key frame="51" value="16.6091" />
                                                                                <Key frame="61" value="16.6091" />
                                                                                <Key frame="71" value="16.6091" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-16.2624" />
                                                                                <Key frame="30" value="-16.2624" />
                                                                                <Key frame="39" value="-16.2624" />
                                                                                <Key frame="51" value="-16.2624" />
                                                                                <Key frame="61" value="-16.2624" />
                                                                                <Key frame="71" value="-16.2624" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-18.2839" />
                                                                                <Key frame="30" value="-18.2839" />
                                                                                <Key frame="39" value="-18.2839" />
                                                                                <Key frame="51" value="-17.6686" />
                                                                                <Key frame="61" value="-17.6686" />
                                                                                <Key frame="71" value="-17.6686" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="5.01224" />
                                                                                <Key frame="30" value="5.01224" />
                                                                                <Key frame="39" value="5.01224" />
                                                                                <Key frame="51" value="5.01224" />
                                                                                <Key frame="61" value="5.01224" />
                                                                                <Key frame="71" value="5.01224" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="7.12163" />
                                                                                <Key frame="30" value="7.12163" />
                                                                                <Key frame="39" value="7.12163" />
                                                                                <Key frame="51" value="7.12163" />
                                                                                <Key frame="61" value="7.12163" />
                                                                                <Key frame="71" value="7.12163" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="88.2457" />
                                                                                <Key frame="30" value="80.9507" />
                                                                                <Key frame="39" value="88.4215" />
                                                                                <Key frame="51" value="74.5346" />
                                                                                <Key frame="61" value="88.5" />
                                                                                <Key frame="71" value="2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="80.4185" />
                                                                                <Key frame="30" value="2.1949" />
                                                                                <Key frame="39" value="0.524941" />
                                                                                <Key frame="51" value="10.3688" />
                                                                                <Key frame="61" value="6.50159" />
                                                                                <Key frame="71" value="-24.8758" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                <Key frame="17" value="0.3116" />
                                                                                <Key frame="30" value="0.3116" />
                                                                                <Key frame="39" value="0.3116" />
                                                                                <Key frame="51" value="0.3116" />
                                                                                <Key frame="61" value="0.3116" />
                                                                                <Key frame="71" value="0.3116" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="7.02893" />
                                                                                <Key frame="30" value="7.02893" />
                                                                                <Key frame="39" value="7.02893" />
                                                                                <Key frame="51" value="7.02893" />
                                                                                <Key frame="61" value="7.02893" />
                                                                                <Key frame="71" value="7.02893" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-5.35899" />
                                                                                <Key frame="30" value="-5.35899" />
                                                                                <Key frame="39" value="-5.35899" />
                                                                                <Key frame="51" value="-5.35899" />
                                                                                <Key frame="61" value="-5.35899" />
                                                                                <Key frame="71" value="-5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-9.92936" />
                                                                                <Key frame="30" value="-9.92936" />
                                                                                <Key frame="39" value="-9.92936" />
                                                                                <Key frame="51" value="-9.92936" />
                                                                                <Key frame="61" value="-9.92936" />
                                                                                <Key frame="71" value="-9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-5.00743" />
                                                                                <Key frame="30" value="-5.00743" />
                                                                                <Key frame="39" value="-5.00743" />
                                                                                <Key frame="51" value="-5.00743" />
                                                                                <Key frame="61" value="-5.00743" />
                                                                                <Key frame="71" value="-5.00743" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-6.2379" />
                                                                                <Key frame="30" value="-33.8359" />
                                                                                <Key frame="39" value="-33.1328" />
                                                                                <Key frame="51" value="-32.5175" />
                                                                                <Key frame="61" value="-30.2324" />
                                                                                <Key frame="71" value="80.0718" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-2.81494" />
                                                                                <Key frame="30" value="4.2164" />
                                                                                <Key frame="39" value="-29.8856" />
                                                                                <Key frame="51" value="7.29261" />
                                                                                <Key frame="61" value="-21.6238" />
                                                                                <Key frame="71" value="-3.86964" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                <Key frame="17" value="-2.72705" />
                                                                                <Key frame="30" value="45.6134" />
                                                                                <Key frame="39" value="44.8224" />
                                                                                <Key frame="51" value="44.2071" />
                                                                                <Key frame="61" value="38.5821" />
                                                                                <Key frame="71" value="104.149" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Samyukta" id="4" localization="8" tooltip="Enter description here" x="695" y="822">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="Timeline_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Output name="Timeline_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Timeline" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="681" y="107">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="280">
                                                                                            <BehaviorLayer name="behavior_layer1">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                                                                    <Diagram />
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-7.73688" />
                                                                                                    <Key frame="20" value="-6.77007" />
                                                                                                    <Key frame="30" value="-6.77007" />
                                                                                                    <Key frame="40" value="-6.77007" />
                                                                                                    <Key frame="50" value="-6.77007" />
                                                                                                    <Key frame="60" value="-6.77007" />
                                                                                                    <Key frame="70" value="-7.73688" />
                                                                                                    <Key frame="80" value="-7.73688" />
                                                                                                    <Key frame="90" value="-6.77007" />
                                                                                                    <Key frame="100" value="-6.77007" />
                                                                                                    <Key frame="110" value="-6.77007" />
                                                                                                    <Key frame="120" value="-6.77007" />
                                                                                                    <Key frame="130" value="-6.77007" />
                                                                                                    <Key frame="140" value="-7.73688" />
                                                                                                    <Key frame="150" value="-7.73688" />
                                                                                                    <Key frame="160" value="-6.77007" />
                                                                                                    <Key frame="170" value="-6.77007" />
                                                                                                    <Key frame="180" value="-6.77007" />
                                                                                                    <Key frame="190" value="-6.77007" />
                                                                                                    <Key frame="200" value="-6.77007" />
                                                                                                    <Key frame="210" value="-7.73688" />
                                                                                                    <Key frame="220" value="-7.73688" />
                                                                                                    <Key frame="230" value="-6.77007" />
                                                                                                    <Key frame="240" value="-6.77007" />
                                                                                                    <Key frame="250" value="-6.77007" />
                                                                                                    <Key frame="260" value="-6.77007" />
                                                                                                    <Key frame="270" value="-6.77007" />
                                                                                                    <Key frame="280" value="-7.73688" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="25.662" />
                                                                                                    <Key frame="20" value="15.115" />
                                                                                                    <Key frame="30" value="8.4352" />
                                                                                                    <Key frame="40" value="2.54646" />
                                                                                                    <Key frame="50" value="-8.4352" />
                                                                                                    <Key frame="60" value="-15.115" />
                                                                                                    <Key frame="70" value="-25.6668" />
                                                                                                    <Key frame="80" value="25.662" />
                                                                                                    <Key frame="90" value="15.115" />
                                                                                                    <Key frame="100" value="8.4352" />
                                                                                                    <Key frame="110" value="2.54646" />
                                                                                                    <Key frame="120" value="-8.4352" />
                                                                                                    <Key frame="130" value="-15.115" />
                                                                                                    <Key frame="140" value="-25.6668" />
                                                                                                    <Key frame="150" value="25.662" />
                                                                                                    <Key frame="160" value="15.115" />
                                                                                                    <Key frame="170" value="8.4352" />
                                                                                                    <Key frame="180" value="2.54646" />
                                                                                                    <Key frame="190" value="-8.4352" />
                                                                                                    <Key frame="200" value="-15.115" />
                                                                                                    <Key frame="210" value="-25.6668" />
                                                                                                    <Key frame="220" value="25.662" />
                                                                                                    <Key frame="230" value="15.115" />
                                                                                                    <Key frame="240" value="8.4352" />
                                                                                                    <Key frame="250" value="2.54646" />
                                                                                                    <Key frame="260" value="-8.4352" />
                                                                                                    <Key frame="270" value="-15.115" />
                                                                                                    <Key frame="280" value="-25.6668" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="5.18321" />
                                                                                                    <Key frame="20" value="5.18321" />
                                                                                                    <Key frame="30" value="5.18321" />
                                                                                                    <Key frame="40" value="5.18321" />
                                                                                                    <Key frame="50" value="5.27591" />
                                                                                                    <Key frame="60" value="5.27591" />
                                                                                                    <Key frame="70" value="5.18321" />
                                                                                                    <Key frame="80" value="5.18321" />
                                                                                                    <Key frame="90" value="5.18321" />
                                                                                                    <Key frame="100" value="5.18321" />
                                                                                                    <Key frame="110" value="5.18321" />
                                                                                                    <Key frame="120" value="5.27591" />
                                                                                                    <Key frame="130" value="5.27591" />
                                                                                                    <Key frame="140" value="5.18321" />
                                                                                                    <Key frame="150" value="5.18321" />
                                                                                                    <Key frame="160" value="5.18321" />
                                                                                                    <Key frame="170" value="5.18321" />
                                                                                                    <Key frame="180" value="5.18321" />
                                                                                                    <Key frame="190" value="5.27591" />
                                                                                                    <Key frame="200" value="5.27591" />
                                                                                                    <Key frame="210" value="5.18321" />
                                                                                                    <Key frame="220" value="5.18321" />
                                                                                                    <Key frame="230" value="5.18321" />
                                                                                                    <Key frame="240" value="5.18321" />
                                                                                                    <Key frame="250" value="5.18321" />
                                                                                                    <Key frame="260" value="5.27591" />
                                                                                                    <Key frame="270" value="5.27591" />
                                                                                                    <Key frame="280" value="5.18321" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-7.55628" />
                                                                                                    <Key frame="20" value="-7.55628" />
                                                                                                    <Key frame="30" value="-7.55628" />
                                                                                                    <Key frame="40" value="-7.55628" />
                                                                                                    <Key frame="50" value="-7.38531" />
                                                                                                    <Key frame="60" value="-7.38531" />
                                                                                                    <Key frame="70" value="-7.55628" />
                                                                                                    <Key frame="80" value="-7.55628" />
                                                                                                    <Key frame="90" value="-7.55628" />
                                                                                                    <Key frame="100" value="-7.55628" />
                                                                                                    <Key frame="110" value="-7.55628" />
                                                                                                    <Key frame="120" value="-7.38531" />
                                                                                                    <Key frame="130" value="-7.38531" />
                                                                                                    <Key frame="140" value="-7.55628" />
                                                                                                    <Key frame="150" value="-7.55628" />
                                                                                                    <Key frame="160" value="-7.55628" />
                                                                                                    <Key frame="170" value="-7.55628" />
                                                                                                    <Key frame="180" value="-7.55628" />
                                                                                                    <Key frame="190" value="-7.38531" />
                                                                                                    <Key frame="200" value="-7.38531" />
                                                                                                    <Key frame="210" value="-7.55628" />
                                                                                                    <Key frame="220" value="-7.55628" />
                                                                                                    <Key frame="230" value="-7.55628" />
                                                                                                    <Key frame="240" value="-7.55628" />
                                                                                                    <Key frame="250" value="-7.55628" />
                                                                                                    <Key frame="260" value="-7.38531" />
                                                                                                    <Key frame="270" value="-7.38531" />
                                                                                                    <Key frame="280" value="-7.55628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-83.2311" />
                                                                                                    <Key frame="20" value="-71.6294" />
                                                                                                    <Key frame="30" value="-38.1426" />
                                                                                                    <Key frame="40" value="-37.1758" />
                                                                                                    <Key frame="50" value="-18.2839" />
                                                                                                    <Key frame="60" value="-36.3017" />
                                                                                                    <Key frame="70" value="-46.6681" />
                                                                                                    <Key frame="80" value="-83.2311" />
                                                                                                    <Key frame="90" value="-71.6294" />
                                                                                                    <Key frame="100" value="-38.1426" />
                                                                                                    <Key frame="110" value="-37.1758" />
                                                                                                    <Key frame="120" value="-18.2839" />
                                                                                                    <Key frame="130" value="-36.3017" />
                                                                                                    <Key frame="140" value="-46.6681" />
                                                                                                    <Key frame="150" value="-83.2311" />
                                                                                                    <Key frame="160" value="-71.6294" />
                                                                                                    <Key frame="170" value="-38.1426" />
                                                                                                    <Key frame="180" value="-37.1758" />
                                                                                                    <Key frame="190" value="-18.2839" />
                                                                                                    <Key frame="200" value="-36.3017" />
                                                                                                    <Key frame="210" value="-46.6681" />
                                                                                                    <Key frame="220" value="-83.2311" />
                                                                                                    <Key frame="230" value="-71.6294" />
                                                                                                    <Key frame="240" value="-38.1426" />
                                                                                                    <Key frame="250" value="-37.1758" />
                                                                                                    <Key frame="260" value="-18.2839" />
                                                                                                    <Key frame="270" value="-36.3017" />
                                                                                                    <Key frame="280" value="-46.6681" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-85.8726" />
                                                                                                    <Key frame="20" value="-90.3551" />
                                                                                                    <Key frame="30" value="-90.3551" />
                                                                                                    <Key frame="40" value="-86.9273" />
                                                                                                    <Key frame="50" value="-38.7579" />
                                                                                                    <Key frame="60" value="-37.1758" />
                                                                                                    <Key frame="70" value="-41.8389" />
                                                                                                    <Key frame="80" value="-85.8726" />
                                                                                                    <Key frame="90" value="-90.3551" />
                                                                                                    <Key frame="100" value="-90.3551" />
                                                                                                    <Key frame="110" value="-86.9273" />
                                                                                                    <Key frame="120" value="-38.7579" />
                                                                                                    <Key frame="130" value="-37.1758" />
                                                                                                    <Key frame="140" value="-41.8389" />
                                                                                                    <Key frame="150" value="-85.8726" />
                                                                                                    <Key frame="160" value="-90.3551" />
                                                                                                    <Key frame="170" value="-90.3551" />
                                                                                                    <Key frame="180" value="-86.9273" />
                                                                                                    <Key frame="190" value="-38.7579" />
                                                                                                    <Key frame="200" value="-37.1758" />
                                                                                                    <Key frame="210" value="-41.8389" />
                                                                                                    <Key frame="220" value="-85.8726" />
                                                                                                    <Key frame="230" value="-90.3551" />
                                                                                                    <Key frame="240" value="-90.3551" />
                                                                                                    <Key frame="250" value="-86.9273" />
                                                                                                    <Key frame="260" value="-38.7579" />
                                                                                                    <Key frame="270" value="-37.1758" />
                                                                                                    <Key frame="280" value="-41.8389" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="10" value="0.3824" />
                                                                                                    <Key frame="20" value="0.3972" />
                                                                                                    <Key frame="30" value="0.34" />
                                                                                                    <Key frame="40" value="0.34" />
                                                                                                    <Key frame="50" value="0.2984" />
                                                                                                    <Key frame="60" value="0.2984" />
                                                                                                    <Key frame="70" value="0.3132" />
                                                                                                    <Key frame="80" value="0.3824" />
                                                                                                    <Key frame="90" value="0.3972" />
                                                                                                    <Key frame="100" value="0.34" />
                                                                                                    <Key frame="110" value="0.34" />
                                                                                                    <Key frame="120" value="0.2984" />
                                                                                                    <Key frame="130" value="0.2984" />
                                                                                                    <Key frame="140" value="0.3132" />
                                                                                                    <Key frame="150" value="0.3824" />
                                                                                                    <Key frame="160" value="0.3972" />
                                                                                                    <Key frame="170" value="0.34" />
                                                                                                    <Key frame="180" value="0.34" />
                                                                                                    <Key frame="190" value="0.2984" />
                                                                                                    <Key frame="200" value="0.2984" />
                                                                                                    <Key frame="210" value="0.3132" />
                                                                                                    <Key frame="220" value="0.3824" />
                                                                                                    <Key frame="230" value="0.3972" />
                                                                                                    <Key frame="240" value="0.34" />
                                                                                                    <Key frame="250" value="0.34" />
                                                                                                    <Key frame="260" value="0.2984" />
                                                                                                    <Key frame="270" value="0.2984" />
                                                                                                    <Key frame="280" value="0.3132" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.12163" />
                                                                                                    <Key frame="20" value="7.12163" />
                                                                                                    <Key frame="30" value="7.12163" />
                                                                                                    <Key frame="40" value="7.12163" />
                                                                                                    <Key frame="50" value="7.55628" />
                                                                                                    <Key frame="60" value="7.55628" />
                                                                                                    <Key frame="70" value="7.12163" />
                                                                                                    <Key frame="80" value="7.12163" />
                                                                                                    <Key frame="90" value="7.12163" />
                                                                                                    <Key frame="100" value="7.12163" />
                                                                                                    <Key frame="110" value="7.12163" />
                                                                                                    <Key frame="120" value="7.55628" />
                                                                                                    <Key frame="130" value="7.55628" />
                                                                                                    <Key frame="140" value="7.12163" />
                                                                                                    <Key frame="150" value="7.12163" />
                                                                                                    <Key frame="160" value="7.12163" />
                                                                                                    <Key frame="170" value="7.12163" />
                                                                                                    <Key frame="180" value="7.12163" />
                                                                                                    <Key frame="190" value="7.55628" />
                                                                                                    <Key frame="200" value="7.55628" />
                                                                                                    <Key frame="210" value="7.12163" />
                                                                                                    <Key frame="220" value="7.12163" />
                                                                                                    <Key frame="230" value="7.12163" />
                                                                                                    <Key frame="240" value="7.12163" />
                                                                                                    <Key frame="250" value="7.12163" />
                                                                                                    <Key frame="260" value="7.55628" />
                                                                                                    <Key frame="270" value="7.55628" />
                                                                                                    <Key frame="280" value="7.12163" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="5.89115" />
                                                                                                    <Key frame="20" value="5.89115" />
                                                                                                    <Key frame="30" value="5.89115" />
                                                                                                    <Key frame="40" value="5.89115" />
                                                                                                    <Key frame="50" value="5.35899" />
                                                                                                    <Key frame="60" value="5.35899" />
                                                                                                    <Key frame="70" value="5.89115" />
                                                                                                    <Key frame="80" value="5.89115" />
                                                                                                    <Key frame="90" value="5.89115" />
                                                                                                    <Key frame="100" value="5.89115" />
                                                                                                    <Key frame="110" value="5.89115" />
                                                                                                    <Key frame="120" value="5.35899" />
                                                                                                    <Key frame="130" value="5.35899" />
                                                                                                    <Key frame="140" value="5.89115" />
                                                                                                    <Key frame="150" value="5.89115" />
                                                                                                    <Key frame="160" value="5.89115" />
                                                                                                    <Key frame="170" value="5.89115" />
                                                                                                    <Key frame="180" value="5.89115" />
                                                                                                    <Key frame="190" value="5.35899" />
                                                                                                    <Key frame="200" value="5.35899" />
                                                                                                    <Key frame="210" value="5.89115" />
                                                                                                    <Key frame="220" value="5.89115" />
                                                                                                    <Key frame="230" value="5.89115" />
                                                                                                    <Key frame="240" value="5.89115" />
                                                                                                    <Key frame="250" value="5.89115" />
                                                                                                    <Key frame="260" value="5.35899" />
                                                                                                    <Key frame="270" value="5.35899" />
                                                                                                    <Key frame="280" value="5.89115" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-9.48991" />
                                                                                                    <Key frame="20" value="-9.48991" />
                                                                                                    <Key frame="30" value="-9.48991" />
                                                                                                    <Key frame="40" value="-9.48991" />
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                    <Key frame="60" value="-9.48991" />
                                                                                                    <Key frame="70" value="-9.48991" />
                                                                                                    <Key frame="80" value="-9.48991" />
                                                                                                    <Key frame="90" value="-9.48991" />
                                                                                                    <Key frame="100" value="-9.48991" />
                                                                                                    <Key frame="110" value="-9.48991" />
                                                                                                    <Key frame="120" value="-9.48991" />
                                                                                                    <Key frame="130" value="-9.48991" />
                                                                                                    <Key frame="140" value="-9.48991" />
                                                                                                    <Key frame="150" value="-9.48991" />
                                                                                                    <Key frame="160" value="-9.48991" />
                                                                                                    <Key frame="170" value="-9.48991" />
                                                                                                    <Key frame="180" value="-9.48991" />
                                                                                                    <Key frame="190" value="-9.48991" />
                                                                                                    <Key frame="200" value="-9.48991" />
                                                                                                    <Key frame="210" value="-9.48991" />
                                                                                                    <Key frame="220" value="-9.48991" />
                                                                                                    <Key frame="230" value="-9.48991" />
                                                                                                    <Key frame="240" value="-9.48991" />
                                                                                                    <Key frame="250" value="-9.48991" />
                                                                                                    <Key frame="260" value="-9.48991" />
                                                                                                    <Key frame="270" value="-9.48991" />
                                                                                                    <Key frame="280" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-5.10013" />
                                                                                                    <Key frame="20" value="-5.10013" />
                                                                                                    <Key frame="30" value="-5.10013" />
                                                                                                    <Key frame="40" value="-5.10013" />
                                                                                                    <Key frame="50" value="-5.29" />
                                                                                                    <Key frame="60" value="-5.29" />
                                                                                                    <Key frame="70" value="-5.10013" />
                                                                                                    <Key frame="80" value="-5.10013" />
                                                                                                    <Key frame="90" value="-5.10013" />
                                                                                                    <Key frame="100" value="-5.10013" />
                                                                                                    <Key frame="110" value="-5.10013" />
                                                                                                    <Key frame="120" value="-5.29" />
                                                                                                    <Key frame="130" value="-5.29" />
                                                                                                    <Key frame="140" value="-5.10013" />
                                                                                                    <Key frame="150" value="-5.10013" />
                                                                                                    <Key frame="160" value="-5.10013" />
                                                                                                    <Key frame="170" value="-5.10013" />
                                                                                                    <Key frame="180" value="-5.10013" />
                                                                                                    <Key frame="190" value="-5.29" />
                                                                                                    <Key frame="200" value="-5.29" />
                                                                                                    <Key frame="210" value="-5.10013" />
                                                                                                    <Key frame="220" value="-5.10013" />
                                                                                                    <Key frame="230" value="-5.10013" />
                                                                                                    <Key frame="240" value="-5.10013" />
                                                                                                    <Key frame="250" value="-5.10013" />
                                                                                                    <Key frame="260" value="-5.29" />
                                                                                                    <Key frame="270" value="-5.29" />
                                                                                                    <Key frame="280" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="91.7566" />
                                                                                                    <Key frame="20" value="75.5845" />
                                                                                                    <Key frame="30" value="50.0959" />
                                                                                                    <Key frame="40" value="51.2385" />
                                                                                                    <Key frame="50" value="34.7196" />
                                                                                                    <Key frame="60" value="44.6514" />
                                                                                                    <Key frame="70" value="62.137" />
                                                                                                    <Key frame="80" value="91.7566" />
                                                                                                    <Key frame="90" value="75.5845" />
                                                                                                    <Key frame="100" value="50.0959" />
                                                                                                    <Key frame="110" value="51.2385" />
                                                                                                    <Key frame="120" value="34.7196" />
                                                                                                    <Key frame="130" value="44.6514" />
                                                                                                    <Key frame="140" value="62.137" />
                                                                                                    <Key frame="150" value="91.7566" />
                                                                                                    <Key frame="160" value="75.5845" />
                                                                                                    <Key frame="170" value="50.0959" />
                                                                                                    <Key frame="180" value="51.2385" />
                                                                                                    <Key frame="190" value="34.7196" />
                                                                                                    <Key frame="200" value="44.6514" />
                                                                                                    <Key frame="210" value="62.137" />
                                                                                                    <Key frame="220" value="91.7566" />
                                                                                                    <Key frame="230" value="75.5845" />
                                                                                                    <Key frame="240" value="50.0959" />
                                                                                                    <Key frame="250" value="51.2385" />
                                                                                                    <Key frame="260" value="34.7196" />
                                                                                                    <Key frame="270" value="44.6514" />
                                                                                                    <Key frame="280" value="62.137" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-0.266077" />
                                                                                                    <Key frame="20" value="10.7204" />
                                                                                                    <Key frame="30" value="8.61098" />
                                                                                                    <Key frame="40" value="-12.5709" />
                                                                                                    <Key frame="50" value="-17.488" />
                                                                                                    <Key frame="60" value="-14.7634" />
                                                                                                    <Key frame="70" value="-7.03374" />
                                                                                                    <Key frame="80" value="-0.266077" />
                                                                                                    <Key frame="90" value="10.7204" />
                                                                                                    <Key frame="100" value="8.61098" />
                                                                                                    <Key frame="110" value="-12.5709" />
                                                                                                    <Key frame="120" value="-17.488" />
                                                                                                    <Key frame="130" value="-14.7634" />
                                                                                                    <Key frame="140" value="-7.03374" />
                                                                                                    <Key frame="150" value="-0.266077" />
                                                                                                    <Key frame="160" value="10.7204" />
                                                                                                    <Key frame="170" value="8.61098" />
                                                                                                    <Key frame="180" value="-12.5709" />
                                                                                                    <Key frame="190" value="-17.488" />
                                                                                                    <Key frame="200" value="-14.7634" />
                                                                                                    <Key frame="210" value="-7.03374" />
                                                                                                    <Key frame="220" value="-0.266077" />
                                                                                                    <Key frame="230" value="10.7204" />
                                                                                                    <Key frame="240" value="8.61098" />
                                                                                                    <Key frame="250" value="-12.5709" />
                                                                                                    <Key frame="260" value="-17.488" />
                                                                                                    <Key frame="270" value="-14.7634" />
                                                                                                    <Key frame="280" value="-7.03374" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="90.2624" />
                                                                                                    <Key frame="20" value="73.0356" />
                                                                                                    <Key frame="30" value="73.0356" />
                                                                                                    <Key frame="40" value="87.5378" />
                                                                                                    <Key frame="50" value="49.046" />
                                                                                                    <Key frame="60" value="47.376" />
                                                                                                    <Key frame="70" value="69.6078" />
                                                                                                    <Key frame="80" value="90.2624" />
                                                                                                    <Key frame="90" value="73.0356" />
                                                                                                    <Key frame="100" value="73.0356" />
                                                                                                    <Key frame="110" value="87.5378" />
                                                                                                    <Key frame="120" value="49.046" />
                                                                                                    <Key frame="130" value="47.376" />
                                                                                                    <Key frame="140" value="69.6078" />
                                                                                                    <Key frame="150" value="90.2624" />
                                                                                                    <Key frame="160" value="73.0356" />
                                                                                                    <Key frame="170" value="73.0356" />
                                                                                                    <Key frame="180" value="87.5378" />
                                                                                                    <Key frame="190" value="49.046" />
                                                                                                    <Key frame="200" value="47.376" />
                                                                                                    <Key frame="210" value="69.6078" />
                                                                                                    <Key frame="220" value="90.2624" />
                                                                                                    <Key frame="230" value="73.0356" />
                                                                                                    <Key frame="240" value="73.0356" />
                                                                                                    <Key frame="250" value="87.5378" />
                                                                                                    <Key frame="260" value="49.046" />
                                                                                                    <Key frame="270" value="47.376" />
                                                                                                    <Key frame="280" value="69.6078" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="5.27591" />
                                                                                                    <Key frame="20" value="5.27591" />
                                                                                                    <Key frame="30" value="5.27591" />
                                                                                                    <Key frame="40" value="5.27591" />
                                                                                                    <Key frame="50" value="5.18321" />
                                                                                                    <Key frame="60" value="5.18321" />
                                                                                                    <Key frame="70" value="5.27591" />
                                                                                                    <Key frame="80" value="5.27591" />
                                                                                                    <Key frame="90" value="5.27591" />
                                                                                                    <Key frame="100" value="5.27591" />
                                                                                                    <Key frame="110" value="5.27591" />
                                                                                                    <Key frame="120" value="5.18321" />
                                                                                                    <Key frame="130" value="5.18321" />
                                                                                                    <Key frame="140" value="5.27591" />
                                                                                                    <Key frame="150" value="5.27591" />
                                                                                                    <Key frame="160" value="5.27591" />
                                                                                                    <Key frame="170" value="5.27591" />
                                                                                                    <Key frame="180" value="5.27591" />
                                                                                                    <Key frame="190" value="5.18321" />
                                                                                                    <Key frame="200" value="5.18321" />
                                                                                                    <Key frame="210" value="5.27591" />
                                                                                                    <Key frame="220" value="5.27591" />
                                                                                                    <Key frame="230" value="5.27591" />
                                                                                                    <Key frame="240" value="5.27591" />
                                                                                                    <Key frame="250" value="5.27591" />
                                                                                                    <Key frame="260" value="5.18321" />
                                                                                                    <Key frame="270" value="5.18321" />
                                                                                                    <Key frame="280" value="5.27591" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.38531" />
                                                                                                    <Key frame="20" value="7.38531" />
                                                                                                    <Key frame="30" value="7.38531" />
                                                                                                    <Key frame="40" value="7.38531" />
                                                                                                    <Key frame="50" value="7.55628" />
                                                                                                    <Key frame="60" value="7.55628" />
                                                                                                    <Key frame="70" value="7.38531" />
                                                                                                    <Key frame="80" value="7.38531" />
                                                                                                    <Key frame="90" value="7.38531" />
                                                                                                    <Key frame="100" value="7.38531" />
                                                                                                    <Key frame="110" value="7.38531" />
                                                                                                    <Key frame="120" value="7.55628" />
                                                                                                    <Key frame="130" value="7.55628" />
                                                                                                    <Key frame="140" value="7.38531" />
                                                                                                    <Key frame="150" value="7.38531" />
                                                                                                    <Key frame="160" value="7.38531" />
                                                                                                    <Key frame="170" value="7.38531" />
                                                                                                    <Key frame="180" value="7.38531" />
                                                                                                    <Key frame="190" value="7.55628" />
                                                                                                    <Key frame="200" value="7.55628" />
                                                                                                    <Key frame="210" value="7.38531" />
                                                                                                    <Key frame="220" value="7.38531" />
                                                                                                    <Key frame="230" value="7.38531" />
                                                                                                    <Key frame="240" value="7.38531" />
                                                                                                    <Key frame="250" value="7.38531" />
                                                                                                    <Key frame="260" value="7.55628" />
                                                                                                    <Key frame="270" value="7.55628" />
                                                                                                    <Key frame="280" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="45.2666" />
                                                                                                    <Key frame="20" value="36.3017" />
                                                                                                    <Key frame="30" value="18.2839" />
                                                                                                    <Key frame="40" value="18.2839" />
                                                                                                    <Key frame="50" value="38.1426" />
                                                                                                    <Key frame="60" value="71.6294" />
                                                                                                    <Key frame="70" value="82.9722" />
                                                                                                    <Key frame="80" value="45.2666" />
                                                                                                    <Key frame="90" value="36.3017" />
                                                                                                    <Key frame="100" value="18.2839" />
                                                                                                    <Key frame="110" value="18.2839" />
                                                                                                    <Key frame="120" value="38.1426" />
                                                                                                    <Key frame="130" value="71.6294" />
                                                                                                    <Key frame="140" value="82.9722" />
                                                                                                    <Key frame="150" value="45.2666" />
                                                                                                    <Key frame="160" value="36.3017" />
                                                                                                    <Key frame="170" value="18.2839" />
                                                                                                    <Key frame="180" value="18.2839" />
                                                                                                    <Key frame="190" value="38.1426" />
                                                                                                    <Key frame="200" value="71.6294" />
                                                                                                    <Key frame="210" value="82.9722" />
                                                                                                    <Key frame="220" value="45.2666" />
                                                                                                    <Key frame="230" value="36.3017" />
                                                                                                    <Key frame="240" value="18.2839" />
                                                                                                    <Key frame="250" value="18.2839" />
                                                                                                    <Key frame="260" value="38.1426" />
                                                                                                    <Key frame="270" value="71.6294" />
                                                                                                    <Key frame="280" value="82.9722" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="40.0762" />
                                                                                                    <Key frame="20" value="37.1758" />
                                                                                                    <Key frame="30" value="38.7579" />
                                                                                                    <Key frame="40" value="52.6447" />
                                                                                                    <Key frame="50" value="90.3551" />
                                                                                                    <Key frame="60" value="90.3551" />
                                                                                                    <Key frame="70" value="84.7252" />
                                                                                                    <Key frame="80" value="40.0762" />
                                                                                                    <Key frame="90" value="37.1758" />
                                                                                                    <Key frame="100" value="38.7579" />
                                                                                                    <Key frame="110" value="52.6447" />
                                                                                                    <Key frame="120" value="90.3551" />
                                                                                                    <Key frame="130" value="90.3551" />
                                                                                                    <Key frame="140" value="84.7252" />
                                                                                                    <Key frame="150" value="40.0762" />
                                                                                                    <Key frame="160" value="37.1758" />
                                                                                                    <Key frame="170" value="38.7579" />
                                                                                                    <Key frame="180" value="52.6447" />
                                                                                                    <Key frame="190" value="90.3551" />
                                                                                                    <Key frame="200" value="90.3551" />
                                                                                                    <Key frame="210" value="84.7252" />
                                                                                                    <Key frame="220" value="40.0762" />
                                                                                                    <Key frame="230" value="37.1758" />
                                                                                                    <Key frame="240" value="38.7579" />
                                                                                                    <Key frame="250" value="52.6447" />
                                                                                                    <Key frame="260" value="90.3551" />
                                                                                                    <Key frame="270" value="90.3551" />
                                                                                                    <Key frame="280" value="84.7252" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="10" value="0.3072" />
                                                                                                    <Key frame="20" value="0.2984" />
                                                                                                    <Key frame="30" value="0.2984" />
                                                                                                    <Key frame="40" value="0.2984" />
                                                                                                    <Key frame="50" value="0.34" />
                                                                                                    <Key frame="60" value="0.3972" />
                                                                                                    <Key frame="70" value="0.3828" />
                                                                                                    <Key frame="80" value="0.3072" />
                                                                                                    <Key frame="90" value="0.2984" />
                                                                                                    <Key frame="100" value="0.2984" />
                                                                                                    <Key frame="110" value="0.2984" />
                                                                                                    <Key frame="120" value="0.34" />
                                                                                                    <Key frame="130" value="0.3972" />
                                                                                                    <Key frame="140" value="0.3828" />
                                                                                                    <Key frame="150" value="0.3072" />
                                                                                                    <Key frame="160" value="0.2984" />
                                                                                                    <Key frame="170" value="0.2984" />
                                                                                                    <Key frame="180" value="0.2984" />
                                                                                                    <Key frame="190" value="0.34" />
                                                                                                    <Key frame="200" value="0.3972" />
                                                                                                    <Key frame="210" value="0.3828" />
                                                                                                    <Key frame="220" value="0.3072" />
                                                                                                    <Key frame="230" value="0.2984" />
                                                                                                    <Key frame="240" value="0.2984" />
                                                                                                    <Key frame="250" value="0.2984" />
                                                                                                    <Key frame="260" value="0.34" />
                                                                                                    <Key frame="270" value="0.3972" />
                                                                                                    <Key frame="280" value="0.3828" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.55628" />
                                                                                                    <Key frame="20" value="7.55628" />
                                                                                                    <Key frame="30" value="7.55628" />
                                                                                                    <Key frame="40" value="7.55628" />
                                                                                                    <Key frame="50" value="7.12163" />
                                                                                                    <Key frame="60" value="7.12163" />
                                                                                                    <Key frame="70" value="7.55628" />
                                                                                                    <Key frame="80" value="7.55628" />
                                                                                                    <Key frame="90" value="7.55628" />
                                                                                                    <Key frame="100" value="7.55628" />
                                                                                                    <Key frame="110" value="7.55628" />
                                                                                                    <Key frame="120" value="7.12163" />
                                                                                                    <Key frame="130" value="7.12163" />
                                                                                                    <Key frame="140" value="7.55628" />
                                                                                                    <Key frame="150" value="7.55628" />
                                                                                                    <Key frame="160" value="7.55628" />
                                                                                                    <Key frame="170" value="7.55628" />
                                                                                                    <Key frame="180" value="7.55628" />
                                                                                                    <Key frame="190" value="7.12163" />
                                                                                                    <Key frame="200" value="7.12163" />
                                                                                                    <Key frame="210" value="7.55628" />
                                                                                                    <Key frame="220" value="7.55628" />
                                                                                                    <Key frame="230" value="7.55628" />
                                                                                                    <Key frame="240" value="7.55628" />
                                                                                                    <Key frame="250" value="7.55628" />
                                                                                                    <Key frame="260" value="7.12163" />
                                                                                                    <Key frame="270" value="7.12163" />
                                                                                                    <Key frame="280" value="7.55628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-5.35899" />
                                                                                                    <Key frame="20" value="-5.35899" />
                                                                                                    <Key frame="30" value="-5.35899" />
                                                                                                    <Key frame="40" value="-5.35899" />
                                                                                                    <Key frame="50" value="-5.89115" />
                                                                                                    <Key frame="60" value="-5.89115" />
                                                                                                    <Key frame="70" value="-5.35899" />
                                                                                                    <Key frame="80" value="-5.35899" />
                                                                                                    <Key frame="90" value="-5.35899" />
                                                                                                    <Key frame="100" value="-5.35899" />
                                                                                                    <Key frame="110" value="-5.35899" />
                                                                                                    <Key frame="120" value="-5.89115" />
                                                                                                    <Key frame="130" value="-5.89115" />
                                                                                                    <Key frame="140" value="-5.35899" />
                                                                                                    <Key frame="150" value="-5.35899" />
                                                                                                    <Key frame="160" value="-5.35899" />
                                                                                                    <Key frame="170" value="-5.35899" />
                                                                                                    <Key frame="180" value="-5.35899" />
                                                                                                    <Key frame="190" value="-5.89115" />
                                                                                                    <Key frame="200" value="-5.89115" />
                                                                                                    <Key frame="210" value="-5.35899" />
                                                                                                    <Key frame="220" value="-5.35899" />
                                                                                                    <Key frame="230" value="-5.35899" />
                                                                                                    <Key frame="240" value="-5.35899" />
                                                                                                    <Key frame="250" value="-5.35899" />
                                                                                                    <Key frame="260" value="-5.89115" />
                                                                                                    <Key frame="270" value="-5.89115" />
                                                                                                    <Key frame="280" value="-5.35899" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-9.48991" />
                                                                                                    <Key frame="20" value="-9.48991" />
                                                                                                    <Key frame="30" value="-9.48991" />
                                                                                                    <Key frame="40" value="-9.48991" />
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                    <Key frame="60" value="-9.48991" />
                                                                                                    <Key frame="70" value="-9.48991" />
                                                                                                    <Key frame="80" value="-9.48991" />
                                                                                                    <Key frame="90" value="-9.48991" />
                                                                                                    <Key frame="100" value="-9.48991" />
                                                                                                    <Key frame="110" value="-9.48991" />
                                                                                                    <Key frame="120" value="-9.48991" />
                                                                                                    <Key frame="130" value="-9.48991" />
                                                                                                    <Key frame="140" value="-9.48991" />
                                                                                                    <Key frame="150" value="-9.48991" />
                                                                                                    <Key frame="160" value="-9.48991" />
                                                                                                    <Key frame="170" value="-9.48991" />
                                                                                                    <Key frame="180" value="-9.48991" />
                                                                                                    <Key frame="190" value="-9.48991" />
                                                                                                    <Key frame="200" value="-9.48991" />
                                                                                                    <Key frame="210" value="-9.48991" />
                                                                                                    <Key frame="220" value="-9.48991" />
                                                                                                    <Key frame="230" value="-9.48991" />
                                                                                                    <Key frame="240" value="-9.48991" />
                                                                                                    <Key frame="250" value="-9.48991" />
                                                                                                    <Key frame="260" value="-9.48991" />
                                                                                                    <Key frame="270" value="-9.48991" />
                                                                                                    <Key frame="280" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-5.2711" />
                                                                                                    <Key frame="20" value="-5.29" />
                                                                                                    <Key frame="30" value="-5.29" />
                                                                                                    <Key frame="40" value="-5.29" />
                                                                                                    <Key frame="50" value="-5.10013" />
                                                                                                    <Key frame="60" value="-5.10013" />
                                                                                                    <Key frame="70" value="-5.2711" />
                                                                                                    <Key frame="80" value="-5.2711" />
                                                                                                    <Key frame="90" value="-5.29" />
                                                                                                    <Key frame="100" value="-5.29" />
                                                                                                    <Key frame="110" value="-5.29" />
                                                                                                    <Key frame="120" value="-5.10013" />
                                                                                                    <Key frame="130" value="-5.10013" />
                                                                                                    <Key frame="140" value="-5.2711" />
                                                                                                    <Key frame="150" value="-5.2711" />
                                                                                                    <Key frame="160" value="-5.29" />
                                                                                                    <Key frame="170" value="-5.29" />
                                                                                                    <Key frame="180" value="-5.29" />
                                                                                                    <Key frame="190" value="-5.10013" />
                                                                                                    <Key frame="200" value="-5.10013" />
                                                                                                    <Key frame="210" value="-5.2711" />
                                                                                                    <Key frame="220" value="-5.2711" />
                                                                                                    <Key frame="230" value="-5.29" />
                                                                                                    <Key frame="240" value="-5.29" />
                                                                                                    <Key frame="250" value="-5.29" />
                                                                                                    <Key frame="260" value="-5.10013" />
                                                                                                    <Key frame="270" value="-5.10013" />
                                                                                                    <Key frame="280" value="-5.2711" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="59.2414" />
                                                                                                    <Key frame="20" value="44.6514" />
                                                                                                    <Key frame="30" value="34.7196" />
                                                                                                    <Key frame="40" value="37.2685" />
                                                                                                    <Key frame="50" value="50.0959" />
                                                                                                    <Key frame="60" value="75.5845" />
                                                                                                    <Key frame="70" value="91.3219" />
                                                                                                    <Key frame="80" value="59.2414" />
                                                                                                    <Key frame="90" value="44.6514" />
                                                                                                    <Key frame="100" value="34.7196" />
                                                                                                    <Key frame="110" value="37.2685" />
                                                                                                    <Key frame="120" value="50.0959" />
                                                                                                    <Key frame="130" value="75.5845" />
                                                                                                    <Key frame="140" value="91.3219" />
                                                                                                    <Key frame="150" value="59.2414" />
                                                                                                    <Key frame="160" value="44.6514" />
                                                                                                    <Key frame="170" value="34.7196" />
                                                                                                    <Key frame="180" value="37.2685" />
                                                                                                    <Key frame="190" value="50.0959" />
                                                                                                    <Key frame="200" value="75.5845" />
                                                                                                    <Key frame="210" value="91.3219" />
                                                                                                    <Key frame="220" value="59.2414" />
                                                                                                    <Key frame="230" value="44.6514" />
                                                                                                    <Key frame="240" value="34.7196" />
                                                                                                    <Key frame="250" value="37.2685" />
                                                                                                    <Key frame="260" value="50.0959" />
                                                                                                    <Key frame="270" value="75.5845" />
                                                                                                    <Key frame="280" value="91.3219" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="7.73207" />
                                                                                                    <Key frame="20" value="14.7634" />
                                                                                                    <Key frame="30" value="17.488" />
                                                                                                    <Key frame="40" value="10.8962" />
                                                                                                    <Key frame="50" value="-8.61098" />
                                                                                                    <Key frame="60" value="-10.7204" />
                                                                                                    <Key frame="70" value="0.876518" />
                                                                                                    <Key frame="80" value="7.73207" />
                                                                                                    <Key frame="90" value="14.7634" />
                                                                                                    <Key frame="100" value="17.488" />
                                                                                                    <Key frame="110" value="10.8962" />
                                                                                                    <Key frame="120" value="-8.61098" />
                                                                                                    <Key frame="130" value="-10.7204" />
                                                                                                    <Key frame="140" value="0.876518" />
                                                                                                    <Key frame="150" value="7.73207" />
                                                                                                    <Key frame="160" value="14.7634" />
                                                                                                    <Key frame="170" value="17.488" />
                                                                                                    <Key frame="180" value="10.8962" />
                                                                                                    <Key frame="190" value="-8.61098" />
                                                                                                    <Key frame="200" value="-10.7204" />
                                                                                                    <Key frame="210" value="0.876518" />
                                                                                                    <Key frame="220" value="7.73207" />
                                                                                                    <Key frame="230" value="14.7634" />
                                                                                                    <Key frame="240" value="17.488" />
                                                                                                    <Key frame="250" value="10.8962" />
                                                                                                    <Key frame="260" value="-8.61098" />
                                                                                                    <Key frame="270" value="-10.7204" />
                                                                                                    <Key frame="280" value="0.876518" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="10" value="-67.9427" />
                                                                                                    <Key frame="20" value="-47.376" />
                                                                                                    <Key frame="30" value="-49.046" />
                                                                                                    <Key frame="40" value="-64.5149" />
                                                                                                    <Key frame="50" value="-73.0356" />
                                                                                                    <Key frame="60" value="-73.0356" />
                                                                                                    <Key frame="70" value="-90.7946" />
                                                                                                    <Key frame="80" value="-67.9427" />
                                                                                                    <Key frame="90" value="-47.376" />
                                                                                                    <Key frame="100" value="-49.046" />
                                                                                                    <Key frame="110" value="-64.5149" />
                                                                                                    <Key frame="120" value="-73.0356" />
                                                                                                    <Key frame="130" value="-73.0356" />
                                                                                                    <Key frame="140" value="-90.7946" />
                                                                                                    <Key frame="150" value="-67.9427" />
                                                                                                    <Key frame="160" value="-47.376" />
                                                                                                    <Key frame="170" value="-49.046" />
                                                                                                    <Key frame="180" value="-64.5149" />
                                                                                                    <Key frame="190" value="-73.0356" />
                                                                                                    <Key frame="200" value="-73.0356" />
                                                                                                    <Key frame="210" value="-90.7946" />
                                                                                                    <Key frame="220" value="-67.9427" />
                                                                                                    <Key frame="230" value="-47.376" />
                                                                                                    <Key frame="240" value="-49.046" />
                                                                                                    <Key frame="250" value="-64.5149" />
                                                                                                    <Key frame="260" value="-73.0356" />
                                                                                                    <Key frame="270" value="-73.0356" />
                                                                                                    <Key frame="280" value="-90.7946" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Hands_in_the_air" id="12" localization="8" tooltip="Put your hands in the air like you just don&apos;t care" x="689" y="387">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="input" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Raise_arms" id="1" localization="8" tooltip="" x="421" y="630">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="50">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.49471" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-0.969218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-32.166" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-63.1087" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="50" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="5.53478" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-66.888" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="18.8943" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-35.9501" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="32.166" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="63.1087" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="50" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="7.64898" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-5.53478" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-9.48991" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-4.83644" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-66.888" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="-18.8943" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="50" value="35.9501" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Hands_in_the_air" id="7" localization="8" tooltip="" x="420" y="482">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="nao">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-8.70368" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-0.266077" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-81.0338" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-44.3877" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.45169" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-38.6748" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="46.1408" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-49.2218" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="5.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="31.9071" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="64.1586" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                                                                    <Key frame="14" value="0.2872" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="7.73207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-5.62267" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-4.56796" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-63.7191" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="-19.9538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                                                                    <Key frame="14" value="34.8027" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Counter (1)" id="3" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="595" y="642">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                                        <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                                        <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                                        <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                                        <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                                        <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                                        <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="3" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                                    </Box>
                                                                                    <Box name="Raise_right_hand" id="2" localization="8" tooltip="" x="661" y="483">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="14">
                                                                                            <ActuatorList model="">
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-8.70368" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.266077" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-31.9071" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-64.1586" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.2872" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.73207" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.62267" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-4.56796" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-63.7191" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="19.9538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-34.8027" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="5.00743" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.29261" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="81.0338" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="44.3877" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="0.2964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="7.38531" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-5.45169" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-9.5778" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-5.10013" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-38.6748" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="-46.1408" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="-1">
                                                                                                    <Key frame="14" value="49.2218" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="42" indexofinput="2" outputowner="41" indexofoutput="3" />
                                                                <Link inputowner="44" indexofinput="2" outputowner="42" indexofoutput="4" />
                                                                <Link inputowner="45" indexofinput="2" outputowner="42" indexofoutput="5" />
                                                                <Link inputowner="43" indexofinput="2" outputowner="42" indexofoutput="6" />
                                                                <Link inputowner="41" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="12" indexofoutput="3" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="42" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="44" indexofoutput="4" />
                                                                <Link inputowner="53" indexofinput="2" outputowner="42" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="45" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="53" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="42" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="43" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="29" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="29" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Samyukta" id="11" localization="8" tooltip="Enter description here" x="2044" y="977">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Timeline_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="Timeline_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Timeline" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="681" y="107">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="280">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList model="nao">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-7.73688" />
                                                            <Key frame="20" value="-6.77007" />
                                                            <Key frame="30" value="-6.77007" />
                                                            <Key frame="40" value="-6.77007" />
                                                            <Key frame="50" value="-6.77007" />
                                                            <Key frame="60" value="-6.77007" />
                                                            <Key frame="70" value="-7.73688" />
                                                            <Key frame="80" value="-7.73688" />
                                                            <Key frame="90" value="-6.77007" />
                                                            <Key frame="100" value="-6.77007" />
                                                            <Key frame="110" value="-6.77007" />
                                                            <Key frame="120" value="-6.77007" />
                                                            <Key frame="130" value="-6.77007" />
                                                            <Key frame="140" value="-7.73688" />
                                                            <Key frame="150" value="-7.73688" />
                                                            <Key frame="160" value="-6.77007" />
                                                            <Key frame="170" value="-6.77007" />
                                                            <Key frame="180" value="-6.77007" />
                                                            <Key frame="190" value="-6.77007" />
                                                            <Key frame="200" value="-6.77007" />
                                                            <Key frame="210" value="-7.73688" />
                                                            <Key frame="220" value="-7.73688" />
                                                            <Key frame="230" value="-6.77007" />
                                                            <Key frame="240" value="-6.77007" />
                                                            <Key frame="250" value="-6.77007" />
                                                            <Key frame="260" value="-6.77007" />
                                                            <Key frame="270" value="-6.77007" />
                                                            <Key frame="280" value="-7.73688" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="25.662" />
                                                            <Key frame="20" value="15.115" />
                                                            <Key frame="30" value="8.4352" />
                                                            <Key frame="40" value="2.54646" />
                                                            <Key frame="50" value="-8.4352" />
                                                            <Key frame="60" value="-15.115" />
                                                            <Key frame="70" value="-25.6668" />
                                                            <Key frame="80" value="25.662" />
                                                            <Key frame="90" value="15.115" />
                                                            <Key frame="100" value="8.4352" />
                                                            <Key frame="110" value="2.54646" />
                                                            <Key frame="120" value="-8.4352" />
                                                            <Key frame="130" value="-15.115" />
                                                            <Key frame="140" value="-25.6668" />
                                                            <Key frame="150" value="25.662" />
                                                            <Key frame="160" value="15.115" />
                                                            <Key frame="170" value="8.4352" />
                                                            <Key frame="180" value="2.54646" />
                                                            <Key frame="190" value="-8.4352" />
                                                            <Key frame="200" value="-15.115" />
                                                            <Key frame="210" value="-25.6668" />
                                                            <Key frame="220" value="25.662" />
                                                            <Key frame="230" value="15.115" />
                                                            <Key frame="240" value="8.4352" />
                                                            <Key frame="250" value="2.54646" />
                                                            <Key frame="260" value="-8.4352" />
                                                            <Key frame="270" value="-15.115" />
                                                            <Key frame="280" value="-25.6668" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="5.18321" />
                                                            <Key frame="20" value="5.18321" />
                                                            <Key frame="30" value="5.18321" />
                                                            <Key frame="40" value="5.18321" />
                                                            <Key frame="50" value="5.27591" />
                                                            <Key frame="60" value="5.27591" />
                                                            <Key frame="70" value="5.18321" />
                                                            <Key frame="80" value="5.18321" />
                                                            <Key frame="90" value="5.18321" />
                                                            <Key frame="100" value="5.18321" />
                                                            <Key frame="110" value="5.18321" />
                                                            <Key frame="120" value="5.27591" />
                                                            <Key frame="130" value="5.27591" />
                                                            <Key frame="140" value="5.18321" />
                                                            <Key frame="150" value="5.18321" />
                                                            <Key frame="160" value="5.18321" />
                                                            <Key frame="170" value="5.18321" />
                                                            <Key frame="180" value="5.18321" />
                                                            <Key frame="190" value="5.27591" />
                                                            <Key frame="200" value="5.27591" />
                                                            <Key frame="210" value="5.18321" />
                                                            <Key frame="220" value="5.18321" />
                                                            <Key frame="230" value="5.18321" />
                                                            <Key frame="240" value="5.18321" />
                                                            <Key frame="250" value="5.18321" />
                                                            <Key frame="260" value="5.27591" />
                                                            <Key frame="270" value="5.27591" />
                                                            <Key frame="280" value="5.18321" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-7.55628" />
                                                            <Key frame="20" value="-7.55628" />
                                                            <Key frame="30" value="-7.55628" />
                                                            <Key frame="40" value="-7.55628" />
                                                            <Key frame="50" value="-7.38531" />
                                                            <Key frame="60" value="-7.38531" />
                                                            <Key frame="70" value="-7.55628" />
                                                            <Key frame="80" value="-7.55628" />
                                                            <Key frame="90" value="-7.55628" />
                                                            <Key frame="100" value="-7.55628" />
                                                            <Key frame="110" value="-7.55628" />
                                                            <Key frame="120" value="-7.38531" />
                                                            <Key frame="130" value="-7.38531" />
                                                            <Key frame="140" value="-7.55628" />
                                                            <Key frame="150" value="-7.55628" />
                                                            <Key frame="160" value="-7.55628" />
                                                            <Key frame="170" value="-7.55628" />
                                                            <Key frame="180" value="-7.55628" />
                                                            <Key frame="190" value="-7.38531" />
                                                            <Key frame="200" value="-7.38531" />
                                                            <Key frame="210" value="-7.55628" />
                                                            <Key frame="220" value="-7.55628" />
                                                            <Key frame="230" value="-7.55628" />
                                                            <Key frame="240" value="-7.55628" />
                                                            <Key frame="250" value="-7.55628" />
                                                            <Key frame="260" value="-7.38531" />
                                                            <Key frame="270" value="-7.38531" />
                                                            <Key frame="280" value="-7.55628" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-83.2311" />
                                                            <Key frame="20" value="-71.6294" />
                                                            <Key frame="30" value="-38.1426" />
                                                            <Key frame="40" value="-37.1758" />
                                                            <Key frame="50" value="-18.2839" />
                                                            <Key frame="60" value="-36.3017" />
                                                            <Key frame="70" value="-46.6681" />
                                                            <Key frame="80" value="-83.2311" />
                                                            <Key frame="90" value="-71.6294" />
                                                            <Key frame="100" value="-38.1426" />
                                                            <Key frame="110" value="-37.1758" />
                                                            <Key frame="120" value="-18.2839" />
                                                            <Key frame="130" value="-36.3017" />
                                                            <Key frame="140" value="-46.6681" />
                                                            <Key frame="150" value="-83.2311" />
                                                            <Key frame="160" value="-71.6294" />
                                                            <Key frame="170" value="-38.1426" />
                                                            <Key frame="180" value="-37.1758" />
                                                            <Key frame="190" value="-18.2839" />
                                                            <Key frame="200" value="-36.3017" />
                                                            <Key frame="210" value="-46.6681" />
                                                            <Key frame="220" value="-83.2311" />
                                                            <Key frame="230" value="-71.6294" />
                                                            <Key frame="240" value="-38.1426" />
                                                            <Key frame="250" value="-37.1758" />
                                                            <Key frame="260" value="-18.2839" />
                                                            <Key frame="270" value="-36.3017" />
                                                            <Key frame="280" value="-46.6681" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-85.8726" />
                                                            <Key frame="20" value="-90.3551" />
                                                            <Key frame="30" value="-90.3551" />
                                                            <Key frame="40" value="-86.9273" />
                                                            <Key frame="50" value="-38.7579" />
                                                            <Key frame="60" value="-37.1758" />
                                                            <Key frame="70" value="-41.8389" />
                                                            <Key frame="80" value="-85.8726" />
                                                            <Key frame="90" value="-90.3551" />
                                                            <Key frame="100" value="-90.3551" />
                                                            <Key frame="110" value="-86.9273" />
                                                            <Key frame="120" value="-38.7579" />
                                                            <Key frame="130" value="-37.1758" />
                                                            <Key frame="140" value="-41.8389" />
                                                            <Key frame="150" value="-85.8726" />
                                                            <Key frame="160" value="-90.3551" />
                                                            <Key frame="170" value="-90.3551" />
                                                            <Key frame="180" value="-86.9273" />
                                                            <Key frame="190" value="-38.7579" />
                                                            <Key frame="200" value="-37.1758" />
                                                            <Key frame="210" value="-41.8389" />
                                                            <Key frame="220" value="-85.8726" />
                                                            <Key frame="230" value="-90.3551" />
                                                            <Key frame="240" value="-90.3551" />
                                                            <Key frame="250" value="-86.9273" />
                                                            <Key frame="260" value="-38.7579" />
                                                            <Key frame="270" value="-37.1758" />
                                                            <Key frame="280" value="-41.8389" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="10" value="0.3824" />
                                                            <Key frame="20" value="0.3972" />
                                                            <Key frame="30" value="0.34" />
                                                            <Key frame="40" value="0.34" />
                                                            <Key frame="50" value="0.2984" />
                                                            <Key frame="60" value="0.2984" />
                                                            <Key frame="70" value="0.3132" />
                                                            <Key frame="80" value="0.3824" />
                                                            <Key frame="90" value="0.3972" />
                                                            <Key frame="100" value="0.34" />
                                                            <Key frame="110" value="0.34" />
                                                            <Key frame="120" value="0.2984" />
                                                            <Key frame="130" value="0.2984" />
                                                            <Key frame="140" value="0.3132" />
                                                            <Key frame="150" value="0.3824" />
                                                            <Key frame="160" value="0.3972" />
                                                            <Key frame="170" value="0.34" />
                                                            <Key frame="180" value="0.34" />
                                                            <Key frame="190" value="0.2984" />
                                                            <Key frame="200" value="0.2984" />
                                                            <Key frame="210" value="0.3132" />
                                                            <Key frame="220" value="0.3824" />
                                                            <Key frame="230" value="0.3972" />
                                                            <Key frame="240" value="0.34" />
                                                            <Key frame="250" value="0.34" />
                                                            <Key frame="260" value="0.2984" />
                                                            <Key frame="270" value="0.2984" />
                                                            <Key frame="280" value="0.3132" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="7.12163" />
                                                            <Key frame="20" value="7.12163" />
                                                            <Key frame="30" value="7.12163" />
                                                            <Key frame="40" value="7.12163" />
                                                            <Key frame="50" value="7.55628" />
                                                            <Key frame="60" value="7.55628" />
                                                            <Key frame="70" value="7.12163" />
                                                            <Key frame="80" value="7.12163" />
                                                            <Key frame="90" value="7.12163" />
                                                            <Key frame="100" value="7.12163" />
                                                            <Key frame="110" value="7.12163" />
                                                            <Key frame="120" value="7.55628" />
                                                            <Key frame="130" value="7.55628" />
                                                            <Key frame="140" value="7.12163" />
                                                            <Key frame="150" value="7.12163" />
                                                            <Key frame="160" value="7.12163" />
                                                            <Key frame="170" value="7.12163" />
                                                            <Key frame="180" value="7.12163" />
                                                            <Key frame="190" value="7.55628" />
                                                            <Key frame="200" value="7.55628" />
                                                            <Key frame="210" value="7.12163" />
                                                            <Key frame="220" value="7.12163" />
                                                            <Key frame="230" value="7.12163" />
                                                            <Key frame="240" value="7.12163" />
                                                            <Key frame="250" value="7.12163" />
                                                            <Key frame="260" value="7.55628" />
                                                            <Key frame="270" value="7.55628" />
                                                            <Key frame="280" value="7.12163" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="5.89115" />
                                                            <Key frame="20" value="5.89115" />
                                                            <Key frame="30" value="5.89115" />
                                                            <Key frame="40" value="5.89115" />
                                                            <Key frame="50" value="5.35899" />
                                                            <Key frame="60" value="5.35899" />
                                                            <Key frame="70" value="5.89115" />
                                                            <Key frame="80" value="5.89115" />
                                                            <Key frame="90" value="5.89115" />
                                                            <Key frame="100" value="5.89115" />
                                                            <Key frame="110" value="5.89115" />
                                                            <Key frame="120" value="5.35899" />
                                                            <Key frame="130" value="5.35899" />
                                                            <Key frame="140" value="5.89115" />
                                                            <Key frame="150" value="5.89115" />
                                                            <Key frame="160" value="5.89115" />
                                                            <Key frame="170" value="5.89115" />
                                                            <Key frame="180" value="5.89115" />
                                                            <Key frame="190" value="5.35899" />
                                                            <Key frame="200" value="5.35899" />
                                                            <Key frame="210" value="5.89115" />
                                                            <Key frame="220" value="5.89115" />
                                                            <Key frame="230" value="5.89115" />
                                                            <Key frame="240" value="5.89115" />
                                                            <Key frame="250" value="5.89115" />
                                                            <Key frame="260" value="5.35899" />
                                                            <Key frame="270" value="5.35899" />
                                                            <Key frame="280" value="5.89115" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-9.48991" />
                                                            <Key frame="20" value="-9.48991" />
                                                            <Key frame="30" value="-9.48991" />
                                                            <Key frame="40" value="-9.48991" />
                                                            <Key frame="50" value="-9.48991" />
                                                            <Key frame="60" value="-9.48991" />
                                                            <Key frame="70" value="-9.48991" />
                                                            <Key frame="80" value="-9.48991" />
                                                            <Key frame="90" value="-9.48991" />
                                                            <Key frame="100" value="-9.48991" />
                                                            <Key frame="110" value="-9.48991" />
                                                            <Key frame="120" value="-9.48991" />
                                                            <Key frame="130" value="-9.48991" />
                                                            <Key frame="140" value="-9.48991" />
                                                            <Key frame="150" value="-9.48991" />
                                                            <Key frame="160" value="-9.48991" />
                                                            <Key frame="170" value="-9.48991" />
                                                            <Key frame="180" value="-9.48991" />
                                                            <Key frame="190" value="-9.48991" />
                                                            <Key frame="200" value="-9.48991" />
                                                            <Key frame="210" value="-9.48991" />
                                                            <Key frame="220" value="-9.48991" />
                                                            <Key frame="230" value="-9.48991" />
                                                            <Key frame="240" value="-9.48991" />
                                                            <Key frame="250" value="-9.48991" />
                                                            <Key frame="260" value="-9.48991" />
                                                            <Key frame="270" value="-9.48991" />
                                                            <Key frame="280" value="-9.48991" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-5.10013" />
                                                            <Key frame="20" value="-5.10013" />
                                                            <Key frame="30" value="-5.10013" />
                                                            <Key frame="40" value="-5.10013" />
                                                            <Key frame="50" value="-5.29" />
                                                            <Key frame="60" value="-5.29" />
                                                            <Key frame="70" value="-5.10013" />
                                                            <Key frame="80" value="-5.10013" />
                                                            <Key frame="90" value="-5.10013" />
                                                            <Key frame="100" value="-5.10013" />
                                                            <Key frame="110" value="-5.10013" />
                                                            <Key frame="120" value="-5.29" />
                                                            <Key frame="130" value="-5.29" />
                                                            <Key frame="140" value="-5.10013" />
                                                            <Key frame="150" value="-5.10013" />
                                                            <Key frame="160" value="-5.10013" />
                                                            <Key frame="170" value="-5.10013" />
                                                            <Key frame="180" value="-5.10013" />
                                                            <Key frame="190" value="-5.29" />
                                                            <Key frame="200" value="-5.29" />
                                                            <Key frame="210" value="-5.10013" />
                                                            <Key frame="220" value="-5.10013" />
                                                            <Key frame="230" value="-5.10013" />
                                                            <Key frame="240" value="-5.10013" />
                                                            <Key frame="250" value="-5.10013" />
                                                            <Key frame="260" value="-5.29" />
                                                            <Key frame="270" value="-5.29" />
                                                            <Key frame="280" value="-5.10013" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="91.7566" />
                                                            <Key frame="20" value="75.5845" />
                                                            <Key frame="30" value="50.0959" />
                                                            <Key frame="40" value="51.2385" />
                                                            <Key frame="50" value="34.7196" />
                                                            <Key frame="60" value="44.6514" />
                                                            <Key frame="70" value="62.137" />
                                                            <Key frame="80" value="91.7566" />
                                                            <Key frame="90" value="75.5845" />
                                                            <Key frame="100" value="50.0959" />
                                                            <Key frame="110" value="51.2385" />
                                                            <Key frame="120" value="34.7196" />
                                                            <Key frame="130" value="44.6514" />
                                                            <Key frame="140" value="62.137" />
                                                            <Key frame="150" value="91.7566" />
                                                            <Key frame="160" value="75.5845" />
                                                            <Key frame="170" value="50.0959" />
                                                            <Key frame="180" value="51.2385" />
                                                            <Key frame="190" value="34.7196" />
                                                            <Key frame="200" value="44.6514" />
                                                            <Key frame="210" value="62.137" />
                                                            <Key frame="220" value="91.7566" />
                                                            <Key frame="230" value="75.5845" />
                                                            <Key frame="240" value="50.0959" />
                                                            <Key frame="250" value="51.2385" />
                                                            <Key frame="260" value="34.7196" />
                                                            <Key frame="270" value="44.6514" />
                                                            <Key frame="280" value="62.137" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-0.266077" />
                                                            <Key frame="20" value="10.7204" />
                                                            <Key frame="30" value="8.61098" />
                                                            <Key frame="40" value="-12.5709" />
                                                            <Key frame="50" value="-17.488" />
                                                            <Key frame="60" value="-14.7634" />
                                                            <Key frame="70" value="-7.03374" />
                                                            <Key frame="80" value="-0.266077" />
                                                            <Key frame="90" value="10.7204" />
                                                            <Key frame="100" value="8.61098" />
                                                            <Key frame="110" value="-12.5709" />
                                                            <Key frame="120" value="-17.488" />
                                                            <Key frame="130" value="-14.7634" />
                                                            <Key frame="140" value="-7.03374" />
                                                            <Key frame="150" value="-0.266077" />
                                                            <Key frame="160" value="10.7204" />
                                                            <Key frame="170" value="8.61098" />
                                                            <Key frame="180" value="-12.5709" />
                                                            <Key frame="190" value="-17.488" />
                                                            <Key frame="200" value="-14.7634" />
                                                            <Key frame="210" value="-7.03374" />
                                                            <Key frame="220" value="-0.266077" />
                                                            <Key frame="230" value="10.7204" />
                                                            <Key frame="240" value="8.61098" />
                                                            <Key frame="250" value="-12.5709" />
                                                            <Key frame="260" value="-17.488" />
                                                            <Key frame="270" value="-14.7634" />
                                                            <Key frame="280" value="-7.03374" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="90.2624" />
                                                            <Key frame="20" value="73.0356" />
                                                            <Key frame="30" value="73.0356" />
                                                            <Key frame="40" value="87.5378" />
                                                            <Key frame="50" value="49.046" />
                                                            <Key frame="60" value="47.376" />
                                                            <Key frame="70" value="69.6078" />
                                                            <Key frame="80" value="90.2624" />
                                                            <Key frame="90" value="73.0356" />
                                                            <Key frame="100" value="73.0356" />
                                                            <Key frame="110" value="87.5378" />
                                                            <Key frame="120" value="49.046" />
                                                            <Key frame="130" value="47.376" />
                                                            <Key frame="140" value="69.6078" />
                                                            <Key frame="150" value="90.2624" />
                                                            <Key frame="160" value="73.0356" />
                                                            <Key frame="170" value="73.0356" />
                                                            <Key frame="180" value="87.5378" />
                                                            <Key frame="190" value="49.046" />
                                                            <Key frame="200" value="47.376" />
                                                            <Key frame="210" value="69.6078" />
                                                            <Key frame="220" value="90.2624" />
                                                            <Key frame="230" value="73.0356" />
                                                            <Key frame="240" value="73.0356" />
                                                            <Key frame="250" value="87.5378" />
                                                            <Key frame="260" value="49.046" />
                                                            <Key frame="270" value="47.376" />
                                                            <Key frame="280" value="69.6078" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="5.27591" />
                                                            <Key frame="20" value="5.27591" />
                                                            <Key frame="30" value="5.27591" />
                                                            <Key frame="40" value="5.27591" />
                                                            <Key frame="50" value="5.18321" />
                                                            <Key frame="60" value="5.18321" />
                                                            <Key frame="70" value="5.27591" />
                                                            <Key frame="80" value="5.27591" />
                                                            <Key frame="90" value="5.27591" />
                                                            <Key frame="100" value="5.27591" />
                                                            <Key frame="110" value="5.27591" />
                                                            <Key frame="120" value="5.18321" />
                                                            <Key frame="130" value="5.18321" />
                                                            <Key frame="140" value="5.27591" />
                                                            <Key frame="150" value="5.27591" />
                                                            <Key frame="160" value="5.27591" />
                                                            <Key frame="170" value="5.27591" />
                                                            <Key frame="180" value="5.27591" />
                                                            <Key frame="190" value="5.18321" />
                                                            <Key frame="200" value="5.18321" />
                                                            <Key frame="210" value="5.27591" />
                                                            <Key frame="220" value="5.27591" />
                                                            <Key frame="230" value="5.27591" />
                                                            <Key frame="240" value="5.27591" />
                                                            <Key frame="250" value="5.27591" />
                                                            <Key frame="260" value="5.18321" />
                                                            <Key frame="270" value="5.18321" />
                                                            <Key frame="280" value="5.27591" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="7.38531" />
                                                            <Key frame="20" value="7.38531" />
                                                            <Key frame="30" value="7.38531" />
                                                            <Key frame="40" value="7.38531" />
                                                            <Key frame="50" value="7.55628" />
                                                            <Key frame="60" value="7.55628" />
                                                            <Key frame="70" value="7.38531" />
                                                            <Key frame="80" value="7.38531" />
                                                            <Key frame="90" value="7.38531" />
                                                            <Key frame="100" value="7.38531" />
                                                            <Key frame="110" value="7.38531" />
                                                            <Key frame="120" value="7.55628" />
                                                            <Key frame="130" value="7.55628" />
                                                            <Key frame="140" value="7.38531" />
                                                            <Key frame="150" value="7.38531" />
                                                            <Key frame="160" value="7.38531" />
                                                            <Key frame="170" value="7.38531" />
                                                            <Key frame="180" value="7.38531" />
                                                            <Key frame="190" value="7.55628" />
                                                            <Key frame="200" value="7.55628" />
                                                            <Key frame="210" value="7.38531" />
                                                            <Key frame="220" value="7.38531" />
                                                            <Key frame="230" value="7.38531" />
                                                            <Key frame="240" value="7.38531" />
                                                            <Key frame="250" value="7.38531" />
                                                            <Key frame="260" value="7.55628" />
                                                            <Key frame="270" value="7.55628" />
                                                            <Key frame="280" value="7.38531" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="45.2666" />
                                                            <Key frame="20" value="36.3017" />
                                                            <Key frame="30" value="18.2839" />
                                                            <Key frame="40" value="18.2839" />
                                                            <Key frame="50" value="38.1426" />
                                                            <Key frame="60" value="71.6294" />
                                                            <Key frame="70" value="82.9722" />
                                                            <Key frame="80" value="45.2666" />
                                                            <Key frame="90" value="36.3017" />
                                                            <Key frame="100" value="18.2839" />
                                                            <Key frame="110" value="18.2839" />
                                                            <Key frame="120" value="38.1426" />
                                                            <Key frame="130" value="71.6294" />
                                                            <Key frame="140" value="82.9722" />
                                                            <Key frame="150" value="45.2666" />
                                                            <Key frame="160" value="36.3017" />
                                                            <Key frame="170" value="18.2839" />
                                                            <Key frame="180" value="18.2839" />
                                                            <Key frame="190" value="38.1426" />
                                                            <Key frame="200" value="71.6294" />
                                                            <Key frame="210" value="82.9722" />
                                                            <Key frame="220" value="45.2666" />
                                                            <Key frame="230" value="36.3017" />
                                                            <Key frame="240" value="18.2839" />
                                                            <Key frame="250" value="18.2839" />
                                                            <Key frame="260" value="38.1426" />
                                                            <Key frame="270" value="71.6294" />
                                                            <Key frame="280" value="82.9722" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="40.0762" />
                                                            <Key frame="20" value="37.1758" />
                                                            <Key frame="30" value="38.7579" />
                                                            <Key frame="40" value="52.6447" />
                                                            <Key frame="50" value="90.3551" />
                                                            <Key frame="60" value="90.3551" />
                                                            <Key frame="70" value="84.7252" />
                                                            <Key frame="80" value="40.0762" />
                                                            <Key frame="90" value="37.1758" />
                                                            <Key frame="100" value="38.7579" />
                                                            <Key frame="110" value="52.6447" />
                                                            <Key frame="120" value="90.3551" />
                                                            <Key frame="130" value="90.3551" />
                                                            <Key frame="140" value="84.7252" />
                                                            <Key frame="150" value="40.0762" />
                                                            <Key frame="160" value="37.1758" />
                                                            <Key frame="170" value="38.7579" />
                                                            <Key frame="180" value="52.6447" />
                                                            <Key frame="190" value="90.3551" />
                                                            <Key frame="200" value="90.3551" />
                                                            <Key frame="210" value="84.7252" />
                                                            <Key frame="220" value="40.0762" />
                                                            <Key frame="230" value="37.1758" />
                                                            <Key frame="240" value="38.7579" />
                                                            <Key frame="250" value="52.6447" />
                                                            <Key frame="260" value="90.3551" />
                                                            <Key frame="270" value="90.3551" />
                                                            <Key frame="280" value="84.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="10" value="0.3072" />
                                                            <Key frame="20" value="0.2984" />
                                                            <Key frame="30" value="0.2984" />
                                                            <Key frame="40" value="0.2984" />
                                                            <Key frame="50" value="0.34" />
                                                            <Key frame="60" value="0.3972" />
                                                            <Key frame="70" value="0.3828" />
                                                            <Key frame="80" value="0.3072" />
                                                            <Key frame="90" value="0.2984" />
                                                            <Key frame="100" value="0.2984" />
                                                            <Key frame="110" value="0.2984" />
                                                            <Key frame="120" value="0.34" />
                                                            <Key frame="130" value="0.3972" />
                                                            <Key frame="140" value="0.3828" />
                                                            <Key frame="150" value="0.3072" />
                                                            <Key frame="160" value="0.2984" />
                                                            <Key frame="170" value="0.2984" />
                                                            <Key frame="180" value="0.2984" />
                                                            <Key frame="190" value="0.34" />
                                                            <Key frame="200" value="0.3972" />
                                                            <Key frame="210" value="0.3828" />
                                                            <Key frame="220" value="0.3072" />
                                                            <Key frame="230" value="0.2984" />
                                                            <Key frame="240" value="0.2984" />
                                                            <Key frame="250" value="0.2984" />
                                                            <Key frame="260" value="0.34" />
                                                            <Key frame="270" value="0.3972" />
                                                            <Key frame="280" value="0.3828" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="7.55628" />
                                                            <Key frame="20" value="7.55628" />
                                                            <Key frame="30" value="7.55628" />
                                                            <Key frame="40" value="7.55628" />
                                                            <Key frame="50" value="7.12163" />
                                                            <Key frame="60" value="7.12163" />
                                                            <Key frame="70" value="7.55628" />
                                                            <Key frame="80" value="7.55628" />
                                                            <Key frame="90" value="7.55628" />
                                                            <Key frame="100" value="7.55628" />
                                                            <Key frame="110" value="7.55628" />
                                                            <Key frame="120" value="7.12163" />
                                                            <Key frame="130" value="7.12163" />
                                                            <Key frame="140" value="7.55628" />
                                                            <Key frame="150" value="7.55628" />
                                                            <Key frame="160" value="7.55628" />
                                                            <Key frame="170" value="7.55628" />
                                                            <Key frame="180" value="7.55628" />
                                                            <Key frame="190" value="7.12163" />
                                                            <Key frame="200" value="7.12163" />
                                                            <Key frame="210" value="7.55628" />
                                                            <Key frame="220" value="7.55628" />
                                                            <Key frame="230" value="7.55628" />
                                                            <Key frame="240" value="7.55628" />
                                                            <Key frame="250" value="7.55628" />
                                                            <Key frame="260" value="7.12163" />
                                                            <Key frame="270" value="7.12163" />
                                                            <Key frame="280" value="7.55628" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-5.35899" />
                                                            <Key frame="20" value="-5.35899" />
                                                            <Key frame="30" value="-5.35899" />
                                                            <Key frame="40" value="-5.35899" />
                                                            <Key frame="50" value="-5.89115" />
                                                            <Key frame="60" value="-5.89115" />
                                                            <Key frame="70" value="-5.35899" />
                                                            <Key frame="80" value="-5.35899" />
                                                            <Key frame="90" value="-5.35899" />
                                                            <Key frame="100" value="-5.35899" />
                                                            <Key frame="110" value="-5.35899" />
                                                            <Key frame="120" value="-5.89115" />
                                                            <Key frame="130" value="-5.89115" />
                                                            <Key frame="140" value="-5.35899" />
                                                            <Key frame="150" value="-5.35899" />
                                                            <Key frame="160" value="-5.35899" />
                                                            <Key frame="170" value="-5.35899" />
                                                            <Key frame="180" value="-5.35899" />
                                                            <Key frame="190" value="-5.89115" />
                                                            <Key frame="200" value="-5.89115" />
                                                            <Key frame="210" value="-5.35899" />
                                                            <Key frame="220" value="-5.35899" />
                                                            <Key frame="230" value="-5.35899" />
                                                            <Key frame="240" value="-5.35899" />
                                                            <Key frame="250" value="-5.35899" />
                                                            <Key frame="260" value="-5.89115" />
                                                            <Key frame="270" value="-5.89115" />
                                                            <Key frame="280" value="-5.35899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-9.48991" />
                                                            <Key frame="20" value="-9.48991" />
                                                            <Key frame="30" value="-9.48991" />
                                                            <Key frame="40" value="-9.48991" />
                                                            <Key frame="50" value="-9.48991" />
                                                            <Key frame="60" value="-9.48991" />
                                                            <Key frame="70" value="-9.48991" />
                                                            <Key frame="80" value="-9.48991" />
                                                            <Key frame="90" value="-9.48991" />
                                                            <Key frame="100" value="-9.48991" />
                                                            <Key frame="110" value="-9.48991" />
                                                            <Key frame="120" value="-9.48991" />
                                                            <Key frame="130" value="-9.48991" />
                                                            <Key frame="140" value="-9.48991" />
                                                            <Key frame="150" value="-9.48991" />
                                                            <Key frame="160" value="-9.48991" />
                                                            <Key frame="170" value="-9.48991" />
                                                            <Key frame="180" value="-9.48991" />
                                                            <Key frame="190" value="-9.48991" />
                                                            <Key frame="200" value="-9.48991" />
                                                            <Key frame="210" value="-9.48991" />
                                                            <Key frame="220" value="-9.48991" />
                                                            <Key frame="230" value="-9.48991" />
                                                            <Key frame="240" value="-9.48991" />
                                                            <Key frame="250" value="-9.48991" />
                                                            <Key frame="260" value="-9.48991" />
                                                            <Key frame="270" value="-9.48991" />
                                                            <Key frame="280" value="-9.48991" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-5.2711" />
                                                            <Key frame="20" value="-5.29" />
                                                            <Key frame="30" value="-5.29" />
                                                            <Key frame="40" value="-5.29" />
                                                            <Key frame="50" value="-5.10013" />
                                                            <Key frame="60" value="-5.10013" />
                                                            <Key frame="70" value="-5.2711" />
                                                            <Key frame="80" value="-5.2711" />
                                                            <Key frame="90" value="-5.29" />
                                                            <Key frame="100" value="-5.29" />
                                                            <Key frame="110" value="-5.29" />
                                                            <Key frame="120" value="-5.10013" />
                                                            <Key frame="130" value="-5.10013" />
                                                            <Key frame="140" value="-5.2711" />
                                                            <Key frame="150" value="-5.2711" />
                                                            <Key frame="160" value="-5.29" />
                                                            <Key frame="170" value="-5.29" />
                                                            <Key frame="180" value="-5.29" />
                                                            <Key frame="190" value="-5.10013" />
                                                            <Key frame="200" value="-5.10013" />
                                                            <Key frame="210" value="-5.2711" />
                                                            <Key frame="220" value="-5.2711" />
                                                            <Key frame="230" value="-5.29" />
                                                            <Key frame="240" value="-5.29" />
                                                            <Key frame="250" value="-5.29" />
                                                            <Key frame="260" value="-5.10013" />
                                                            <Key frame="270" value="-5.10013" />
                                                            <Key frame="280" value="-5.2711" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="59.2414" />
                                                            <Key frame="20" value="44.6514" />
                                                            <Key frame="30" value="34.7196" />
                                                            <Key frame="40" value="37.2685" />
                                                            <Key frame="50" value="50.0959" />
                                                            <Key frame="60" value="75.5845" />
                                                            <Key frame="70" value="91.3219" />
                                                            <Key frame="80" value="59.2414" />
                                                            <Key frame="90" value="44.6514" />
                                                            <Key frame="100" value="34.7196" />
                                                            <Key frame="110" value="37.2685" />
                                                            <Key frame="120" value="50.0959" />
                                                            <Key frame="130" value="75.5845" />
                                                            <Key frame="140" value="91.3219" />
                                                            <Key frame="150" value="59.2414" />
                                                            <Key frame="160" value="44.6514" />
                                                            <Key frame="170" value="34.7196" />
                                                            <Key frame="180" value="37.2685" />
                                                            <Key frame="190" value="50.0959" />
                                                            <Key frame="200" value="75.5845" />
                                                            <Key frame="210" value="91.3219" />
                                                            <Key frame="220" value="59.2414" />
                                                            <Key frame="230" value="44.6514" />
                                                            <Key frame="240" value="34.7196" />
                                                            <Key frame="250" value="37.2685" />
                                                            <Key frame="260" value="50.0959" />
                                                            <Key frame="270" value="75.5845" />
                                                            <Key frame="280" value="91.3219" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="7.73207" />
                                                            <Key frame="20" value="14.7634" />
                                                            <Key frame="30" value="17.488" />
                                                            <Key frame="40" value="10.8962" />
                                                            <Key frame="50" value="-8.61098" />
                                                            <Key frame="60" value="-10.7204" />
                                                            <Key frame="70" value="0.876518" />
                                                            <Key frame="80" value="7.73207" />
                                                            <Key frame="90" value="14.7634" />
                                                            <Key frame="100" value="17.488" />
                                                            <Key frame="110" value="10.8962" />
                                                            <Key frame="120" value="-8.61098" />
                                                            <Key frame="130" value="-10.7204" />
                                                            <Key frame="140" value="0.876518" />
                                                            <Key frame="150" value="7.73207" />
                                                            <Key frame="160" value="14.7634" />
                                                            <Key frame="170" value="17.488" />
                                                            <Key frame="180" value="10.8962" />
                                                            <Key frame="190" value="-8.61098" />
                                                            <Key frame="200" value="-10.7204" />
                                                            <Key frame="210" value="0.876518" />
                                                            <Key frame="220" value="7.73207" />
                                                            <Key frame="230" value="14.7634" />
                                                            <Key frame="240" value="17.488" />
                                                            <Key frame="250" value="10.8962" />
                                                            <Key frame="260" value="-8.61098" />
                                                            <Key frame="270" value="-10.7204" />
                                                            <Key frame="280" value="0.876518" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="10" value="-67.9427" />
                                                            <Key frame="20" value="-47.376" />
                                                            <Key frame="30" value="-49.046" />
                                                            <Key frame="40" value="-64.5149" />
                                                            <Key frame="50" value="-73.0356" />
                                                            <Key frame="60" value="-73.0356" />
                                                            <Key frame="70" value="-90.7946" />
                                                            <Key frame="80" value="-67.9427" />
                                                            <Key frame="90" value="-47.376" />
                                                            <Key frame="100" value="-49.046" />
                                                            <Key frame="110" value="-64.5149" />
                                                            <Key frame="120" value="-73.0356" />
                                                            <Key frame="130" value="-73.0356" />
                                                            <Key frame="140" value="-90.7946" />
                                                            <Key frame="150" value="-67.9427" />
                                                            <Key frame="160" value="-47.376" />
                                                            <Key frame="170" value="-49.046" />
                                                            <Key frame="180" value="-64.5149" />
                                                            <Key frame="190" value="-73.0356" />
                                                            <Key frame="200" value="-73.0356" />
                                                            <Key frame="210" value="-90.7946" />
                                                            <Key frame="220" value="-67.9427" />
                                                            <Key frame="230" value="-47.376" />
                                                            <Key frame="240" value="-49.046" />
                                                            <Key frame="250" value="-64.5149" />
                                                            <Key frame="260" value="-73.0356" />
                                                            <Key frame="270" value="-73.0356" />
                                                            <Key frame="280" value="-90.7946" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="5" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="6" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="7" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="8" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="9" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="10" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="11" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="12" />
                        <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="13" />
                        <Link inputowner="6" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="25" indexofinput="2" outputowner="12" indexofoutput="3" />
                        <Link inputowner="27" indexofinput="2" outputowner="12" indexofoutput="4" />
                        <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="3" />
                        <Link inputowner="24" indexofinput="2" outputowner="14" indexofoutput="4" />
                        <Link inputowner="22" indexofinput="2" outputowner="14" indexofoutput="4" />
                        <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="22" indexofoutput="4" />
                        <Link inputowner="26" indexofinput="3" outputowner="26" indexofoutput="5" />
                        <Link inputowner="25" indexofinput="2" outputowner="18" indexofoutput="4" />
                        <Link inputowner="27" indexofinput="2" outputowner="18" indexofoutput="5" />
                        <Link inputowner="18" indexofinput="2" outputowner="26" indexofoutput="5" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="6" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="7" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="8" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="9" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="10" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="11" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="12" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="13" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="14" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="15" />
                        <Link inputowner="3" indexofinput="2" outputowner="18" indexofoutput="5" />
                        <Link inputowner="3" indexofinput="2" outputowner="12" indexofoutput="4" />
                        <Link inputowner="22" indexofinput="3" outputowner="18" indexofoutput="16" />
                        <Link inputowner="2" indexofinput="2" outputowner="30" indexofoutput="4" />
                        <Link inputowner="17" indexofinput="2" outputowner="25" indexofoutput="4" />
                        <Link inputowner="35" indexofinput="2" outputowner="27" indexofoutput="4" />
                        <Link inputowner="39" indexofinput="2" outputowner="1" indexofoutput="5" />
                        <Link inputowner="39" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="39" indexofinput="2" outputowner="1" indexofoutput="7" />
                        <Link inputowner="38" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="38" indexofinput="2" outputowner="1" indexofoutput="9" />
                        <Link inputowner="38" indexofinput="2" outputowner="1" indexofoutput="10" />
                        <Link inputowner="38" indexofinput="2" outputowner="1" indexofoutput="11" />
                        <Link inputowner="37" indexofinput="2" outputowner="1" indexofoutput="12" />
                        <Link inputowner="37" indexofinput="2" outputowner="1" indexofoutput="13" />
                        <Link inputowner="37" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="30" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="2" outputowner="17" indexofoutput="4" />
                        <Link inputowner="34" indexofinput="2" outputowner="30" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="5" />
                        <Link inputowner="29" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="19" indexofinput="2" outputowner="43" indexofoutput="4" />
                        <Link inputowner="23" indexofinput="2" outputowner="19" indexofoutput="5" />
                        <Link inputowner="13" indexofinput="2" outputowner="23" indexofoutput="4" />
                        <Link inputowner="44" indexofinput="2" outputowner="24" indexofoutput="4" />
                        <Link inputowner="45" indexofinput="2" outputowner="16" indexofoutput="3" />
                        <Link inputowner="34" indexofinput="2" outputowner="20" indexofoutput="5" />
                        <Link inputowner="42" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="16" indexofinput="2" outputowner="46" indexofoutput="4" />
                        <Link inputowner="46" indexofinput="2" outputowner="42" indexofoutput="5" />
                        <Link inputowner="10" indexofinput="2" outputowner="42" indexofoutput="6" />
                        <Link inputowner="8" indexofinput="2" outputowner="44" indexofoutput="4" />
                        <Link inputowner="26" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="41" indexofinput="2" outputowner="42" indexofoutput="4" />
                        <Link inputowner="47" indexofinput="2" outputowner="41" indexofoutput="4" />
                        <Link inputowner="32" indexofinput="2" outputowner="47" indexofoutput="3" />
                        <Link inputowner="7" indexofinput="2" outputowner="29" indexofoutput="6" />
                        <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                        <Link inputowner="29" indexofinput="2" outputowner="35" indexofoutput="4" />
                        <Link inputowner="43" indexofinput="2" outputowner="15" indexofoutput="4" />
                        <Link inputowner="31" indexofinput="2" outputowner="45" indexofoutput="4" />
                        <Link inputowner="15" indexofinput="2" outputowner="31" indexofoutput="4" />
                        <Link inputowner="30" indexofinput="2" outputowner="29" indexofoutput="5" />
                        <Link inputowner="4" indexofinput="2" outputowner="34" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="36" indexofinput="2" outputowner="32" indexofoutput="4" />
                        <Link inputowner="28" indexofinput="2" outputowner="36" indexofoutput="4" />
                        <Link inputowner="29" indexofinput="2" outputowner="10" indexofoutput="4" />
                        <Link inputowner="20" indexofinput="2" outputowner="28" indexofoutput="4" />
                        <Link inputowner="11" indexofinput="2" outputowner="18" indexofoutput="4" />
                        <Link inputowner="11" indexofinput="2" outputowner="12" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
